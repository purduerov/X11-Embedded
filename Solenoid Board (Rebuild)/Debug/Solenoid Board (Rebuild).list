
Solenoid Board (Rebuild).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080015a8  080015a8  000115a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015d8  080015d8  000115d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015dc  080015dc  000115dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080015e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  20000004  080015e4  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000b0  080015e4  000200b0  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000095ff  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001764  00000000  00000000  0002962b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014fe  00000000  00000000  0002ad8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000378  00000000  00000000  0002c290  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000508  00000000  00000000  0002c608  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000271c  00000000  00000000  0002cb10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000174b  00000000  00000000  0002f22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030977  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000086c  00000000  00000000  000309f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001590 	.word	0x08001590

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001590 	.word	0x08001590

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f000 ff3a 	bl	800109c <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 fb4a 	bl	80008c8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 fb0a 	bl	8000854 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	2310      	movs	r3, #16
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
{
 8000248:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800024c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024e:	430b      	orrs	r3, r1
 8000250:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f001 f897 	bl	8001388 <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	20000068 	.word	0x20000068

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000068 	.word	0x20000068

08000280 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8000280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8000282:	2601      	movs	r6, #1

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000284:	2780      	movs	r7, #128	; 0x80
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8000286:	0034      	movs	r4, r6
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000288:	6803      	ldr	r3, [r0, #0]
 800028a:	00bf      	lsls	r7, r7, #2
 800028c:	59d8      	ldr	r0, [r3, r7]
 800028e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8000290:	9000      	str	r0, [sp, #0]
 8000292:	0228      	lsls	r0, r5, #8
 8000294:	9001      	str	r0, [sp, #4]
 8000296:	9d00      	ldr	r5, [sp, #0]
 8000298:	4830      	ldr	r0, [pc, #192]	; (800035c <HAL_CAN_ConfigFilter+0xdc>)
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 800029a:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(hcan->Instance->FMR                         ,
 800029c:	4005      	ands	r5, r0
 800029e:	0028      	movs	r0, r5
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 80002a0:	4094      	lsls	r4, r2
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002a2:	9d01      	ldr	r5, [sp, #4]
 80002a4:	4328      	orrs	r0, r5
 80002a6:	4330      	orrs	r0, r6
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80002a8:	2687      	movs	r6, #135	; 0x87
 80002aa:	43e5      	mvns	r5, r4
  MODIFY_REG(hcan->Instance->FMR                         ,
 80002ac:	51d8      	str	r0, [r3, r7]
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80002ae:	00b6      	lsls	r6, r6, #2
 80002b0:	5998      	ldr	r0, [r3, r6]
 80002b2:	4028      	ands	r0, r5
 80002b4:	5198      	str	r0, [r3, r6]

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80002b6:	69c8      	ldr	r0, [r1, #28]
 80002b8:	2800      	cmp	r0, #0
 80002ba:	d133      	bne.n	8000324 <HAL_CAN_ConfigFilter+0xa4>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80002bc:	3e10      	subs	r6, #16
 80002be:	5998      	ldr	r0, [r3, r6]
 80002c0:	00d2      	lsls	r2, r2, #3
 80002c2:	4028      	ands	r0, r5
 80002c4:	5198      	str	r0, [r3, r6]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80002c6:	68c8      	ldr	r0, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80002c8:	888e      	ldrh	r6, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80002ca:	0400      	lsls	r0, r0, #16
 80002cc:	4330      	orrs	r0, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80002ce:	2690      	movs	r6, #144	; 0x90
 80002d0:	189a      	adds	r2, r3, r2
 80002d2:	00b6      	lsls	r6, r6, #2
 80002d4:	5190      	str	r0, [r2, r6]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80002d6:	6888      	ldr	r0, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80002d8:	880e      	ldrh	r6, [r1, #0]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80002da:	0400      	lsls	r0, r0, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80002dc:	4330      	orrs	r0, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80002de:	2691      	movs	r6, #145	; 0x91
 80002e0:	00b6      	lsls	r6, r6, #2
 80002e2:	5190      	str	r0, [r2, r6]
 80002e4:	2281      	movs	r2, #129	; 0x81
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80002e6:	6988      	ldr	r0, [r1, #24]
 80002e8:	0092      	lsls	r2, r2, #2
 80002ea:	2800      	cmp	r0, #0
 80002ec:	d12e      	bne.n	800034c <HAL_CAN_ConfigFilter+0xcc>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80002ee:	5898      	ldr	r0, [r3, r2]
 80002f0:	4028      	ands	r0, r5
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80002f2:	5098      	str	r0, [r3, r2]
 80002f4:	2285      	movs	r2, #133	; 0x85
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80002f6:	6908      	ldr	r0, [r1, #16]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	2800      	cmp	r0, #0
 80002fc:	d129      	bne.n	8000352 <HAL_CAN_ConfigFilter+0xd2>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80002fe:	5898      	ldr	r0, [r3, r2]
 8000300:	4005      	ands	r5, r0
 8000302:	509d      	str	r5, [r3, r2]
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000304:	6a0a      	ldr	r2, [r1, #32]
 8000306:	2a01      	cmp	r2, #1
 8000308:	d104      	bne.n	8000314 <HAL_CAN_ConfigFilter+0x94>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800030a:	2287      	movs	r2, #135	; 0x87
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	5899      	ldr	r1, [r3, r2]
 8000310:	430c      	orrs	r4, r1
 8000312:	509c      	str	r4, [r3, r2]
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	2001      	movs	r0, #1
 8000318:	0089      	lsls	r1, r1, #2
 800031a:	585a      	ldr	r2, [r3, r1]
 800031c:	4382      	bics	r2, r0
 800031e:	505a      	str	r2, [r3, r1]
  
  /* Return function status */
  return HAL_OK;
}
 8000320:	2000      	movs	r0, #0
 8000322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000324:	2801      	cmp	r0, #1
 8000326:	d1dd      	bne.n	80002e4 <HAL_CAN_ConfigFilter+0x64>
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000328:	2683      	movs	r6, #131	; 0x83
 800032a:	00b6      	lsls	r6, r6, #2
 800032c:	5998      	ldr	r0, [r3, r6]
 800032e:	00d2      	lsls	r2, r2, #3
 8000330:	4320      	orrs	r0, r4
 8000332:	5198      	str	r0, [r3, r6]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000334:	6808      	ldr	r0, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000336:	888e      	ldrh	r6, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000338:	0400      	lsls	r0, r0, #16
 800033a:	4330      	orrs	r0, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800033c:	2690      	movs	r6, #144	; 0x90
 800033e:	189a      	adds	r2, r3, r2
 8000340:	00b6      	lsls	r6, r6, #2
 8000342:	5190      	str	r0, [r2, r6]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000344:	6888      	ldr	r0, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000346:	898e      	ldrh	r6, [r1, #12]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000348:	0400      	lsls	r0, r0, #16
 800034a:	e7c7      	b.n	80002dc <HAL_CAN_ConfigFilter+0x5c>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800034c:	5898      	ldr	r0, [r3, r2]
 800034e:	4320      	orrs	r0, r4
 8000350:	e7cf      	b.n	80002f2 <HAL_CAN_ConfigFilter+0x72>
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000352:	5898      	ldr	r0, [r3, r2]
 8000354:	4320      	orrs	r0, r4
 8000356:	5098      	str	r0, [r3, r2]
 8000358:	e7d4      	b.n	8000304 <HAL_CAN_ConfigFilter+0x84>
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	ffffc0ff 	.word	0xffffc0ff

08000360 <HAL_CAN_Init>:
{
 8000360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000362:	0004      	movs	r4, r0
     return HAL_ERROR;
 8000364:	2001      	movs	r0, #1
  if(hcan == NULL)
 8000366:	2c00      	cmp	r4, #0
 8000368:	d070      	beq.n	800044c <HAL_CAN_Init+0xec>
  if(hcan->State == HAL_CAN_STATE_RESET)
 800036a:	0025      	movs	r5, r4
 800036c:	353d      	adds	r5, #61	; 0x3d
 800036e:	782b      	ldrb	r3, [r5, #0]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d105      	bne.n	8000382 <HAL_CAN_Init+0x22>
    hcan->Lock = HAL_UNLOCKED;
 8000376:	0022      	movs	r2, r4
 8000378:	323c      	adds	r2, #60	; 0x3c
 800037a:	7013      	strb	r3, [r2, #0]
    HAL_CAN_MspInit(hcan);
 800037c:	0020      	movs	r0, r4
 800037e:	f001 f81b 	bl	80013b8 <HAL_CAN_MspInit>
  hcan->State = HAL_CAN_STATE_BUSY;
 8000382:	2102      	movs	r1, #2
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000384:	2701      	movs	r7, #1
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000386:	6823      	ldr	r3, [r4, #0]
  hcan->State = HAL_CAN_STATE_BUSY;
 8000388:	7029      	strb	r1, [r5, #0]
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	438a      	bics	r2, r1
 800038e:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	433a      	orrs	r2, r7
 8000394:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();   
 8000396:	f7ff ff6d 	bl	8000274 <HAL_GetTick>
 800039a:	9001      	str	r0, [sp, #4]
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800039c:	6823      	ldr	r3, [r4, #0]
 800039e:	685e      	ldr	r6, [r3, #4]
 80003a0:	403e      	ands	r6, r7
 80003a2:	d049      	beq.n	8000438 <HAL_CAN_Init+0xd8>
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	423a      	tst	r2, r7
 80003a8:	d100      	bne.n	80003ac <HAL_CAN_Init+0x4c>
 80003aa:	e073      	b.n	8000494 <HAL_CAN_Init+0x134>
    if (hcan->Init.TTCM == ENABLE)
 80003ac:	69a1      	ldr	r1, [r4, #24]
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	2901      	cmp	r1, #1
 80003b2:	d14c      	bne.n	800044e <HAL_CAN_Init+0xee>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80003b4:	6819      	ldr	r1, [r3, #0]
 80003b6:	430a      	orrs	r2, r1
 80003b8:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 80003ba:	69e1      	ldr	r1, [r4, #28]
 80003bc:	2240      	movs	r2, #64	; 0x40
 80003be:	2901      	cmp	r1, #1
 80003c0:	d149      	bne.n	8000456 <HAL_CAN_Init+0xf6>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80003c2:	6819      	ldr	r1, [r3, #0]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	601a      	str	r2, [r3, #0]
    if (hcan->Init.AWUM == ENABLE)
 80003c8:	6a21      	ldr	r1, [r4, #32]
 80003ca:	2220      	movs	r2, #32
 80003cc:	2901      	cmp	r1, #1
 80003ce:	d146      	bne.n	800045e <HAL_CAN_Init+0xfe>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80003d0:	6819      	ldr	r1, [r3, #0]
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
    if (hcan->Init.NART == ENABLE)
 80003d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80003d8:	2210      	movs	r2, #16
 80003da:	2901      	cmp	r1, #1
 80003dc:	d143      	bne.n	8000466 <HAL_CAN_Init+0x106>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003de:	6819      	ldr	r1, [r3, #0]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	601a      	str	r2, [r3, #0]
    if (hcan->Init.RFLM == ENABLE)
 80003e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003e6:	2208      	movs	r2, #8
 80003e8:	2901      	cmp	r1, #1
 80003ea:	d140      	bne.n	800046e <HAL_CAN_Init+0x10e>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	430a      	orrs	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
    if (hcan->Init.TXFP == ENABLE)
 80003f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80003f4:	2204      	movs	r2, #4
 80003f6:	2901      	cmp	r1, #1
 80003f8:	d13d      	bne.n	8000476 <HAL_CAN_Init+0x116>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fa:	6819      	ldr	r1, [r3, #0]
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000400:	2601      	movs	r6, #1
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000402:	68e1      	ldr	r1, [r4, #12]
 8000404:	68a2      	ldr	r2, [r4, #8]
 8000406:	430a      	orrs	r2, r1
 8000408:	6921      	ldr	r1, [r4, #16]
 800040a:	430a      	orrs	r2, r1
 800040c:	6961      	ldr	r1, [r4, #20]
 800040e:	430a      	orrs	r2, r1
 8000410:	6861      	ldr	r1, [r4, #4]
 8000412:	3901      	subs	r1, #1
 8000414:	430a      	orrs	r2, r1
 8000416:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	43b2      	bics	r2, r6
 800041c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();   
 800041e:	f7ff ff29 	bl	8000274 <HAL_GetTick>
 8000422:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000424:	6823      	ldr	r3, [r4, #0]
 8000426:	685a      	ldr	r2, [r3, #4]
 8000428:	4232      	tst	r2, r6
 800042a:	d128      	bne.n	800047e <HAL_CAN_Init+0x11e>
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800042c:	6858      	ldr	r0, [r3, #4]
 800042e:	4030      	ands	r0, r6
 8000430:	d130      	bne.n	8000494 <HAL_CAN_Init+0x134>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000432:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000434:	702e      	strb	r6, [r5, #0]
    return HAL_OK;
 8000436:	e009      	b.n	800044c <HAL_CAN_Init+0xec>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000438:	f7ff ff1c 	bl	8000274 <HAL_GetTick>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	1ac0      	subs	r0, r0, r3
 8000440:	280a      	cmp	r0, #10
 8000442:	d9ab      	bls.n	800039c <HAL_CAN_Init+0x3c>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000444:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8000446:	343c      	adds	r4, #60	; 0x3c
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000448:	7028      	strb	r0, [r5, #0]
      __HAL_UNLOCK(hcan);
 800044a:	7026      	strb	r6, [r4, #0]
}
 800044c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800044e:	6819      	ldr	r1, [r3, #0]
 8000450:	4391      	bics	r1, r2
 8000452:	6019      	str	r1, [r3, #0]
 8000454:	e7b1      	b.n	80003ba <HAL_CAN_Init+0x5a>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000456:	6819      	ldr	r1, [r3, #0]
 8000458:	4391      	bics	r1, r2
 800045a:	6019      	str	r1, [r3, #0]
 800045c:	e7b4      	b.n	80003c8 <HAL_CAN_Init+0x68>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800045e:	6819      	ldr	r1, [r3, #0]
 8000460:	4391      	bics	r1, r2
 8000462:	6019      	str	r1, [r3, #0]
 8000464:	e7b7      	b.n	80003d6 <HAL_CAN_Init+0x76>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000466:	6819      	ldr	r1, [r3, #0]
 8000468:	4391      	bics	r1, r2
 800046a:	6019      	str	r1, [r3, #0]
 800046c:	e7ba      	b.n	80003e4 <HAL_CAN_Init+0x84>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	4391      	bics	r1, r2
 8000472:	6019      	str	r1, [r3, #0]
 8000474:	e7bd      	b.n	80003f2 <HAL_CAN_Init+0x92>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000476:	6819      	ldr	r1, [r3, #0]
 8000478:	4391      	bics	r1, r2
 800047a:	6019      	str	r1, [r3, #0]
 800047c:	e7c0      	b.n	8000400 <HAL_CAN_Init+0xa0>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800047e:	f7ff fef9 	bl	8000274 <HAL_GetTick>
 8000482:	1bc0      	subs	r0, r0, r7
 8000484:	280a      	cmp	r0, #10
 8000486:	d9cd      	bls.n	8000424 <HAL_CAN_Init+0xc4>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000488:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 800048a:	2300      	movs	r3, #0
 800048c:	343c      	adds	r4, #60	; 0x3c
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 800048e:	7028      	strb	r0, [r5, #0]
       __HAL_UNLOCK(hcan);
 8000490:	7023      	strb	r3, [r4, #0]
       return HAL_TIMEOUT;
 8000492:	e7db      	b.n	800044c <HAL_CAN_Init+0xec>
    hcan->State = HAL_CAN_STATE_ERROR;
 8000494:	2304      	movs	r3, #4
    return HAL_ERROR;
 8000496:	2001      	movs	r0, #1
    hcan->State = HAL_CAN_STATE_ERROR;
 8000498:	702b      	strb	r3, [r5, #0]
    return HAL_ERROR;
 800049a:	e7d7      	b.n	800044c <HAL_CAN_Init+0xec>

0800049c <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber    FIFO number.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 800049c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 800049e:	0004      	movs	r4, r0
 80004a0:	343c      	adds	r4, #60	; 0x3c
 80004a2:	7823      	ldrb	r3, [r4, #0]
{
 80004a4:	0005      	movs	r5, r0
  __HAL_LOCK(hcan);
 80004a6:	2002      	movs	r0, #2
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d014      	beq.n	80004d6 <HAL_CAN_Receive_IT+0x3a>
 80004ac:	2301      	movs	r3, #1
 80004ae:	7023      	strb	r3, [r4, #0]
 80004b0:	002b      	movs	r3, r5
 80004b2:	333d      	adds	r3, #61	; 0x3d

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 80004b4:	2900      	cmp	r1, #0
 80004b6:	d10f      	bne.n	80004d8 <HAL_CAN_Receive_IT+0x3c>
 80004b8:	781a      	ldrb	r2, [r3, #0]
 80004ba:	2a22      	cmp	r2, #34	; 0x22
 80004bc:	d008      	beq.n	80004d0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80004be:	781a      	ldrb	r2, [r3, #0]
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 80004c0:	2a42      	cmp	r2, #66	; 0x42
 80004c2:	d005      	beq.n	80004d0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80004c4:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80004c6:	2a62      	cmp	r2, #98	; 0x62
 80004c8:	d002      	beq.n	80004d0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 80004ca:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80004cc:	2a72      	cmp	r2, #114	; 0x72
 80004ce:	d11b      	bne.n	8000508 <HAL_CAN_Receive_IT+0x6c>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80004d0:	2300      	movs	r3, #0

    return HAL_BUSY;
 80004d2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hcan);
 80004d4:	7023      	strb	r3, [r4, #0]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }
  
  /* Return function status */
  return HAL_OK;
}
 80004d6:	bd30      	pop	{r4, r5, pc}
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80004d8:	2901      	cmp	r1, #1
 80004da:	d10b      	bne.n	80004f4 <HAL_CAN_Receive_IT+0x58>
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	2a32      	cmp	r2, #50	; 0x32
 80004e0:	d0f6      	beq.n	80004d0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80004e2:	781a      	ldrb	r2, [r3, #0]
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80004e4:	2a52      	cmp	r2, #82	; 0x52
 80004e6:	d0f3      	beq.n	80004d0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80004e8:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80004ea:	2a62      	cmp	r2, #98	; 0x62
 80004ec:	d0f0      	beq.n	80004d0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 80004ee:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80004f0:	2a72      	cmp	r2, #114	; 0x72
 80004f2:	d0ed      	beq.n	80004d0 <HAL_CAN_Receive_IT+0x34>
    switch(hcan->State)
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	2a22      	cmp	r2, #34	; 0x22
 80004fa:	d022      	beq.n	8000542 <HAL_CAN_Receive_IT+0xa6>
 80004fc:	2a42      	cmp	r2, #66	; 0x42
 80004fe:	d022      	beq.n	8000546 <HAL_CAN_Receive_IT+0xaa>
 8000500:	2a12      	cmp	r2, #18
 8000502:	d122      	bne.n	800054a <HAL_CAN_Receive_IT+0xae>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000504:	3240      	adds	r2, #64	; 0x40
 8000506:	e008      	b.n	800051a <HAL_CAN_Receive_IT+0x7e>
    switch(hcan->State)
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	b2d2      	uxtb	r2, r2
 800050c:	2a32      	cmp	r2, #50	; 0x32
 800050e:	d018      	beq.n	8000542 <HAL_CAN_Receive_IT+0xa6>
 8000510:	2a52      	cmp	r2, #82	; 0x52
 8000512:	d018      	beq.n	8000546 <HAL_CAN_Receive_IT+0xaa>
 8000514:	2a12      	cmp	r2, #18
 8000516:	d112      	bne.n	800053e <HAL_CAN_Receive_IT+0xa2>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000518:	3230      	adds	r2, #48	; 0x30
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800051a:	701a      	strb	r2, [r3, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800051c:	2300      	movs	r3, #0
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800051e:	208f      	movs	r0, #143	; 0x8f
 8000520:	682a      	ldr	r2, [r5, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000522:	642b      	str	r3, [r5, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000524:	6955      	ldr	r5, [r2, #20]
 8000526:	0200      	lsls	r0, r0, #8
 8000528:	4328      	orrs	r0, r5
 800052a:	6150      	str	r0, [r2, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 800052c:	6950      	ldr	r0, [r2, #20]
  __HAL_UNLOCK(hcan);
 800052e:	7023      	strb	r3, [r4, #0]
  if(FIFONumber == CAN_FIFO0)
 8000530:	4299      	cmp	r1, r3
 8000532:	d10c      	bne.n	800054e <HAL_CAN_Receive_IT+0xb2>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000534:	330a      	adds	r3, #10
 8000536:	4303      	orrs	r3, r0
 8000538:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800053a:	0008      	movs	r0, r1
 800053c:	e7cb      	b.n	80004d6 <HAL_CAN_Receive_IT+0x3a>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800053e:	2222      	movs	r2, #34	; 0x22
 8000540:	e7eb      	b.n	800051a <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000542:	2262      	movs	r2, #98	; 0x62
 8000544:	e7e9      	b.n	800051a <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000546:	2272      	movs	r2, #114	; 0x72
 8000548:	e7e7      	b.n	800051a <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800054a:	2232      	movs	r2, #50	; 0x32
 800054c:	e7e5      	b.n	800051a <HAL_CAN_Receive_IT+0x7e>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 800054e:	2150      	movs	r1, #80	; 0x50
 8000550:	4301      	orrs	r1, r0
 8000552:	6151      	str	r1, [r2, #20]
  return HAL_OK;
 8000554:	0018      	movs	r0, r3
 8000556:	e7be      	b.n	80004d6 <HAL_CAN_Receive_IT+0x3a>

08000558 <HAL_CAN_TxCpltCallback>:
 8000558:	4770      	bx	lr
	...

0800055c <CAN_Receive_IT>:
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 800055c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 800055e:	2900      	cmp	r1, #0
 8000560:	d161      	bne.n	8000626 <CAN_Receive_IT+0xca>
  {
    pRxMsg = hcan->pRxMsg;
 8000562:	6b43      	ldr	r3, [r0, #52]	; 0x34
  {
    pRxMsg = hcan->pRx1Msg;
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000564:	26d8      	movs	r6, #216	; 0xd8
 8000566:	6802      	ldr	r2, [r0, #0]
 8000568:	010c      	lsls	r4, r1, #4
 800056a:	1915      	adds	r5, r2, r4
 800056c:	9401      	str	r4, [sp, #4]
 800056e:	2404      	movs	r4, #4
 8000570:	0076      	lsls	r6, r6, #1
 8000572:	59af      	ldr	r7, [r5, r6]
 8000574:	4027      	ands	r7, r4
 8000576:	609f      	str	r7, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000578:	d157      	bne.n	800062a <CAN_Receive_IT+0xce>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 800057a:	59af      	ldr	r7, [r5, r6]
 800057c:	0d7f      	lsrs	r7, r7, #21
 800057e:	601f      	str	r7, [r3, #0]
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000580:	27da      	movs	r7, #218	; 0xda
 8000582:	240f      	movs	r4, #15
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8000584:	59ae      	ldr	r6, [r5, r6]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000586:	007f      	lsls	r7, r7, #1
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8000588:	07b6      	lsls	r6, r6, #30
 800058a:	0ff6      	lsrs	r6, r6, #31
 800058c:	60de      	str	r6, [r3, #12]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 800058e:	59ee      	ldr	r6, [r5, r7]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000590:	59ed      	ldr	r5, [r5, r7]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000592:	4026      	ands	r6, r4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000594:	0a2d      	lsrs	r5, r5, #8
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8000596:	010c      	lsls	r4, r1, #4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000598:	b2ed      	uxtb	r5, r5
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 800059a:	1914      	adds	r4, r2, r4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 800059c:	61dd      	str	r5, [r3, #28]
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 800059e:	0025      	movs	r5, r4
 80005a0:	35b9      	adds	r5, #185	; 0xb9
 80005a2:	35ff      	adds	r5, #255	; 0xff
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80005a4:	611e      	str	r6, [r3, #16]
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80005a6:	682e      	ldr	r6, [r5, #0]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80005a8:	34bd      	adds	r4, #189	; 0xbd
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80005aa:	751e      	strb	r6, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80005ac:	682e      	ldr	r6, [r5, #0]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80005ae:	34ff      	adds	r4, #255	; 0xff
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80005b0:	0a36      	lsrs	r6, r6, #8
 80005b2:	755e      	strb	r6, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80005b4:	682e      	ldr	r6, [r5, #0]
  pRxMsg->FIFONumber = FIFONumber;
 80005b6:	6219      	str	r1, [r3, #32]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80005b8:	0c36      	lsrs	r6, r6, #16
 80005ba:	759e      	strb	r6, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80005bc:	682d      	ldr	r5, [r5, #0]
 80005be:	0e2d      	lsrs	r5, r5, #24
 80005c0:	75dd      	strb	r5, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80005c2:	6825      	ldr	r5, [r4, #0]
 80005c4:	761d      	strb	r5, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 80005c6:	6825      	ldr	r5, [r4, #0]
 80005c8:	0a2d      	lsrs	r5, r5, #8
 80005ca:	765d      	strb	r5, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 80005cc:	6825      	ldr	r5, [r4, #0]
 80005ce:	0c2d      	lsrs	r5, r5, #16
 80005d0:	769d      	strb	r5, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 80005d2:	6824      	ldr	r4, [r4, #0]
 80005d4:	0e24      	lsrs	r4, r4, #24
 80005d6:	76dc      	strb	r4, [r3, #27]
 80005d8:	2320      	movs	r3, #32

  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80005da:	2900      	cmp	r1, #0
 80005dc:	d129      	bne.n	8000632 <CAN_Receive_IT+0xd6>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 80005de:	68d4      	ldr	r4, [r2, #12]
 80005e0:	4323      	orrs	r3, r4
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80005e2:	240a      	movs	r4, #10
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 80005e4:	60d3      	str	r3, [r2, #12]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80005e6:	6953      	ldr	r3, [r2, #20]
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80005e8:	43a3      	bics	r3, r4
 80005ea:	6153      	str	r3, [r2, #20]
  }
  
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 80005ec:	0003      	movs	r3, r0
 80005ee:	333d      	adds	r3, #61	; 0x3d
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	2a22      	cmp	r2, #34	; 0x22
 80005f4:	d002      	beq.n	80005fc <CAN_Receive_IT+0xa0>
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	2a32      	cmp	r2, #50	; 0x32
 80005fa:	d104      	bne.n	8000606 <CAN_Receive_IT+0xaa>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80005fc:	6804      	ldr	r4, [r0, #0]
 80005fe:	4d19      	ldr	r5, [pc, #100]	; (8000664 <CAN_Receive_IT+0x108>)
 8000600:	6962      	ldr	r2, [r4, #20]
 8000602:	402a      	ands	r2, r5
 8000604:	6162      	str	r2, [r4, #20]
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	b2d2      	uxtb	r2, r2
  if (FIFONumber == CAN_FIFO0)
 800060a:	2900      	cmp	r1, #0
 800060c:	d11b      	bne.n	8000646 <CAN_Receive_IT+0xea>
    switch(hcan->State)
 800060e:	2a62      	cmp	r2, #98	; 0x62
 8000610:	d015      	beq.n	800063e <CAN_Receive_IT+0xe2>
 8000612:	2a72      	cmp	r2, #114	; 0x72
 8000614:	d015      	beq.n	8000642 <CAN_Receive_IT+0xe6>
 8000616:	2a42      	cmp	r2, #66	; 0x42
 8000618:	d121      	bne.n	800065e <CAN_Receive_IT+0x102>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800061a:	3a30      	subs	r2, #48	; 0x30
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 800061c:	701a      	strb	r2, [r3, #0]
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 800061e:	f000 fe25 	bl	800126c <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8000622:	2000      	movs	r0, #0
 8000624:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pRxMsg = hcan->pRx1Msg;
 8000626:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000628:	e79c      	b.n	8000564 <CAN_Receive_IT+0x8>
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 800062a:	59af      	ldr	r7, [r5, r6]
 800062c:	08ff      	lsrs	r7, r7, #3
 800062e:	605f      	str	r7, [r3, #4]
 8000630:	e7a6      	b.n	8000580 <CAN_Receive_IT+0x24>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000632:	6914      	ldr	r4, [r2, #16]
 8000634:	4323      	orrs	r3, r4
 8000636:	6113      	str	r3, [r2, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000638:	6953      	ldr	r3, [r2, #20]
 800063a:	2450      	movs	r4, #80	; 0x50
 800063c:	e7d4      	b.n	80005e8 <CAN_Receive_IT+0x8c>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800063e:	2232      	movs	r2, #50	; 0x32
 8000640:	e7ec      	b.n	800061c <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000642:	2252      	movs	r2, #82	; 0x52
 8000644:	e7ea      	b.n	800061c <CAN_Receive_IT+0xc0>
    switch(hcan->State)
 8000646:	2a62      	cmp	r2, #98	; 0x62
 8000648:	d005      	beq.n	8000656 <CAN_Receive_IT+0xfa>
 800064a:	2a72      	cmp	r2, #114	; 0x72
 800064c:	d005      	beq.n	800065a <CAN_Receive_IT+0xfe>
 800064e:	2a52      	cmp	r2, #82	; 0x52
 8000650:	d105      	bne.n	800065e <CAN_Receive_IT+0x102>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000652:	3a40      	subs	r2, #64	; 0x40
 8000654:	e7e2      	b.n	800061c <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000656:	2222      	movs	r2, #34	; 0x22
 8000658:	e7e0      	b.n	800061c <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800065a:	2242      	movs	r2, #66	; 0x42
 800065c:	e7de      	b.n	800061c <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_READY;
 800065e:	2201      	movs	r2, #1
 8000660:	e7dc      	b.n	800061c <CAN_Receive_IT+0xc0>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	ffff70ff 	.word	0xffff70ff

08000668 <HAL_CAN_ErrorCallback>:
}
 8000668:	4770      	bx	lr
	...

0800066c <HAL_CAN_IRQHandler>:
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 800066c:	2210      	movs	r2, #16
 800066e:	6803      	ldr	r3, [r0, #0]
{
 8000670:	b570      	push	{r4, r5, r6, lr}
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000672:	68d9      	ldr	r1, [r3, #12]
{
 8000674:	0004      	movs	r4, r0
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000676:	2500      	movs	r5, #0
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000678:	4211      	tst	r1, r2
 800067a:	d005      	beq.n	8000688 <HAL_CAN_IRQHandler+0x1c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
 800067c:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 800067e:	0709      	lsls	r1, r1, #28
 8000680:	d502      	bpl.n	8000688 <HAL_CAN_IRQHandler+0x1c>
    errorcode |= HAL_CAN_ERROR_FOV0;
 8000682:	2580      	movs	r5, #128	; 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000684:	60da      	str	r2, [r3, #12]
    errorcode |= HAL_CAN_ERROR_FOV0;
 8000686:	00ad      	lsls	r5, r5, #2
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8000688:	2210      	movs	r2, #16
 800068a:	6919      	ldr	r1, [r3, #16]
 800068c:	4211      	tst	r1, r2
 800068e:	d006      	beq.n	800069e <HAL_CAN_IRQHandler+0x32>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
 8000690:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8000692:	0649      	lsls	r1, r1, #25
 8000694:	d503      	bpl.n	800069e <HAL_CAN_IRQHandler+0x32>
    errorcode |= HAL_CAN_ERROR_FOV1;
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	00c9      	lsls	r1, r1, #3
 800069a:	430d      	orrs	r5, r1
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800069c:	611a      	str	r2, [r3, #16]
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	07d2      	lsls	r2, r2, #31
 80006a2:	d53a      	bpl.n	800071a <HAL_CAN_IRQHandler+0xae>
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	4964      	ldr	r1, [pc, #400]	; (8000838 <HAL_CAN_IRQHandler+0x1cc>)
 80006a8:	400a      	ands	r2, r1
 80006aa:	428a      	cmp	r2, r1
 80006ac:	d009      	beq.n	80006c2 <HAL_CAN_IRQHandler+0x56>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	4962      	ldr	r1, [pc, #392]	; (800083c <HAL_CAN_IRQHandler+0x1d0>)
 80006b2:	400a      	ands	r2, r1
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80006b4:	428a      	cmp	r2, r1
 80006b6:	d004      	beq.n	80006c2 <HAL_CAN_IRQHandler+0x56>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	4961      	ldr	r1, [pc, #388]	; (8000840 <HAL_CAN_IRQHandler+0x1d4>)
 80006bc:	400a      	ands	r2, r1
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80006be:	428a      	cmp	r2, r1
 80006c0:	d12b      	bne.n	800071a <HAL_CAN_IRQHandler+0xae>
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	0792      	lsls	r2, r2, #30
 80006c6:	d406      	bmi.n	80006d6 <HAL_CAN_IRQHandler+0x6a>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 80006c8:	689a      	ldr	r2, [r3, #8]
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 80006ca:	0592      	lsls	r2, r2, #22
 80006cc:	d403      	bmi.n	80006d6 <HAL_CAN_IRQHandler+0x6a>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
 80006ce:	689a      	ldr	r2, [r3, #8]
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 80006d0:	0392      	lsls	r2, r2, #14
 80006d2:	d400      	bmi.n	80006d6 <HAL_CAN_IRQHandler+0x6a>
 80006d4:	e092      	b.n	80007fc <HAL_CAN_IRQHandler+0x190>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 80006d6:	2101      	movs	r1, #1
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	438a      	bics	r2, r1
 80006dc:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 80006de:	0022      	movs	r2, r4
 80006e0:	323d      	adds	r2, #61	; 0x3d
 80006e2:	7811      	ldrb	r1, [r2, #0]
 80006e4:	2912      	cmp	r1, #18
 80006e6:	d103      	bne.n	80006f0 <HAL_CAN_IRQHandler+0x84>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80006e8:	6959      	ldr	r1, [r3, #20]
 80006ea:	4856      	ldr	r0, [pc, #344]	; (8000844 <HAL_CAN_IRQHandler+0x1d8>)
 80006ec:	4001      	ands	r1, r0
 80006ee:	6159      	str	r1, [r3, #20]
  switch(hcan->State)
 80006f0:	7813      	ldrb	r3, [r2, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b52      	cmp	r3, #82	; 0x52
 80006f6:	d100      	bne.n	80006fa <HAL_CAN_IRQHandler+0x8e>
 80006f8:	e07a      	b.n	80007f0 <HAL_CAN_IRQHandler+0x184>
 80006fa:	2b72      	cmp	r3, #114	; 0x72
 80006fc:	d100      	bne.n	8000700 <HAL_CAN_IRQHandler+0x94>
 80006fe:	e079      	b.n	80007f4 <HAL_CAN_IRQHandler+0x188>
 8000700:	2b42      	cmp	r3, #66	; 0x42
 8000702:	d000      	beq.n	8000706 <HAL_CAN_IRQHandler+0x9a>
 8000704:	e078      	b.n	80007f8 <HAL_CAN_IRQHandler+0x18c>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000706:	3b20      	subs	r3, #32
      hcan->State = HAL_CAN_STATE_READY;
 8000708:	7013      	strb	r3, [r2, #0]
  HAL_CAN_TxCpltCallback(hcan);
 800070a:	0020      	movs	r0, r4
 800070c:	f7ff ff24 	bl	8000558 <HAL_CAN_TxCpltCallback>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8000710:	6822      	ldr	r2, [r4, #0]
 8000712:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <HAL_CAN_IRQHandler+0x1dc>)
 8000714:	6891      	ldr	r1, [r2, #8]
 8000716:	430b      	orrs	r3, r1
 8000718:	6093      	str	r3, [r2, #8]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800071a:	6823      	ldr	r3, [r4, #0]
 800071c:	695a      	ldr	r2, [r3, #20]
 800071e:	0792      	lsls	r2, r2, #30
 8000720:	d506      	bpl.n	8000730 <HAL_CAN_IRQHandler+0xc4>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
 8000722:	68db      	ldr	r3, [r3, #12]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000724:	079b      	lsls	r3, r3, #30
 8000726:	d003      	beq.n	8000730 <HAL_CAN_IRQHandler+0xc4>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000728:	2100      	movs	r1, #0
 800072a:	0020      	movs	r0, r4
 800072c:	f7ff ff16 	bl	800055c <CAN_Receive_IT>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000730:	6823      	ldr	r3, [r4, #0]
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	06d2      	lsls	r2, r2, #27
 8000736:	d506      	bpl.n	8000746 <HAL_CAN_IRQHandler+0xda>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
 8000738:	691b      	ldr	r3, [r3, #16]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800073a:	079b      	lsls	r3, r3, #30
 800073c:	d003      	beq.n	8000746 <HAL_CAN_IRQHandler+0xda>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 800073e:	2101      	movs	r1, #1
 8000740:	0020      	movs	r0, r4
 8000742:	f7ff ff0b 	bl	800055c <CAN_Receive_IT>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000746:	2201      	movs	r2, #1
  hcan->ErrorCode |= errorcode;
 8000748:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800074a:	431d      	orrs	r5, r3
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800074c:	6823      	ldr	r3, [r4, #0]
  hcan->ErrorCode |= errorcode;
 800074e:	6425      	str	r5, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000750:	6999      	ldr	r1, [r3, #24]
 8000752:	4211      	tst	r1, r2
 8000754:	d008      	beq.n	8000768 <HAL_CAN_IRQHandler+0xfc>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000756:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000758:	05c9      	lsls	r1, r1, #23
 800075a:	d505      	bpl.n	8000768 <HAL_CAN_IRQHandler+0xfc>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800075c:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800075e:	0409      	lsls	r1, r1, #16
 8000760:	d502      	bpl.n	8000768 <HAL_CAN_IRQHandler+0xfc>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000762:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000764:	430a      	orrs	r2, r1
 8000766:	6422      	str	r2, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000768:	2202      	movs	r2, #2
 800076a:	6999      	ldr	r1, [r3, #24]
 800076c:	4211      	tst	r1, r2
 800076e:	d008      	beq.n	8000782 <HAL_CAN_IRQHandler+0x116>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000770:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000772:	0589      	lsls	r1, r1, #22
 8000774:	d505      	bpl.n	8000782 <HAL_CAN_IRQHandler+0x116>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000776:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000778:	0409      	lsls	r1, r1, #16
 800077a:	d502      	bpl.n	8000782 <HAL_CAN_IRQHandler+0x116>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 800077c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800077e:	430a      	orrs	r2, r1
 8000780:	6422      	str	r2, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000782:	2204      	movs	r2, #4
 8000784:	6999      	ldr	r1, [r3, #24]
 8000786:	4211      	tst	r1, r2
 8000788:	d008      	beq.n	800079c <HAL_CAN_IRQHandler+0x130>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800078a:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 800078c:	0549      	lsls	r1, r1, #21
 800078e:	d505      	bpl.n	800079c <HAL_CAN_IRQHandler+0x130>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000790:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000792:	0409      	lsls	r1, r1, #16
 8000794:	d502      	bpl.n	800079c <HAL_CAN_IRQHandler+0x130>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000796:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000798:	430a      	orrs	r2, r1
 800079a:	6422      	str	r2, [r4, #64]	; 0x40
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 800079c:	2170      	movs	r1, #112	; 0x70
 800079e:	699a      	ldr	r2, [r3, #24]
 80007a0:	420a      	tst	r2, r1
 80007a2:	d012      	beq.n	80007ca <HAL_CAN_IRQHandler+0x15e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 80007a4:	695a      	ldr	r2, [r3, #20]
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80007a6:	0512      	lsls	r2, r2, #20
 80007a8:	d50f      	bpl.n	80007ca <HAL_CAN_IRQHandler+0x15e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80007aa:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 80007ac:	0412      	lsls	r2, r2, #16
 80007ae:	d50c      	bpl.n	80007ca <HAL_CAN_IRQHandler+0x15e>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	400a      	ands	r2, r1
 80007b4:	2a30      	cmp	r2, #48	; 0x30
 80007b6:	d035      	beq.n	8000824 <HAL_CAN_IRQHandler+0x1b8>
 80007b8:	d824      	bhi.n	8000804 <HAL_CAN_IRQHandler+0x198>
 80007ba:	2a10      	cmp	r2, #16
 80007bc:	d02a      	beq.n	8000814 <HAL_CAN_IRQHandler+0x1a8>
 80007be:	2a20      	cmp	r2, #32
 80007c0:	d02d      	beq.n	800081e <HAL_CAN_IRQHandler+0x1b2>
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80007c2:	2170      	movs	r1, #112	; 0x70
 80007c4:	699a      	ldr	r2, [r3, #24]
 80007c6:	438a      	bics	r2, r1
 80007c8:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 80007ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	d00e      	beq.n	80007ee <HAL_CAN_IRQHandler+0x182>
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80007d0:	2204      	movs	r2, #4
 80007d2:	6859      	ldr	r1, [r3, #4]
    HAL_CAN_ErrorCallback(hcan);
 80007d4:	0020      	movs	r0, r4
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80007d6:	430a      	orrs	r2, r1
 80007d8:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 80007da:	0022      	movs	r2, r4
 80007dc:	2101      	movs	r1, #1
 80007de:	323d      	adds	r2, #61	; 0x3d
 80007e0:	7011      	strb	r1, [r2, #0]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80007e2:	695a      	ldr	r2, [r3, #20]
 80007e4:	4919      	ldr	r1, [pc, #100]	; (800084c <HAL_CAN_IRQHandler+0x1e0>)
 80007e6:	400a      	ands	r2, r1
 80007e8:	615a      	str	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 80007ea:	f7ff ff3d 	bl	8000668 <HAL_CAN_ErrorCallback>
}
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80007f0:	2332      	movs	r3, #50	; 0x32
 80007f2:	e789      	b.n	8000708 <HAL_CAN_IRQHandler+0x9c>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80007f4:	2362      	movs	r3, #98	; 0x62
 80007f6:	e787      	b.n	8000708 <HAL_CAN_IRQHandler+0x9c>
      hcan->State = HAL_CAN_STATE_READY;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e785      	b.n	8000708 <HAL_CAN_IRQHandler+0x9c>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	431d      	orrs	r5, r3
 8000802:	e785      	b.n	8000710 <HAL_CAN_IRQHandler+0xa4>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000804:	2a50      	cmp	r2, #80	; 0x50
 8000806:	d010      	beq.n	800082a <HAL_CAN_IRQHandler+0x1be>
 8000808:	2a60      	cmp	r2, #96	; 0x60
 800080a:	d011      	beq.n	8000830 <HAL_CAN_IRQHandler+0x1c4>
 800080c:	2a40      	cmp	r2, #64	; 0x40
 800080e:	d1d8      	bne.n	80007c2 <HAL_CAN_IRQHandler+0x156>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000810:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000812:	e001      	b.n	8000818 <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000814:	2208      	movs	r2, #8
 8000816:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000818:	430a      	orrs	r2, r1
 800081a:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 800081c:	e7d1      	b.n	80007c2 <HAL_CAN_IRQHandler+0x156>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 800081e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000820:	2210      	movs	r2, #16
 8000822:	e7f9      	b.n	8000818 <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000824:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000826:	2220      	movs	r2, #32
 8000828:	e7f6      	b.n	8000818 <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 800082a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	e7f3      	b.n	8000818 <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000834:	0052      	lsls	r2, r2, #1
 8000836:	e7ef      	b.n	8000818 <HAL_CAN_IRQHandler+0x1ac>
 8000838:	04000001 	.word	0x04000001
 800083c:	08000100 	.word	0x08000100
 8000840:	10010000 	.word	0x10010000
 8000844:	ffff70ff 	.word	0xffff70ff
 8000848:	00010519 	.word	0x00010519
 800084c:	ffff70a4 	.word	0xffff70a4

08000850 <HAL_CAN_GetError>:
  return hcan->ErrorCode;
 8000850:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8000852:	4770      	bx	lr

08000854 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000858:	2800      	cmp	r0, #0
 800085a:	da14      	bge.n	8000886 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085c:	230f      	movs	r3, #15
 800085e:	b2c0      	uxtb	r0, r0
 8000860:	4003      	ands	r3, r0
 8000862:	3b08      	subs	r3, #8
 8000864:	4a11      	ldr	r2, [pc, #68]	; (80008ac <HAL_NVIC_SetPriority+0x58>)
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	189b      	adds	r3, r3, r2
 800086c:	2203      	movs	r2, #3
 800086e:	4010      	ands	r0, r2
 8000870:	4090      	lsls	r0, r2
 8000872:	32fc      	adds	r2, #252	; 0xfc
 8000874:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000876:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800087a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087c:	69dc      	ldr	r4, [r3, #28]
 800087e:	43ac      	bics	r4, r5
 8000880:	4321      	orrs	r1, r4
 8000882:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000884:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000886:	2503      	movs	r5, #3
 8000888:	0883      	lsrs	r3, r0, #2
 800088a:	4028      	ands	r0, r5
 800088c:	40a8      	lsls	r0, r5
 800088e:	35fc      	adds	r5, #252	; 0xfc
 8000890:	002e      	movs	r6, r5
 8000892:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_NVIC_SetPriority+0x5c>)
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	189b      	adds	r3, r3, r2
 8000898:	22c0      	movs	r2, #192	; 0xc0
 800089a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800089c:	4029      	ands	r1, r5
 800089e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	589c      	ldr	r4, [r3, r2]
 80008a4:	43b4      	bics	r4, r6
 80008a6:	4321      	orrs	r1, r4
 80008a8:	5099      	str	r1, [r3, r2]
 80008aa:	e7eb      	b.n	8000884 <HAL_NVIC_SetPriority+0x30>
 80008ac:	e000ed00 	.word	0xe000ed00
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008b4:	231f      	movs	r3, #31
 80008b6:	4018      	ands	r0, r3
 80008b8:	3b1e      	subs	r3, #30
 80008ba:	4083      	lsls	r3, r0
 80008bc:	4a01      	ldr	r2, [pc, #4]	; (80008c4 <HAL_NVIC_EnableIRQ+0x10>)
 80008be:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008c0:	4770      	bx	lr
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c8:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <HAL_SYSTICK_Config+0x28>)
 80008ca:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80008cc:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d80d      	bhi.n	80008ee <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d2:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008da:	6a03      	ldr	r3, [r0, #32]
 80008dc:	0609      	lsls	r1, r1, #24
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	430b      	orrs	r3, r1
 80008e4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e8:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ea:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ec:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008ee:	4770      	bx	lr
 80008f0:	00ffffff 	.word	0x00ffffff
 80008f4:	e000e010 	.word	0xe000e010
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80008fe:	680b      	ldr	r3, [r1, #0]
{ 
 8000900:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000902:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000904:	2300      	movs	r3, #0
{ 
 8000906:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000908:	9a02      	ldr	r2, [sp, #8]
 800090a:	40da      	lsrs	r2, r3
 800090c:	d101      	bne.n	8000912 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800090e:	b007      	add	sp, #28
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000912:	2201      	movs	r2, #1
 8000914:	409a      	lsls	r2, r3
 8000916:	9203      	str	r2, [sp, #12]
 8000918:	9903      	ldr	r1, [sp, #12]
 800091a:	9a02      	ldr	r2, [sp, #8]
 800091c:	400a      	ands	r2, r1
 800091e:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000920:	d100      	bne.n	8000924 <HAL_GPIO_Init+0x28>
 8000922:	e088      	b.n	8000a36 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000924:	9a01      	ldr	r2, [sp, #4]
 8000926:	2110      	movs	r1, #16
 8000928:	6852      	ldr	r2, [r2, #4]
 800092a:	0016      	movs	r6, r2
 800092c:	438e      	bics	r6, r1
 800092e:	2e02      	cmp	r6, #2
 8000930:	d10e      	bne.n	8000950 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000932:	2507      	movs	r5, #7
 8000934:	401d      	ands	r5, r3
 8000936:	00ad      	lsls	r5, r5, #2
 8000938:	3901      	subs	r1, #1
 800093a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800093c:	08dc      	lsrs	r4, r3, #3
 800093e:	00a4      	lsls	r4, r4, #2
 8000940:	1904      	adds	r4, r0, r4
 8000942:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000944:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000946:	9901      	ldr	r1, [sp, #4]
 8000948:	6909      	ldr	r1, [r1, #16]
 800094a:	40a9      	lsls	r1, r5
 800094c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800094e:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000950:	2403      	movs	r4, #3
 8000952:	005f      	lsls	r7, r3, #1
 8000954:	40bc      	lsls	r4, r7
 8000956:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000958:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095a:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800095c:	4025      	ands	r5, r4
 800095e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000960:	2503      	movs	r5, #3
 8000962:	4015      	ands	r5, r2
 8000964:	40bd      	lsls	r5, r7
 8000966:	4661      	mov	r1, ip
 8000968:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800096a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800096c:	2e01      	cmp	r6, #1
 800096e:	d80f      	bhi.n	8000990 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000970:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000972:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000974:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000976:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000978:	40bd      	lsls	r5, r7
 800097a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800097c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800097e:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000980:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000982:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000984:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000986:	2101      	movs	r1, #1
 8000988:	400d      	ands	r5, r1
 800098a:	409d      	lsls	r5, r3
 800098c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800098e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000990:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000992:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000994:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000996:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000998:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800099a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800099c:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800099e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80009a0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009a2:	420a      	tst	r2, r1
 80009a4:	d047      	beq.n	8000a36 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2101      	movs	r1, #1
 80009a8:	4c24      	ldr	r4, [pc, #144]	; (8000a3c <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009aa:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ac:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009ae:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b0:	430d      	orrs	r5, r1
 80009b2:	61a5      	str	r5, [r4, #24]
 80009b4:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80009b6:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b8:	400c      	ands	r4, r1
 80009ba:	9405      	str	r4, [sp, #20]
 80009bc:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009be:	240f      	movs	r4, #15
 80009c0:	491f      	ldr	r1, [pc, #124]	; (8000a40 <HAL_GPIO_Init+0x144>)
 80009c2:	00ad      	lsls	r5, r5, #2
 80009c4:	00b6      	lsls	r6, r6, #2
 80009c6:	186d      	adds	r5, r5, r1
 80009c8:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ca:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 80009cc:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ce:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009d0:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d2:	2400      	movs	r4, #0
 80009d4:	4288      	cmp	r0, r1
 80009d6:	d008      	beq.n	80009ea <HAL_GPIO_Init+0xee>
 80009d8:	491a      	ldr	r1, [pc, #104]	; (8000a44 <HAL_GPIO_Init+0x148>)
 80009da:	3401      	adds	r4, #1
 80009dc:	4288      	cmp	r0, r1
 80009de:	d004      	beq.n	80009ea <HAL_GPIO_Init+0xee>
 80009e0:	4919      	ldr	r1, [pc, #100]	; (8000a48 <HAL_GPIO_Init+0x14c>)
 80009e2:	3404      	adds	r4, #4
 80009e4:	4288      	cmp	r0, r1
 80009e6:	d100      	bne.n	80009ea <HAL_GPIO_Init+0xee>
 80009e8:	3c03      	subs	r4, #3
 80009ea:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80009ec:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ee:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80009f0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80009f2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80009f4:	4c15      	ldr	r4, [pc, #84]	; (8000a4c <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80009f6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80009f8:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80009fa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009fc:	03d1      	lsls	r1, r2, #15
 80009fe:	d401      	bmi.n	8000a04 <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a00:	003e      	movs	r6, r7
 8000a02:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000a04:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000a06:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000a08:	9e00      	ldr	r6, [sp, #0]
 8000a0a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a0c:	0391      	lsls	r1, r2, #14
 8000a0e:	d401      	bmi.n	8000a14 <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000a10:	003e      	movs	r6, r7
 8000a12:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000a14:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000a16:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000a18:	9e00      	ldr	r6, [sp, #0]
 8000a1a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a1c:	02d1      	lsls	r1, r2, #11
 8000a1e:	d401      	bmi.n	8000a24 <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a20:	003e      	movs	r6, r7
 8000a22:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000a24:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000a26:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000a28:	9f00      	ldr	r7, [sp, #0]
 8000a2a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a2c:	0292      	lsls	r2, r2, #10
 8000a2e:	d401      	bmi.n	8000a34 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a30:	402e      	ands	r6, r5
 8000a32:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000a34:	60e7      	str	r7, [r4, #12]
    position++;
 8000a36:	3301      	adds	r3, #1
 8000a38:	e766      	b.n	8000908 <HAL_GPIO_Init+0xc>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010000 	.word	0x40010000
 8000a44:	48000400 	.word	0x48000400
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	40010400 	.word	0x40010400

08000a50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a54:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a56:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a58:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000a5a:	e7fc      	b.n	8000a56 <HAL_GPIO_WritePin+0x6>

08000a5c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000a5c:	6943      	ldr	r3, [r0, #20]
 8000a5e:	4059      	eors	r1, r3
 8000a60:	6141      	str	r1, [r0, #20]
}
 8000a62:	4770      	bx	lr

08000a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a66:	6803      	ldr	r3, [r0, #0]
{
 8000a68:	b085      	sub	sp, #20
 8000a6a:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a6c:	07db      	lsls	r3, r3, #31
 8000a6e:	d433      	bmi.n	8000ad8 <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	079b      	lsls	r3, r3, #30
 8000a74:	d500      	bpl.n	8000a78 <HAL_RCC_OscConfig+0x14>
 8000a76:	e08a      	b.n	8000b8e <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	071b      	lsls	r3, r3, #28
 8000a7c:	d500      	bpl.n	8000a80 <HAL_RCC_OscConfig+0x1c>
 8000a7e:	e0ca      	b.n	8000c16 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	075b      	lsls	r3, r3, #29
 8000a84:	d500      	bpl.n	8000a88 <HAL_RCC_OscConfig+0x24>
 8000a86:	e0ed      	b.n	8000c64 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	06db      	lsls	r3, r3, #27
 8000a8c:	d51a      	bpl.n	8000ac4 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a8e:	696a      	ldr	r2, [r5, #20]
 8000a90:	4cbc      	ldr	r4, [pc, #752]	; (8000d84 <HAL_RCC_OscConfig+0x320>)
 8000a92:	2304      	movs	r3, #4
 8000a94:	2a01      	cmp	r2, #1
 8000a96:	d000      	beq.n	8000a9a <HAL_RCC_OscConfig+0x36>
 8000a98:	e159      	b.n	8000d4e <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a9c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fbe4 	bl	8000274 <HAL_GetTick>
 8000aac:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ab0:	4233      	tst	r3, r6
 8000ab2:	d100      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x52>
 8000ab4:	e144      	b.n	8000d40 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ab6:	21f8      	movs	r1, #248	; 0xf8
 8000ab8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000aba:	69ab      	ldr	r3, [r5, #24]
 8000abc:	438a      	bics	r2, r1
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	069b      	lsls	r3, r3, #26
 8000ac8:	d500      	bpl.n	8000acc <HAL_RCC_OscConfig+0x68>
 8000aca:	e167      	b.n	8000d9c <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000acc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d000      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x70>
 8000ad2:	e1a4      	b.n	8000e1e <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e018      	b.n	8000b0a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ad8:	210c      	movs	r1, #12
 8000ada:	4caa      	ldr	r4, [pc, #680]	; (8000d84 <HAL_RCC_OscConfig+0x320>)
 8000adc:	6862      	ldr	r2, [r4, #4]
 8000ade:	400a      	ands	r2, r1
 8000ae0:	2a04      	cmp	r2, #4
 8000ae2:	d00b      	beq.n	8000afc <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ae4:	6863      	ldr	r3, [r4, #4]
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d110      	bne.n	8000b0e <HAL_RCC_OscConfig+0xaa>
 8000aec:	22c0      	movs	r2, #192	; 0xc0
 8000aee:	6863      	ldr	r3, [r4, #4]
 8000af0:	0252      	lsls	r2, r2, #9
 8000af2:	4013      	ands	r3, r2
 8000af4:	2280      	movs	r2, #128	; 0x80
 8000af6:	0252      	lsls	r2, r2, #9
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d108      	bne.n	8000b0e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	039b      	lsls	r3, r3, #14
 8000b00:	d5b6      	bpl.n	8000a70 <HAL_RCC_OscConfig+0xc>
 8000b02:	686b      	ldr	r3, [r5, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1b3      	bne.n	8000a70 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b08:	2001      	movs	r0, #1
}
 8000b0a:	b005      	add	sp, #20
 8000b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0e:	686b      	ldr	r3, [r5, #4]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d113      	bne.n	8000b3c <HAL_RCC_OscConfig+0xd8>
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b1e:	f7ff fba9 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b22:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b24:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b26:	02b6      	lsls	r6, r6, #10
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	4233      	tst	r3, r6
 8000b2c:	d1a0      	bne.n	8000a70 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fba1 	bl	8000274 <HAL_GetTick>
 8000b32:	1bc0      	subs	r0, r0, r7
 8000b34:	2864      	cmp	r0, #100	; 0x64
 8000b36:	d9f7      	bls.n	8000b28 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8000b38:	2003      	movs	r0, #3
 8000b3a:	e7e6      	b.n	8000b0a <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d116      	bne.n	8000b6e <HAL_RCC_OscConfig+0x10a>
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	4a91      	ldr	r2, [pc, #580]	; (8000d88 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b44:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b46:	4013      	ands	r3, r2
 8000b48:	6023      	str	r3, [r4, #0]
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	4a8f      	ldr	r2, [pc, #572]	; (8000d8c <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b4e:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b50:	4013      	ands	r3, r2
 8000b52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b54:	f7ff fb8e 	bl	8000274 <HAL_GetTick>
 8000b58:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	4233      	tst	r3, r6
 8000b5e:	d100      	bne.n	8000b62 <HAL_RCC_OscConfig+0xfe>
 8000b60:	e786      	b.n	8000a70 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b62:	f7ff fb87 	bl	8000274 <HAL_GetTick>
 8000b66:	1bc0      	subs	r0, r0, r7
 8000b68:	2864      	cmp	r0, #100	; 0x64
 8000b6a:	d9f6      	bls.n	8000b5a <HAL_RCC_OscConfig+0xf6>
 8000b6c:	e7e4      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6e:	2b05      	cmp	r3, #5
 8000b70:	d105      	bne.n	8000b7e <HAL_RCC_OscConfig+0x11a>
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	6822      	ldr	r2, [r4, #0]
 8000b76:	02db      	lsls	r3, r3, #11
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	6023      	str	r3, [r4, #0]
 8000b7c:	e7ca      	b.n	8000b14 <HAL_RCC_OscConfig+0xb0>
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	4a81      	ldr	r2, [pc, #516]	; (8000d88 <HAL_RCC_OscConfig+0x324>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	4a80      	ldr	r2, [pc, #512]	; (8000d8c <HAL_RCC_OscConfig+0x328>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	e7c6      	b.n	8000b1c <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b8e:	220c      	movs	r2, #12
 8000b90:	4c7c      	ldr	r4, [pc, #496]	; (8000d84 <HAL_RCC_OscConfig+0x320>)
 8000b92:	6863      	ldr	r3, [r4, #4]
 8000b94:	4213      	tst	r3, r2
 8000b96:	d00b      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b98:	6863      	ldr	r3, [r4, #4]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d115      	bne.n	8000bcc <HAL_RCC_OscConfig+0x168>
 8000ba0:	22c0      	movs	r2, #192	; 0xc0
 8000ba2:	6863      	ldr	r3, [r4, #4]
 8000ba4:	0252      	lsls	r2, r2, #9
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	0212      	lsls	r2, r2, #8
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d10d      	bne.n	8000bcc <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	079b      	lsls	r3, r3, #30
 8000bb4:	d502      	bpl.n	8000bbc <HAL_RCC_OscConfig+0x158>
 8000bb6:	68eb      	ldr	r3, [r5, #12]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d1a5      	bne.n	8000b08 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bbc:	21f8      	movs	r1, #248	; 0xf8
 8000bbe:	6822      	ldr	r2, [r4, #0]
 8000bc0:	692b      	ldr	r3, [r5, #16]
 8000bc2:	438a      	bics	r2, r1
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	6023      	str	r3, [r4, #0]
 8000bca:	e755      	b.n	8000a78 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bcc:	68ea      	ldr	r2, [r5, #12]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d00f      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000bd4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fb4a 	bl	8000274 <HAL_GetTick>
 8000be0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	4233      	tst	r3, r6
 8000be6:	d1e9      	bne.n	8000bbc <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000be8:	f7ff fb44 	bl	8000274 <HAL_GetTick>
 8000bec:	1bc0      	subs	r0, r0, r7
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d9f7      	bls.n	8000be2 <HAL_RCC_OscConfig+0x17e>
 8000bf2:	e7a1      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 8000bf4:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000bf8:	439a      	bics	r2, r3
 8000bfa:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fb3a 	bl	8000274 <HAL_GetTick>
 8000c00:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	4233      	tst	r3, r6
 8000c06:	d100      	bne.n	8000c0a <HAL_RCC_OscConfig+0x1a6>
 8000c08:	e736      	b.n	8000a78 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fb33 	bl	8000274 <HAL_GetTick>
 8000c0e:	1bc0      	subs	r0, r0, r7
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9f6      	bls.n	8000c02 <HAL_RCC_OscConfig+0x19e>
 8000c14:	e790      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c16:	69ea      	ldr	r2, [r5, #28]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	4c5a      	ldr	r4, [pc, #360]	; (8000d84 <HAL_RCC_OscConfig+0x320>)
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d010      	beq.n	8000c42 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 8000c20:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c22:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000c24:	4313      	orrs	r3, r2
 8000c26:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c28:	f7ff fb24 	bl	8000274 <HAL_GetTick>
 8000c2c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c30:	4233      	tst	r3, r6
 8000c32:	d000      	beq.n	8000c36 <HAL_RCC_OscConfig+0x1d2>
 8000c34:	e724      	b.n	8000a80 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c36:	f7ff fb1d 	bl	8000274 <HAL_GetTick>
 8000c3a:	1bc0      	subs	r0, r0, r7
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d9f6      	bls.n	8000c2e <HAL_RCC_OscConfig+0x1ca>
 8000c40:	e77a      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 8000c42:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c44:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000c46:	439a      	bics	r2, r3
 8000c48:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c4a:	f7ff fb13 	bl	8000274 <HAL_GetTick>
 8000c4e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c52:	4233      	tst	r3, r6
 8000c54:	d100      	bne.n	8000c58 <HAL_RCC_OscConfig+0x1f4>
 8000c56:	e713      	b.n	8000a80 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c58:	f7ff fb0c 	bl	8000274 <HAL_GetTick>
 8000c5c:	1bc0      	subs	r0, r0, r7
 8000c5e:	2802      	cmp	r0, #2
 8000c60:	d9f6      	bls.n	8000c50 <HAL_RCC_OscConfig+0x1ec>
 8000c62:	e769      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c64:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c66:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c68:	4c46      	ldr	r4, [pc, #280]	; (8000d84 <HAL_RCC_OscConfig+0x320>)
 8000c6a:	0552      	lsls	r2, r2, #21
 8000c6c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c6e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c70:	4213      	tst	r3, r2
 8000c72:	d108      	bne.n	8000c86 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c74:	69e3      	ldr	r3, [r4, #28]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61e3      	str	r3, [r4, #28]
 8000c7a:	69e3      	ldr	r3, [r4, #28]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	9303      	str	r3, [sp, #12]
 8000c80:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000c82:	2301      	movs	r3, #1
 8000c84:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c86:	2780      	movs	r7, #128	; 0x80
 8000c88:	4e41      	ldr	r6, [pc, #260]	; (8000d90 <HAL_RCC_OscConfig+0x32c>)
 8000c8a:	007f      	lsls	r7, r7, #1
 8000c8c:	6833      	ldr	r3, [r6, #0]
 8000c8e:	423b      	tst	r3, r7
 8000c90:	d006      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c92:	68ab      	ldr	r3, [r5, #8]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d113      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x25c>
 8000c98:	6a22      	ldr	r2, [r4, #32]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	6223      	str	r3, [r4, #32]
 8000c9e:	e030      	b.n	8000d02 <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ca0:	6833      	ldr	r3, [r6, #0]
 8000ca2:	433b      	orrs	r3, r7
 8000ca4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fae5 	bl	8000274 <HAL_GetTick>
 8000caa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cac:	6833      	ldr	r3, [r6, #0]
 8000cae:	423b      	tst	r3, r7
 8000cb0:	d1ef      	bne.n	8000c92 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cb2:	f7ff fadf 	bl	8000274 <HAL_GetTick>
 8000cb6:	9b01      	ldr	r3, [sp, #4]
 8000cb8:	1ac0      	subs	r0, r0, r3
 8000cba:	2864      	cmp	r0, #100	; 0x64
 8000cbc:	d9f6      	bls.n	8000cac <HAL_RCC_OscConfig+0x248>
 8000cbe:	e73b      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
 8000cc0:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d114      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x28c>
 8000cc6:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc8:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cca:	4393      	bics	r3, r2
 8000ccc:	6223      	str	r3, [r4, #32]
 8000cce:	6a23      	ldr	r3, [r4, #32]
 8000cd0:	3203      	adds	r2, #3
 8000cd2:	4393      	bics	r3, r2
 8000cd4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cd6:	f7ff facd 	bl	8000274 <HAL_GetTick>
 8000cda:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cdc:	6a23      	ldr	r3, [r4, #32]
 8000cde:	423b      	tst	r3, r7
 8000ce0:	d025      	beq.n	8000d2e <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ce2:	f7ff fac7 	bl	8000274 <HAL_GetTick>
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <HAL_RCC_OscConfig+0x330>)
 8000ce8:	1b80      	subs	r0, r0, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d9f6      	bls.n	8000cdc <HAL_RCC_OscConfig+0x278>
 8000cee:	e723      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cf0:	2b05      	cmp	r3, #5
 8000cf2:	d10b      	bne.n	8000d0c <HAL_RCC_OscConfig+0x2a8>
 8000cf4:	6a21      	ldr	r1, [r4, #32]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	430b      	orrs	r3, r1
 8000cfa:	6223      	str	r3, [r4, #32]
 8000cfc:	6a23      	ldr	r3, [r4, #32]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000d02:	f7ff fab7 	bl	8000274 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d06:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000d08:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d0a:	e00d      	b.n	8000d28 <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d0c:	6a23      	ldr	r3, [r4, #32]
 8000d0e:	4393      	bics	r3, r2
 8000d10:	2204      	movs	r2, #4
 8000d12:	6223      	str	r3, [r4, #32]
 8000d14:	6a23      	ldr	r3, [r4, #32]
 8000d16:	4393      	bics	r3, r2
 8000d18:	e7c0      	b.n	8000c9c <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d1a:	f7ff faab 	bl	8000274 <HAL_GetTick>
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_RCC_OscConfig+0x330>)
 8000d20:	1b80      	subs	r0, r0, r6
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d900      	bls.n	8000d28 <HAL_RCC_OscConfig+0x2c4>
 8000d26:	e707      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d28:	6a23      	ldr	r3, [r4, #32]
 8000d2a:	423b      	tst	r3, r7
 8000d2c:	d0f5      	beq.n	8000d1a <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 8000d2e:	9b00      	ldr	r3, [sp, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d000      	beq.n	8000d36 <HAL_RCC_OscConfig+0x2d2>
 8000d34:	e6a8      	b.n	8000a88 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d36:	69e3      	ldr	r3, [r4, #28]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_RCC_OscConfig+0x334>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61e3      	str	r3, [r4, #28]
 8000d3e:	e6a3      	b.n	8000a88 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d40:	f7ff fa98 	bl	8000274 <HAL_GetTick>
 8000d44:	1bc0      	subs	r0, r0, r7
 8000d46:	2802      	cmp	r0, #2
 8000d48:	d800      	bhi.n	8000d4c <HAL_RCC_OscConfig+0x2e8>
 8000d4a:	e6b0      	b.n	8000aae <HAL_RCC_OscConfig+0x4a>
 8000d4c:	e6f4      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d4e:	3205      	adds	r2, #5
 8000d50:	d103      	bne.n	8000d5a <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d54:	439a      	bics	r2, r3
 8000d56:	6362      	str	r2, [r4, #52]	; 0x34
 8000d58:	e6ad      	b.n	8000ab6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d5c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d5e:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000d60:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d62:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d66:	4393      	bics	r3, r2
 8000d68:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d6a:	f7ff fa83 	bl	8000274 <HAL_GetTick>
 8000d6e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d72:	4233      	tst	r3, r6
 8000d74:	d100      	bne.n	8000d78 <HAL_RCC_OscConfig+0x314>
 8000d76:	e6a5      	b.n	8000ac4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d78:	f7ff fa7c 	bl	8000274 <HAL_GetTick>
 8000d7c:	1bc0      	subs	r0, r0, r7
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9f6      	bls.n	8000d70 <HAL_RCC_OscConfig+0x30c>
 8000d82:	e6d9      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
 8000d84:	40021000 	.word	0x40021000
 8000d88:	fffeffff 	.word	0xfffeffff
 8000d8c:	fffbffff 	.word	0xfffbffff
 8000d90:	40007000 	.word	0x40007000
 8000d94:	00001388 	.word	0x00001388
 8000d98:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000d9c:	210c      	movs	r1, #12
 8000d9e:	4c46      	ldr	r4, [pc, #280]	; (8000eb8 <HAL_RCC_OscConfig+0x454>)
 8000da0:	6862      	ldr	r2, [r4, #4]
 8000da2:	400a      	ands	r2, r1
 8000da4:	428a      	cmp	r2, r1
 8000da6:	d009      	beq.n	8000dbc <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000da8:	6863      	ldr	r3, [r4, #4]
 8000daa:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d10e      	bne.n	8000dce <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000db0:	22c0      	movs	r2, #192	; 0xc0
 8000db2:	6863      	ldr	r3, [r4, #4]
 8000db4:	0252      	lsls	r2, r2, #9
 8000db6:	4013      	ands	r3, r2
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d108      	bne.n	8000dce <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dbe:	03db      	lsls	r3, r3, #15
 8000dc0:	d400      	bmi.n	8000dc4 <HAL_RCC_OscConfig+0x360>
 8000dc2:	e683      	b.n	8000acc <HAL_RCC_OscConfig+0x68>
 8000dc4:	6a2b      	ldr	r3, [r5, #32]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d000      	beq.n	8000dcc <HAL_RCC_OscConfig+0x368>
 8000dca:	e69d      	b.n	8000b08 <HAL_RCC_OscConfig+0xa4>
 8000dcc:	e67e      	b.n	8000acc <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000dce:	6a2b      	ldr	r3, [r5, #32]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d011      	beq.n	8000df8 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 8000dd4:	2680      	movs	r6, #128	; 0x80
 8000dd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dd8:	0276      	lsls	r6, r6, #9
 8000dda:	4333      	orrs	r3, r6
 8000ddc:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000dde:	f7ff fa49 	bl	8000274 <HAL_GetTick>
 8000de2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000de6:	4233      	tst	r3, r6
 8000de8:	d000      	beq.n	8000dec <HAL_RCC_OscConfig+0x388>
 8000dea:	e66f      	b.n	8000acc <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000dec:	f7ff fa42 	bl	8000274 <HAL_GetTick>
 8000df0:	1bc0      	subs	r0, r0, r7
 8000df2:	2802      	cmp	r0, #2
 8000df4:	d9f6      	bls.n	8000de4 <HAL_RCC_OscConfig+0x380>
 8000df6:	e69f      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 8000df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000dfc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000dfe:	4013      	ands	r3, r2
 8000e00:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000e02:	f7ff fa37 	bl	8000274 <HAL_GetTick>
 8000e06:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000e08:	0276      	lsls	r6, r6, #9
 8000e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e0c:	4233      	tst	r3, r6
 8000e0e:	d100      	bne.n	8000e12 <HAL_RCC_OscConfig+0x3ae>
 8000e10:	e65c      	b.n	8000acc <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e12:	f7ff fa2f 	bl	8000274 <HAL_GetTick>
 8000e16:	1bc0      	subs	r0, r0, r7
 8000e18:	2802      	cmp	r0, #2
 8000e1a:	d9f6      	bls.n	8000e0a <HAL_RCC_OscConfig+0x3a6>
 8000e1c:	e68c      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	4c25      	ldr	r4, [pc, #148]	; (8000eb8 <HAL_RCC_OscConfig+0x454>)
 8000e22:	6863      	ldr	r3, [r4, #4]
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d100      	bne.n	8000e2c <HAL_RCC_OscConfig+0x3c8>
 8000e2a:	e66d      	b.n	8000b08 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <HAL_RCC_OscConfig+0x45c>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e34:	2902      	cmp	r1, #2
 8000e36:	d12f      	bne.n	8000e98 <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 8000e38:	f7ff fa1c 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e3c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e3e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e40:	04b6      	lsls	r6, r6, #18
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	4233      	tst	r3, r6
 8000e46:	d121      	bne.n	8000e8c <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e48:	220f      	movs	r2, #15
 8000e4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e4c:	4393      	bics	r3, r2
 8000e4e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e50:	4313      	orrs	r3, r2
 8000e52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e54:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000e56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e58:	6862      	ldr	r2, [r4, #4]
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	4919      	ldr	r1, [pc, #100]	; (8000ec4 <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e5e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e60:	400a      	ands	r2, r1
 8000e62:	4313      	orrs	r3, r2
 8000e64:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	045b      	lsls	r3, r3, #17
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e70:	f7ff fa00 	bl	8000274 <HAL_GetTick>
 8000e74:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e76:	04ad      	lsls	r5, r5, #18
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	422b      	tst	r3, r5
 8000e7c:	d000      	beq.n	8000e80 <HAL_RCC_OscConfig+0x41c>
 8000e7e:	e629      	b.n	8000ad4 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e80:	f7ff f9f8 	bl	8000274 <HAL_GetTick>
 8000e84:	1b80      	subs	r0, r0, r6
 8000e86:	2802      	cmp	r0, #2
 8000e88:	d9f6      	bls.n	8000e78 <HAL_RCC_OscConfig+0x414>
 8000e8a:	e655      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8c:	f7ff f9f2 	bl	8000274 <HAL_GetTick>
 8000e90:	1bc0      	subs	r0, r0, r7
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9d5      	bls.n	8000e42 <HAL_RCC_OscConfig+0x3de>
 8000e96:	e64f      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000e98:	f7ff f9ec 	bl	8000274 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e9c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e9e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea0:	04ad      	lsls	r5, r5, #18
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	422b      	tst	r3, r5
 8000ea6:	d100      	bne.n	8000eaa <HAL_RCC_OscConfig+0x446>
 8000ea8:	e614      	b.n	8000ad4 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eaa:	f7ff f9e3 	bl	8000274 <HAL_GetTick>
 8000eae:	1b80      	subs	r0, r0, r6
 8000eb0:	2802      	cmp	r0, #2
 8000eb2:	d9f6      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x43e>
 8000eb4:	e640      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	fffeffff 	.word	0xfffeffff
 8000ec0:	feffffff 	.word	0xfeffffff
 8000ec4:	ffc27fff 	.word	0xffc27fff

08000ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ec8:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000eca:	4c19      	ldr	r4, [pc, #100]	; (8000f30 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000ecc:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ece:	2210      	movs	r2, #16
 8000ed0:	0021      	movs	r1, r4
 8000ed2:	4668      	mov	r0, sp
 8000ed4:	f000 fb4a 	bl	800156c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000ed8:	0021      	movs	r1, r4
 8000eda:	ad04      	add	r5, sp, #16
 8000edc:	2210      	movs	r2, #16
 8000ede:	3110      	adds	r1, #16
 8000ee0:	0028      	movs	r0, r5
 8000ee2:	f000 fb43 	bl	800156c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ee6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000ee8:	4e12      	ldr	r6, [pc, #72]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000eea:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000eec:	401a      	ands	r2, r3
 8000eee:	2a08      	cmp	r2, #8
 8000ef0:	d004      	beq.n	8000efc <HAL_RCC_GetSysClockFreq+0x34>
 8000ef2:	2a0c      	cmp	r2, #12
 8000ef4:	d11a      	bne.n	8000f2c <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000ef6:	4810      	ldr	r0, [pc, #64]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ef8:	b008      	add	sp, #32
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000efc:	200f      	movs	r0, #15
 8000efe:	466a      	mov	r2, sp
 8000f00:	0c99      	lsrs	r1, r3, #18
 8000f02:	4001      	ands	r1, r0
 8000f04:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f06:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000f08:	4002      	ands	r2, r0
 8000f0a:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000f0c:	22c0      	movs	r2, #192	; 0xc0
 8000f0e:	2080      	movs	r0, #128	; 0x80
 8000f10:	0252      	lsls	r2, r2, #9
 8000f12:	4013      	ands	r3, r2
 8000f14:	0240      	lsls	r0, r0, #9
 8000f16:	4283      	cmp	r3, r0
 8000f18:	d101      	bne.n	8000f1e <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x74>)
 8000f1c:	e002      	b.n	8000f24 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d1fb      	bne.n	8000f1a <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000f24:	f7ff f8f0 	bl	8000108 <__udivsi3>
 8000f28:	4360      	muls	r0, r4
 8000f2a:	e7e5      	b.n	8000ef8 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000f2e:	e7e3      	b.n	8000ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8000f30:	080015a8 	.word	0x080015a8
 8000f34:	40021000 	.word	0x40021000
 8000f38:	02dc6c00 	.word	0x02dc6c00
 8000f3c:	007a1200 	.word	0x007a1200

08000f40 <HAL_RCC_ClockConfig>:
{
 8000f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f42:	2201      	movs	r2, #1
 8000f44:	4c4f      	ldr	r4, [pc, #316]	; (8001084 <HAL_RCC_ClockConfig+0x144>)
{
 8000f46:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f48:	6823      	ldr	r3, [r4, #0]
{
 8000f4a:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d31f      	bcc.n	8000f92 <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f52:	6832      	ldr	r2, [r6, #0]
 8000f54:	0793      	lsls	r3, r2, #30
 8000f56:	d428      	bmi.n	8000faa <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f58:	07d3      	lsls	r3, r2, #31
 8000f5a:	d42e      	bmi.n	8000fba <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	9901      	ldr	r1, [sp, #4]
 8000f62:	401a      	ands	r2, r3
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d200      	bcs.n	8000f6a <HAL_RCC_ClockConfig+0x2a>
 8000f68:	e07e      	b.n	8001068 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f6a:	6833      	ldr	r3, [r6, #0]
 8000f6c:	4c46      	ldr	r4, [pc, #280]	; (8001088 <HAL_RCC_ClockConfig+0x148>)
 8000f6e:	075b      	lsls	r3, r3, #29
 8000f70:	d500      	bpl.n	8000f74 <HAL_RCC_ClockConfig+0x34>
 8000f72:	e080      	b.n	8001076 <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f74:	f7ff ffa8 	bl	8000ec8 <HAL_RCC_GetSysClockFreq>
 8000f78:	6863      	ldr	r3, [r4, #4]
 8000f7a:	4a44      	ldr	r2, [pc, #272]	; (800108c <HAL_RCC_ClockConfig+0x14c>)
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	0f1b      	lsrs	r3, r3, #28
 8000f80:	5cd3      	ldrb	r3, [r2, r3]
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	4b42      	ldr	r3, [pc, #264]	; (8001090 <HAL_RCC_ClockConfig+0x150>)
 8000f86:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff f949 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 8000f8e:	2000      	movs	r0, #0
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	9901      	ldr	r1, [sp, #4]
 8000f96:	4393      	bics	r3, r2
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	9a01      	ldr	r2, [sp, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d0d5      	beq.n	8000f52 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
}
 8000fa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000faa:	20f0      	movs	r0, #240	; 0xf0
 8000fac:	4936      	ldr	r1, [pc, #216]	; (8001088 <HAL_RCC_ClockConfig+0x148>)
 8000fae:	684b      	ldr	r3, [r1, #4]
 8000fb0:	4383      	bics	r3, r0
 8000fb2:	68b0      	ldr	r0, [r6, #8]
 8000fb4:	4303      	orrs	r3, r0
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e7ce      	b.n	8000f58 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fba:	6872      	ldr	r2, [r6, #4]
 8000fbc:	4d32      	ldr	r5, [pc, #200]	; (8001088 <HAL_RCC_ClockConfig+0x148>)
 8000fbe:	2a01      	cmp	r2, #1
 8000fc0:	d11a      	bne.n	8000ff8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	682b      	ldr	r3, [r5, #0]
 8000fc4:	039b      	lsls	r3, r3, #14
 8000fc6:	d5ee      	bpl.n	8000fa6 <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fc8:	2103      	movs	r1, #3
 8000fca:	686b      	ldr	r3, [r5, #4]
 8000fcc:	438b      	bics	r3, r1
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000fd2:	f7ff f94f 	bl	8000274 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fd6:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000fd8:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	686b      	ldr	r3, [r5, #4]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d0b9      	beq.n	8000f5c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe8:	f7ff f944 	bl	8000274 <HAL_GetTick>
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_RCC_ClockConfig+0x154>)
 8000fee:	1bc0      	subs	r0, r0, r7
 8000ff0:	4298      	cmp	r0, r3
 8000ff2:	d9f4      	bls.n	8000fde <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	e7d7      	b.n	8000fa8 <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ff8:	2a02      	cmp	r2, #2
 8000ffa:	d103      	bne.n	8001004 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	019b      	lsls	r3, r3, #6
 8001000:	d4e2      	bmi.n	8000fc8 <HAL_RCC_ClockConfig+0x88>
 8001002:	e7d0      	b.n	8000fa6 <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001004:	2a03      	cmp	r2, #3
 8001006:	d103      	bne.n	8001010 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001008:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800100a:	03db      	lsls	r3, r3, #15
 800100c:	d4dc      	bmi.n	8000fc8 <HAL_RCC_ClockConfig+0x88>
 800100e:	e7ca      	b.n	8000fa6 <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	079b      	lsls	r3, r3, #30
 8001014:	d4d8      	bmi.n	8000fc8 <HAL_RCC_ClockConfig+0x88>
 8001016:	e7c6      	b.n	8000fa6 <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001018:	2b02      	cmp	r3, #2
 800101a:	d10b      	bne.n	8001034 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800101c:	220c      	movs	r2, #12
 800101e:	686b      	ldr	r3, [r5, #4]
 8001020:	4013      	ands	r3, r2
 8001022:	2b08      	cmp	r3, #8
 8001024:	d09a      	beq.n	8000f5c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001026:	f7ff f925 	bl	8000274 <HAL_GetTick>
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_RCC_ClockConfig+0x154>)
 800102c:	1bc0      	subs	r0, r0, r7
 800102e:	4298      	cmp	r0, r3
 8001030:	d9f4      	bls.n	800101c <HAL_RCC_ClockConfig+0xdc>
 8001032:	e7df      	b.n	8000ff4 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001034:	2b03      	cmp	r3, #3
 8001036:	d011      	beq.n	800105c <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001038:	220c      	movs	r2, #12
 800103a:	686b      	ldr	r3, [r5, #4]
 800103c:	4213      	tst	r3, r2
 800103e:	d100      	bne.n	8001042 <HAL_RCC_ClockConfig+0x102>
 8001040:	e78c      	b.n	8000f5c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001042:	f7ff f917 	bl	8000274 <HAL_GetTick>
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_RCC_ClockConfig+0x154>)
 8001048:	1bc0      	subs	r0, r0, r7
 800104a:	4298      	cmp	r0, r3
 800104c:	d9f4      	bls.n	8001038 <HAL_RCC_ClockConfig+0xf8>
 800104e:	e7d1      	b.n	8000ff4 <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001050:	f7ff f910 	bl	8000274 <HAL_GetTick>
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_RCC_ClockConfig+0x154>)
 8001056:	1bc0      	subs	r0, r0, r7
 8001058:	4298      	cmp	r0, r3
 800105a:	d8cb      	bhi.n	8000ff4 <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800105c:	220c      	movs	r2, #12
 800105e:	686b      	ldr	r3, [r5, #4]
 8001060:	4013      	ands	r3, r2
 8001062:	4293      	cmp	r3, r2
 8001064:	d1f4      	bne.n	8001050 <HAL_RCC_ClockConfig+0x110>
 8001066:	e779      	b.n	8000f5c <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	439a      	bics	r2, r3
 800106c:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800106e:	6822      	ldr	r2, [r4, #0]
 8001070:	421a      	tst	r2, r3
 8001072:	d198      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0x66>
 8001074:	e779      	b.n	8000f6a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001076:	6863      	ldr	r3, [r4, #4]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_RCC_ClockConfig+0x158>)
 800107a:	4013      	ands	r3, r2
 800107c:	68f2      	ldr	r2, [r6, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	6063      	str	r3, [r4, #4]
 8001082:	e777      	b.n	8000f74 <HAL_RCC_ClockConfig+0x34>
 8001084:	40022000 	.word	0x40022000
 8001088:	40021000 	.word	0x40021000
 800108c:	080015c8 	.word	0x080015c8
 8001090:	20000000 	.word	0x20000000
 8001094:	00001388 	.word	0x00001388
 8001098:	fffff8ff 	.word	0xfffff8ff

0800109c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800109c:	4b01      	ldr	r3, [pc, #4]	; (80010a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800109e:	6818      	ldr	r0, [r3, #0]
}
 80010a0:	4770      	bx	lr
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000000 	.word	0x20000000

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
	{
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80010aa:	2580      	movs	r5, #128	; 0x80
 80010ac:	2490      	movs	r4, #144	; 0x90
 80010ae:	022d      	lsls	r5, r5, #8
 80010b0:	05e4      	lsls	r4, r4, #23
 80010b2:	0029      	movs	r1, r5
 80010b4:	0020      	movs	r0, r4
 80010b6:	f7ff fcd1 	bl	8000a5c <HAL_GPIO_TogglePin>
    asm("       mov r0,%0\n"
 80010ba:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <repeat+0x6>)
 80010bc:	1c18      	adds	r0, r3, #0

080010be <repeat>:
 80010be:	380e      	subs	r0, #14
 80010c0:	dcfd      	bgt.n	80010be <repeat>
 80010c2:	e7f6      	b.n	80010b2 <Error_Handler+0xa>
 80010c4:	00989680 	.word	0x00989680

080010c8 <SystemClock_Config>:
{
 80010c8:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ca:	2410      	movs	r4, #16
{
 80010cc:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	2234      	movs	r2, #52	; 0x34
 80010d0:	2100      	movs	r1, #0
 80010d2:	a805      	add	r0, sp, #20
 80010d4:	f000 fa53 	bl	800157e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	2100      	movs	r1, #0
 80010da:	0022      	movs	r2, r4
 80010dc:	a801      	add	r0, sp, #4
 80010de:	f000 fa4e 	bl	800157e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e2:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	3b01      	subs	r3, #1
 80010ea:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ec:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f7ff fcb9 	bl	8000a64 <HAL_RCC_OscConfig>
 80010f2:	1e01      	subs	r1, r0, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x32>
    Error_Handler();
 80010f6:	f7ff ffd7 	bl	80010a8 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010fc:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001100:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001102:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001106:	f7ff ff1b 	bl	8000f40 <HAL_RCC_ClockConfig>
 800110a:	2800      	cmp	r0, #0
 800110c:	d1f3      	bne.n	80010f6 <SystemClock_Config+0x2e>
}
 800110e:	b012      	add	sp, #72	; 0x48
 8001110:	bd10      	pop	{r4, pc}
	...

08001114 <main>:
{
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001118:	f7ff f894 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 800111c:	f7ff ffd4 	bl	80010c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	2214      	movs	r2, #20
 8001122:	2100      	movs	r1, #0
 8001124:	a802      	add	r0, sp, #8
 8001126:	f000 fa2a 	bl	800157e <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2080      	movs	r0, #128	; 0x80
 800112c:	4b47      	ldr	r3, [pc, #284]	; (800124c <main+0x138>)
 800112e:	0280      	lsls	r0, r0, #10
 8001130:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8001132:	4c47      	ldr	r4, [pc, #284]	; (8001250 <main+0x13c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4301      	orrs	r1, r0
 8001136:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8001140:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8001148:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	430a      	orrs	r2, r1
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	400b      	ands	r3, r1
 8001154:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8001156:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 800115a:	f7ff fc79 	bl	8000a50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800115e:	2200      	movs	r2, #0
 8001160:	21f8      	movs	r1, #248	; 0xf8
 8001162:	483c      	ldr	r0, [pc, #240]	; (8001254 <main+0x140>)
 8001164:	f7ff fc74 	bl	8000a50 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	a902      	add	r1, sp, #8
 8001170:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8001172:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f7ff fbbf 	bl	80008fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800117e:	23f8      	movs	r3, #248	; 0xf8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	4834      	ldr	r0, [pc, #208]	; (8001254 <main+0x140>)
 8001182:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8001184:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f7ff fbb6 	bl	80008fc <HAL_GPIO_Init>
  hcan.Instance = CAN;
 8001190:	4c31      	ldr	r4, [pc, #196]	; (8001258 <main+0x144>)
 8001192:	4b32      	ldr	r3, [pc, #200]	; (800125c <main+0x148>)
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001194:	0020      	movs	r0, r4
  hcan.Instance = CAN;
 8001196:	6023      	str	r3, [r4, #0]
  hcan.Init.Prescaler = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	6063      	str	r3, [r4, #4]
  hcan.Init.SJW = CAN_SJW_4TQ;
 800119c:	23c0      	movs	r3, #192	; 0xc0
 800119e:	049b      	lsls	r3, r3, #18
 80011a0:	60e3      	str	r3, [r4, #12]
  hcan.Init.BS1 = CAN_BS1_11TQ;
 80011a2:	23a0      	movs	r3, #160	; 0xa0
 80011a4:	031b      	lsls	r3, r3, #12
 80011a6:	6123      	str	r3, [r4, #16]
  hcan.Init.BS2 = CAN_BS2_4TQ;
 80011a8:	23c0      	movs	r3, #192	; 0xc0
 80011aa:	039b      	lsls	r3, r3, #14
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011ac:	60a5      	str	r5, [r4, #8]
  hcan.Init.BS2 = CAN_BS2_4TQ;
 80011ae:	6163      	str	r3, [r4, #20]
  hcan.Init.TTCM = DISABLE;
 80011b0:	61a5      	str	r5, [r4, #24]
  hcan.Init.ABOM = DISABLE;
 80011b2:	61e5      	str	r5, [r4, #28]
  hcan.Init.AWUM = ENABLE;
 80011b4:	6226      	str	r6, [r4, #32]
  hcan.Init.NART = DISABLE;
 80011b6:	6265      	str	r5, [r4, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 80011b8:	62a5      	str	r5, [r4, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 80011ba:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011bc:	f7ff f8d0 	bl	8000360 <HAL_CAN_Init>
 80011c0:	42a8      	cmp	r0, r5
 80011c2:	d001      	beq.n	80011c8 <main+0xb4>
    Error_Handler();
 80011c4:	f7ff ff70 	bl	80010a8 <Error_Handler>
  hcan.pTxMsg = &TxMessage;
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <main+0x14c>)
  sFilterConfig.FilterNumber = 0;
 80011ca:	9007      	str	r0, [sp, #28]
  hcan.pTxMsg = &TxMessage;
 80011cc:	6323      	str	r3, [r4, #48]	; 0x30
  hcan.pRxMsg = &RxMessage;
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <main+0x150>)
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011d0:	9008      	str	r0, [sp, #32]
  hcan.pRxMsg = &RxMessage;
 80011d2:	6363      	str	r3, [r4, #52]	; 0x34
  sFilterConfig.BankNumber = 14;
 80011d4:	230e      	movs	r3, #14
  sFilterConfig.FilterIdHigh = 0x0000;
 80011d6:	9002      	str	r0, [sp, #8]
  sFilterConfig.FilterIdLow = 0x0000;
 80011d8:	9003      	str	r0, [sp, #12]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011da:	9004      	str	r0, [sp, #16]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011dc:	9005      	str	r0, [sp, #20]
  sFilterConfig.FilterFIFOAssignment = 0;
 80011de:	9006      	str	r0, [sp, #24]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80011e0:	a902      	add	r1, sp, #8
 80011e2:	0020      	movs	r0, r4
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011e4:	9609      	str	r6, [sp, #36]	; 0x24
  sFilterConfig.FilterActivation = ENABLE;
 80011e6:	960a      	str	r6, [sp, #40]	; 0x28
  sFilterConfig.BankNumber = 14;
 80011e8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80011ea:	f7ff f849 	bl	8000280 <HAL_CAN_ConfigFilter>
 80011ee:	1e01      	subs	r1, r0, #0
 80011f0:	d1e8      	bne.n	80011c4 <main+0xb0>
  hcan.pTxMsg->StdId = 0x200;
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	601a      	str	r2, [r3, #0]
  hcan.pTxMsg->Data[0] = 0xFF;
 80011fa:	3a02      	subs	r2, #2
 80011fc:	3aff      	subs	r2, #255	; 0xff
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
 80011fe:	60d8      	str	r0, [r3, #12]
  hcan.pTxMsg->IDE = CAN_ID_STD;
 8001200:	6098      	str	r0, [r3, #8]
  hcan.pTxMsg->Data[0] = 0xFF;
 8001202:	751a      	strb	r2, [r3, #20]
  hcan.pTxMsg->ExtId = 0x01;
 8001204:	605e      	str	r6, [r3, #4]
  hcan.pTxMsg->DLC = 1;
 8001206:	611e      	str	r6, [r3, #16]
  if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 8001208:	0020      	movs	r0, r4
 800120a:	f7ff f947 	bl	800049c <HAL_CAN_Receive_IT>
 800120e:	1e02      	subs	r2, r0, #0
 8001210:	d1d8      	bne.n	80011c4 <main+0xb0>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	2090      	movs	r0, #144	; 0x90
 8001216:	0209      	lsls	r1, r1, #8
 8001218:	05c0      	lsls	r0, r0, #23
 800121a:	f7ff fc19 	bl	8000a50 <HAL_GPIO_WritePin>
	    check_error = HAL_CAN_GetError(&hcan);
 800121e:	0020      	movs	r0, r4
 8001220:	f7ff fb16 	bl	8000850 <HAL_CAN_GetError>
 8001224:	4d10      	ldr	r5, [pc, #64]	; (8001268 <main+0x154>)
 8001226:	6028      	str	r0, [r5, #0]
		if(check_error == 0x8 || check_error == 0x10)
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	2b08      	cmp	r3, #8
 800122c:	d002      	beq.n	8001234 <main+0x120>
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	2b10      	cmp	r3, #16
 8001232:	d1f4      	bne.n	800121e <main+0x10a>
			__HAL_CAN_RESET_HANDLE_STATE(&hcan);
 8001234:	0023      	movs	r3, r4
 8001236:	2100      	movs	r1, #0
 8001238:	333d      	adds	r3, #61	; 0x3d
			  if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 800123a:	0020      	movs	r0, r4
			__HAL_CAN_RESET_HANDLE_STATE(&hcan);
 800123c:	7019      	strb	r1, [r3, #0]
			  if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 800123e:	f7ff f92d 	bl	800049c <HAL_CAN_Receive_IT>
 8001242:	2800      	cmp	r0, #0
 8001244:	d1be      	bne.n	80011c4 <main+0xb0>
			  check_error = 0;
 8001246:	6028      	str	r0, [r5, #0]
 8001248:	e7e9      	b.n	800121e <main+0x10a>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	40021000 	.word	0x40021000
 8001250:	00008007 	.word	0x00008007
 8001254:	48000400 	.word	0x48000400
 8001258:	2000006c 	.word	0x2000006c
 800125c:	40006400 	.word	0x40006400
 8001260:	20000044 	.word	0x20000044
 8001264:	20000020 	.word	0x20000020
 8001268:	20000060 	.word	0x20000060

0800126c <HAL_CAN_RxCpltCallback>:
{
 800126c:	b570      	push	{r4, r5, r6, lr}
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800126e:	2180      	movs	r1, #128	; 0x80
{
 8001270:	0005      	movs	r5, r0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001272:	2090      	movs	r0, #144	; 0x90
 8001274:	2201      	movs	r2, #1
 8001276:	0209      	lsls	r1, r1, #8
 8001278:	05c0      	lsls	r0, r0, #23
 800127a:	f7ff fbe9 	bl	8000a50 <HAL_GPIO_WritePin>
	if((hcan->pRxMsg->StdId == 0x204))
 800127e:	2281      	movs	r2, #129	; 0x81
 8001280:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	6819      	ldr	r1, [r3, #0]
 8001286:	4291      	cmp	r1, r2
 8001288:	d170      	bne.n	800136c <HAL_CAN_RxCpltCallback+0x100>
		sol_byte = hcan->pRxMsg->Data[7];
 800128a:	7edb      	ldrb	r3, [r3, #27]
 800128c:	4c3c      	ldr	r4, [pc, #240]	; (8001380 <HAL_CAN_RxCpltCallback+0x114>)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //GPIO 0 RESET
 800128e:	2200      	movs	r2, #0
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	483c      	ldr	r0, [pc, #240]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
		sol_byte = hcan->pRxMsg->Data[7];
 8001294:	7023      	strb	r3, [r4, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //GPIO 0 RESET
 8001296:	f7ff fbdb 	bl	8000a50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //GPIO 1 RESET
 800129a:	2200      	movs	r2, #0
 800129c:	2140      	movs	r1, #64	; 0x40
 800129e:	4839      	ldr	r0, [pc, #228]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 80012a0:	f7ff fbd6 	bl	8000a50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //GPIO 2 RESET
 80012a4:	2200      	movs	r2, #0
 80012a6:	2110      	movs	r1, #16
 80012a8:	4836      	ldr	r0, [pc, #216]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 80012aa:	f7ff fbd1 	bl	8000a50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); //GPIO 3 RESET
 80012ae:	2200      	movs	r2, #0
 80012b0:	2108      	movs	r1, #8
 80012b2:	4834      	ldr	r0, [pc, #208]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 80012b4:	f7ff fbcc 	bl	8000a50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //GPIO 4 RESET
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4831      	ldr	r0, [pc, #196]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 80012be:	f7ff fbc7 	bl	8000a50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //GPIO 5 RESET
 80012c2:	2090      	movs	r0, #144	; 0x90
 80012c4:	2200      	movs	r2, #0
 80012c6:	2101      	movs	r1, #1
 80012c8:	05c0      	lsls	r0, r0, #23
 80012ca:	f7ff fbc1 	bl	8000a50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); //GPIO 6 RESET
 80012ce:	2090      	movs	r0, #144	; 0x90
 80012d0:	2200      	movs	r2, #0
 80012d2:	2102      	movs	r1, #2
 80012d4:	05c0      	lsls	r0, r0, #23
 80012d6:	f7ff fbbb 	bl	8000a50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //GPIO 7 RESET
 80012da:	2090      	movs	r0, #144	; 0x90
 80012dc:	2200      	movs	r2, #0
 80012de:	2104      	movs	r1, #4
 80012e0:	05c0      	lsls	r0, r0, #23
 80012e2:	f7ff fbb5 	bl	8000a50 <HAL_GPIO_WritePin>
				if((sol_byte & 0x80) == 0x80)
 80012e6:	7823      	ldrb	r3, [r4, #0]
 80012e8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ea:	d904      	bls.n	80012f6 <HAL_CAN_RxCpltCallback+0x8a>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //GPIO 0 SET
 80012ec:	2201      	movs	r2, #1
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	4824      	ldr	r0, [pc, #144]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 80012f2:	f7ff fbad 	bl	8000a50 <HAL_GPIO_WritePin>
				if((sol_byte & 0x40) == 0x40)
 80012f6:	2140      	movs	r1, #64	; 0x40
 80012f8:	7823      	ldrb	r3, [r4, #0]
 80012fa:	420b      	tst	r3, r1
 80012fc:	d003      	beq.n	8001306 <HAL_CAN_RxCpltCallback+0x9a>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //GPIO 1 SET
 80012fe:	2201      	movs	r2, #1
 8001300:	4820      	ldr	r0, [pc, #128]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 8001302:	f7ff fba5 	bl	8000a50 <HAL_GPIO_WritePin>
				if((sol_byte & 0x20) == 0x20)
 8001306:	7823      	ldrb	r3, [r4, #0]
 8001308:	069b      	lsls	r3, r3, #26
 800130a:	d504      	bpl.n	8001316 <HAL_CAN_RxCpltCallback+0xaa>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //GPIO 2 SET
 800130c:	2201      	movs	r2, #1
 800130e:	2110      	movs	r1, #16
 8001310:	481c      	ldr	r0, [pc, #112]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 8001312:	f7ff fb9d 	bl	8000a50 <HAL_GPIO_WritePin>
				if((sol_byte & 0x10) == 0x10)
 8001316:	7823      	ldrb	r3, [r4, #0]
 8001318:	06db      	lsls	r3, r3, #27
 800131a:	d504      	bpl.n	8001326 <HAL_CAN_RxCpltCallback+0xba>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); //GPIO 3 SET
 800131c:	2201      	movs	r2, #1
 800131e:	2108      	movs	r1, #8
 8001320:	4818      	ldr	r0, [pc, #96]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 8001322:	f7ff fb95 	bl	8000a50 <HAL_GPIO_WritePin>
				if((sol_byte & 0x08) == 0x08)
 8001326:	7823      	ldrb	r3, [r4, #0]
 8001328:	071b      	lsls	r3, r3, #28
 800132a:	d504      	bpl.n	8001336 <HAL_CAN_RxCpltCallback+0xca>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //GPIO 4 SET
 800132c:	2201      	movs	r2, #1
 800132e:	2120      	movs	r1, #32
 8001330:	4814      	ldr	r0, [pc, #80]	; (8001384 <HAL_CAN_RxCpltCallback+0x118>)
 8001332:	f7ff fb8d 	bl	8000a50 <HAL_GPIO_WritePin>
				if((sol_byte & 0x04) == 0x04)
 8001336:	7823      	ldrb	r3, [r4, #0]
 8001338:	075b      	lsls	r3, r3, #29
 800133a:	d505      	bpl.n	8001348 <HAL_CAN_RxCpltCallback+0xdc>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //GPIO 5 SET
 800133c:	2201      	movs	r2, #1
 800133e:	2090      	movs	r0, #144	; 0x90
 8001340:	0011      	movs	r1, r2
 8001342:	05c0      	lsls	r0, r0, #23
 8001344:	f7ff fb84 	bl	8000a50 <HAL_GPIO_WritePin>
				if((sol_byte & 0x02) == 0x02)
 8001348:	2102      	movs	r1, #2
 800134a:	7823      	ldrb	r3, [r4, #0]
 800134c:	420b      	tst	r3, r1
 800134e:	d004      	beq.n	800135a <HAL_CAN_RxCpltCallback+0xee>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //GPIO 6 SET
 8001350:	2090      	movs	r0, #144	; 0x90
 8001352:	2201      	movs	r2, #1
 8001354:	05c0      	lsls	r0, r0, #23
 8001356:	f7ff fb7b 	bl	8000a50 <HAL_GPIO_WritePin>
				if((sol_byte & 0x01) == 0x01)
 800135a:	2201      	movs	r2, #1
 800135c:	7823      	ldrb	r3, [r4, #0]
 800135e:	4213      	tst	r3, r2
 8001360:	d004      	beq.n	800136c <HAL_CAN_RxCpltCallback+0x100>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //GPIO 7 SET
 8001362:	2090      	movs	r0, #144	; 0x90
 8001364:	2104      	movs	r1, #4
 8001366:	05c0      	lsls	r0, r0, #23
 8001368:	f7ff fb72 	bl	8000a50 <HAL_GPIO_WritePin>
	if (HAL_CAN_Receive_IT(hcan, CAN_FIFO0) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	0028      	movs	r0, r5
 8001370:	f7ff f894 	bl	800049c <HAL_CAN_Receive_IT>
 8001374:	2800      	cmp	r0, #0
 8001376:	d001      	beq.n	800137c <HAL_CAN_RxCpltCallback+0x110>
		Error_Handler();
 8001378:	f7ff fe96 	bl	80010a8 <Error_Handler>
}
 800137c:	bd70      	pop	{r4, r5, r6, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	20000064 	.word	0x20000064
 8001384:	48000400 	.word	0x48000400

08001388 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001388:	2001      	movs	r0, #1
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_MspInit+0x2c>)
{
 800138c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	6999      	ldr	r1, [r3, #24]
 8001390:	4301      	orrs	r1, r0
 8001392:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4002      	ands	r2, r0
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	69da      	ldr	r2, [r3, #28]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	61da      	str	r2, [r3, #28]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	400b      	ands	r3, r1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	b002      	add	sp, #8
 80013b0:	4770      	bx	lr
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013b8:	b510      	push	{r4, lr}
 80013ba:	0004      	movs	r4, r0
 80013bc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	2214      	movs	r2, #20
 80013c0:	2100      	movs	r1, #0
 80013c2:	a803      	add	r0, sp, #12
 80013c4:	f000 f8db 	bl	800157e <memset>
  if(hcan->Instance==CAN)
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_CAN_MspInit+0x70>)
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d128      	bne.n	8001422 <HAL_CAN_MspInit+0x6a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013d0:	2080      	movs	r0, #128	; 0x80
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_CAN_MspInit+0x74>)
 80013d4:	0480      	lsls	r0, r0, #18
 80013d6:	69d9      	ldr	r1, [r3, #28]
 80013d8:	4301      	orrs	r1, r0
 80013da:	61d9      	str	r1, [r3, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013de:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	0289      	lsls	r1, r1, #10
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e2:	4002      	ands	r2, r0
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	430a      	orrs	r2, r1
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	400b      	ands	r3, r1
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013fa:	23c0      	movs	r3, #192	; 0xc0
 80013fc:	015b      	lsls	r3, r3, #5
 80013fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	3301      	adds	r3, #1
 8001406:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800140a:	3301      	adds	r3, #1
 800140c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f7ff fa75 	bl	80008fc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	201e      	movs	r0, #30
 8001416:	0011      	movs	r1, r2
 8001418:	f7ff fa1c 	bl	8000854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800141c:	201e      	movs	r0, #30
 800141e:	f7ff fa49 	bl	80008b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001422:	b008      	add	sp, #32
 8001424:	bd10      	pop	{r4, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	40006400 	.word	0x40006400
 800142c:	40021000 	.word	0x40021000

08001430 <NMI_Handler>:
 8001430:	4770      	bx	lr

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler>

08001434 <SVC_Handler>:
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143a:	f7fe ff13 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bd10      	pop	{r4, pc}

08001440 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8001440:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001442:	4802      	ldr	r0, [pc, #8]	; (800144c <CEC_CAN_IRQHandler+0xc>)
 8001444:	f7ff f912 	bl	800066c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001448:	bd10      	pop	{r4, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	2000006c 	.word	0x2000006c

08001450 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001450:	2101      	movs	r1, #1
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001454:	4811      	ldr	r0, [pc, #68]	; (800149c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4002      	ands	r2, r0
 8001460:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	480e      	ldr	r0, [pc, #56]	; (80014a0 <SystemInit+0x50>)
 8001466:	4002      	ands	r2, r0
 8001468:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	480d      	ldr	r0, [pc, #52]	; (80014a4 <SystemInit+0x54>)
 800146e:	4002      	ands	r2, r0
 8001470:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <SystemInit+0x58>)
 8001476:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001478:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800147a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800147c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147e:	4382      	bics	r2, r0
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8001482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <SystemInit+0x5c>)
 8001486:	4002      	ands	r2, r0
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800148a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148c:	438a      	bics	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]

}
 8001494:	4770      	bx	lr
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40021000 	.word	0x40021000
 800149c:	08ffb80c 	.word	0x08ffb80c
 80014a0:	fef6ffff 	.word	0xfef6ffff
 80014a4:	fffbffff 	.word	0xfffbffff
 80014a8:	ffc0ffff 	.word	0xffc0ffff
 80014ac:	fffffe2c 	.word	0xfffffe2c

080014b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014b2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80014b4:	2004      	movs	r0, #4
    LDR R1, [R0]
 80014b6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80014b8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80014ba:	221f      	movs	r2, #31
    CMP R1, R2
 80014bc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80014be:	d105      	bne.n	80014cc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <LoopForever+0x6>)
    LDR R1,=0x00000001
 80014c2:	2101      	movs	r1, #1
    STR R1, [R0]
 80014c4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80014c6:	4810      	ldr	r0, [pc, #64]	; (8001508 <LoopForever+0xa>)
    LDR R1,=0x00000000
 80014c8:	2100      	movs	r1, #0
    STR R1, [R0]
 80014ca:	6001      	str	r1, [r0, #0]

080014cc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480f      	ldr	r0, [pc, #60]	; (800150c <LoopForever+0xe>)
  ldr r1, =_edata
 80014ce:	4910      	ldr	r1, [pc, #64]	; (8001510 <LoopForever+0x12>)
  ldr r2, =_sidata
 80014d0:	4a10      	ldr	r2, [pc, #64]	; (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <LoopForever+0x1a>)
  ldr r4, =_ebss
 80014e4:	4c0d      	ldr	r4, [pc, #52]	; (800151c <LoopForever+0x1e>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014f2:	f7ff ffad 	bl	8001450 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80014f6:	f000 f815 	bl	8001524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff fe0b 	bl	8001114 <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   r0, =_estack
 8001500:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8001504:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8001508:	40010000 	.word	0x40010000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001514:	080015e0 	.word	0x080015e0
  ldr r2, =_sbss
 8001518:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800151c:	200000b0 	.word	0x200000b0

08001520 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_IRQHandler>
	...

08001524 <__libc_init_array>:
 8001524:	b570      	push	{r4, r5, r6, lr}
 8001526:	2600      	movs	r6, #0
 8001528:	4d0c      	ldr	r5, [pc, #48]	; (800155c <__libc_init_array+0x38>)
 800152a:	4c0d      	ldr	r4, [pc, #52]	; (8001560 <__libc_init_array+0x3c>)
 800152c:	1b64      	subs	r4, r4, r5
 800152e:	10a4      	asrs	r4, r4, #2
 8001530:	42a6      	cmp	r6, r4
 8001532:	d109      	bne.n	8001548 <__libc_init_array+0x24>
 8001534:	2600      	movs	r6, #0
 8001536:	f000 f82b 	bl	8001590 <_init>
 800153a:	4d0a      	ldr	r5, [pc, #40]	; (8001564 <__libc_init_array+0x40>)
 800153c:	4c0a      	ldr	r4, [pc, #40]	; (8001568 <__libc_init_array+0x44>)
 800153e:	1b64      	subs	r4, r4, r5
 8001540:	10a4      	asrs	r4, r4, #2
 8001542:	42a6      	cmp	r6, r4
 8001544:	d105      	bne.n	8001552 <__libc_init_array+0x2e>
 8001546:	bd70      	pop	{r4, r5, r6, pc}
 8001548:	00b3      	lsls	r3, r6, #2
 800154a:	58eb      	ldr	r3, [r5, r3]
 800154c:	4798      	blx	r3
 800154e:	3601      	adds	r6, #1
 8001550:	e7ee      	b.n	8001530 <__libc_init_array+0xc>
 8001552:	00b3      	lsls	r3, r6, #2
 8001554:	58eb      	ldr	r3, [r5, r3]
 8001556:	4798      	blx	r3
 8001558:	3601      	adds	r6, #1
 800155a:	e7f2      	b.n	8001542 <__libc_init_array+0x1e>
 800155c:	080015d8 	.word	0x080015d8
 8001560:	080015d8 	.word	0x080015d8
 8001564:	080015d8 	.word	0x080015d8
 8001568:	080015dc 	.word	0x080015dc

0800156c <memcpy>:
 800156c:	2300      	movs	r3, #0
 800156e:	b510      	push	{r4, lr}
 8001570:	429a      	cmp	r2, r3
 8001572:	d100      	bne.n	8001576 <memcpy+0xa>
 8001574:	bd10      	pop	{r4, pc}
 8001576:	5ccc      	ldrb	r4, [r1, r3]
 8001578:	54c4      	strb	r4, [r0, r3]
 800157a:	3301      	adds	r3, #1
 800157c:	e7f8      	b.n	8001570 <memcpy+0x4>

0800157e <memset>:
 800157e:	0003      	movs	r3, r0
 8001580:	1882      	adds	r2, r0, r2
 8001582:	4293      	cmp	r3, r2
 8001584:	d100      	bne.n	8001588 <memset+0xa>
 8001586:	4770      	bx	lr
 8001588:	7019      	strb	r1, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	e7f9      	b.n	8001582 <memset+0x4>
	...

08001590 <_init>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001596:	bc08      	pop	{r3}
 8001598:	469e      	mov	lr, r3
 800159a:	4770      	bx	lr

0800159c <_fini>:
 800159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015a2:	bc08      	pop	{r3}
 80015a4:	469e      	mov	lr, r3
 80015a6:	4770      	bx	lr
