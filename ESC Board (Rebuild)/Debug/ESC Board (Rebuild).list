
ESC Board (Rebuild).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800307c  0800307c  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000150  20000004  08003088  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000154  08003088  00020154  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000118d1  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002252  00000000  00000000  000318fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067df  00000000  00000000  00033b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007f0  00000000  00000000  0003a330  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c10  00000000  00000000  0003ab20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c7c  00000000  00000000  0003b730  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000327e  00000000  00000000  000403ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004362a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a1c  00000000  00000000  000436a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ff4 	.word	0x08002ff4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002ff4 	.word	0x08002ff4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_dadd>:
 8000234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000236:	4645      	mov	r5, r8
 8000238:	46de      	mov	lr, fp
 800023a:	4657      	mov	r7, sl
 800023c:	464e      	mov	r6, r9
 800023e:	030c      	lsls	r4, r1, #12
 8000240:	b5e0      	push	{r5, r6, r7, lr}
 8000242:	004e      	lsls	r6, r1, #1
 8000244:	0fc9      	lsrs	r1, r1, #31
 8000246:	4688      	mov	r8, r1
 8000248:	000d      	movs	r5, r1
 800024a:	0a61      	lsrs	r1, r4, #9
 800024c:	0f44      	lsrs	r4, r0, #29
 800024e:	430c      	orrs	r4, r1
 8000250:	00c7      	lsls	r7, r0, #3
 8000252:	0319      	lsls	r1, r3, #12
 8000254:	0058      	lsls	r0, r3, #1
 8000256:	0fdb      	lsrs	r3, r3, #31
 8000258:	469b      	mov	fp, r3
 800025a:	0a4b      	lsrs	r3, r1, #9
 800025c:	0f51      	lsrs	r1, r2, #29
 800025e:	430b      	orrs	r3, r1
 8000260:	0d76      	lsrs	r6, r6, #21
 8000262:	0d40      	lsrs	r0, r0, #21
 8000264:	0019      	movs	r1, r3
 8000266:	00d2      	lsls	r2, r2, #3
 8000268:	45d8      	cmp	r8, fp
 800026a:	d100      	bne.n	800026e <__aeabi_dadd+0x3a>
 800026c:	e0ae      	b.n	80003cc <__aeabi_dadd+0x198>
 800026e:	1a35      	subs	r5, r6, r0
 8000270:	2d00      	cmp	r5, #0
 8000272:	dc00      	bgt.n	8000276 <__aeabi_dadd+0x42>
 8000274:	e0f6      	b.n	8000464 <__aeabi_dadd+0x230>
 8000276:	2800      	cmp	r0, #0
 8000278:	d10f      	bne.n	800029a <__aeabi_dadd+0x66>
 800027a:	4313      	orrs	r3, r2
 800027c:	d100      	bne.n	8000280 <__aeabi_dadd+0x4c>
 800027e:	e0db      	b.n	8000438 <__aeabi_dadd+0x204>
 8000280:	1e6b      	subs	r3, r5, #1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d000      	beq.n	8000288 <__aeabi_dadd+0x54>
 8000286:	e137      	b.n	80004f8 <__aeabi_dadd+0x2c4>
 8000288:	1aba      	subs	r2, r7, r2
 800028a:	4297      	cmp	r7, r2
 800028c:	41bf      	sbcs	r7, r7
 800028e:	1a64      	subs	r4, r4, r1
 8000290:	427f      	negs	r7, r7
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2601      	movs	r6, #1
 8000296:	0017      	movs	r7, r2
 8000298:	e024      	b.n	80002e4 <__aeabi_dadd+0xb0>
 800029a:	4bc6      	ldr	r3, [pc, #792]	; (80005b4 <__aeabi_dadd+0x380>)
 800029c:	429e      	cmp	r6, r3
 800029e:	d04d      	beq.n	800033c <__aeabi_dadd+0x108>
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	041b      	lsls	r3, r3, #16
 80002a4:	4319      	orrs	r1, r3
 80002a6:	2d38      	cmp	r5, #56	; 0x38
 80002a8:	dd00      	ble.n	80002ac <__aeabi_dadd+0x78>
 80002aa:	e107      	b.n	80004bc <__aeabi_dadd+0x288>
 80002ac:	2d1f      	cmp	r5, #31
 80002ae:	dd00      	ble.n	80002b2 <__aeabi_dadd+0x7e>
 80002b0:	e138      	b.n	8000524 <__aeabi_dadd+0x2f0>
 80002b2:	2020      	movs	r0, #32
 80002b4:	1b43      	subs	r3, r0, r5
 80002b6:	469a      	mov	sl, r3
 80002b8:	000b      	movs	r3, r1
 80002ba:	4650      	mov	r0, sl
 80002bc:	4083      	lsls	r3, r0
 80002be:	4699      	mov	r9, r3
 80002c0:	0013      	movs	r3, r2
 80002c2:	4648      	mov	r0, r9
 80002c4:	40eb      	lsrs	r3, r5
 80002c6:	4318      	orrs	r0, r3
 80002c8:	0003      	movs	r3, r0
 80002ca:	4650      	mov	r0, sl
 80002cc:	4082      	lsls	r2, r0
 80002ce:	1e50      	subs	r0, r2, #1
 80002d0:	4182      	sbcs	r2, r0
 80002d2:	40e9      	lsrs	r1, r5
 80002d4:	431a      	orrs	r2, r3
 80002d6:	1aba      	subs	r2, r7, r2
 80002d8:	1a61      	subs	r1, r4, r1
 80002da:	4297      	cmp	r7, r2
 80002dc:	41a4      	sbcs	r4, r4
 80002de:	0017      	movs	r7, r2
 80002e0:	4264      	negs	r4, r4
 80002e2:	1b0c      	subs	r4, r1, r4
 80002e4:	0223      	lsls	r3, r4, #8
 80002e6:	d562      	bpl.n	80003ae <__aeabi_dadd+0x17a>
 80002e8:	0264      	lsls	r4, r4, #9
 80002ea:	0a65      	lsrs	r5, r4, #9
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d100      	bne.n	80002f2 <__aeabi_dadd+0xbe>
 80002f0:	e0df      	b.n	80004b2 <__aeabi_dadd+0x27e>
 80002f2:	0028      	movs	r0, r5
 80002f4:	f000 fe80 	bl	8000ff8 <__clzsi2>
 80002f8:	0003      	movs	r3, r0
 80002fa:	3b08      	subs	r3, #8
 80002fc:	2b1f      	cmp	r3, #31
 80002fe:	dd00      	ble.n	8000302 <__aeabi_dadd+0xce>
 8000300:	e0d2      	b.n	80004a8 <__aeabi_dadd+0x274>
 8000302:	2220      	movs	r2, #32
 8000304:	003c      	movs	r4, r7
 8000306:	1ad2      	subs	r2, r2, r3
 8000308:	409d      	lsls	r5, r3
 800030a:	40d4      	lsrs	r4, r2
 800030c:	409f      	lsls	r7, r3
 800030e:	4325      	orrs	r5, r4
 8000310:	429e      	cmp	r6, r3
 8000312:	dd00      	ble.n	8000316 <__aeabi_dadd+0xe2>
 8000314:	e0c4      	b.n	80004a0 <__aeabi_dadd+0x26c>
 8000316:	1b9e      	subs	r6, r3, r6
 8000318:	1c73      	adds	r3, r6, #1
 800031a:	2b1f      	cmp	r3, #31
 800031c:	dd00      	ble.n	8000320 <__aeabi_dadd+0xec>
 800031e:	e0f1      	b.n	8000504 <__aeabi_dadd+0x2d0>
 8000320:	2220      	movs	r2, #32
 8000322:	0038      	movs	r0, r7
 8000324:	0029      	movs	r1, r5
 8000326:	1ad2      	subs	r2, r2, r3
 8000328:	40d8      	lsrs	r0, r3
 800032a:	4091      	lsls	r1, r2
 800032c:	4097      	lsls	r7, r2
 800032e:	002c      	movs	r4, r5
 8000330:	4301      	orrs	r1, r0
 8000332:	1e78      	subs	r0, r7, #1
 8000334:	4187      	sbcs	r7, r0
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2600      	movs	r6, #0
 800033a:	430f      	orrs	r7, r1
 800033c:	077b      	lsls	r3, r7, #29
 800033e:	d009      	beq.n	8000354 <__aeabi_dadd+0x120>
 8000340:	230f      	movs	r3, #15
 8000342:	403b      	ands	r3, r7
 8000344:	2b04      	cmp	r3, #4
 8000346:	d005      	beq.n	8000354 <__aeabi_dadd+0x120>
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	42bb      	cmp	r3, r7
 800034c:	41bf      	sbcs	r7, r7
 800034e:	427f      	negs	r7, r7
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	001f      	movs	r7, r3
 8000354:	0223      	lsls	r3, r4, #8
 8000356:	d52c      	bpl.n	80003b2 <__aeabi_dadd+0x17e>
 8000358:	4b96      	ldr	r3, [pc, #600]	; (80005b4 <__aeabi_dadd+0x380>)
 800035a:	3601      	adds	r6, #1
 800035c:	429e      	cmp	r6, r3
 800035e:	d100      	bne.n	8000362 <__aeabi_dadd+0x12e>
 8000360:	e09a      	b.n	8000498 <__aeabi_dadd+0x264>
 8000362:	4645      	mov	r5, r8
 8000364:	4b94      	ldr	r3, [pc, #592]	; (80005b8 <__aeabi_dadd+0x384>)
 8000366:	08ff      	lsrs	r7, r7, #3
 8000368:	401c      	ands	r4, r3
 800036a:	0760      	lsls	r0, r4, #29
 800036c:	0576      	lsls	r6, r6, #21
 800036e:	0264      	lsls	r4, r4, #9
 8000370:	4307      	orrs	r7, r0
 8000372:	0b24      	lsrs	r4, r4, #12
 8000374:	0d76      	lsrs	r6, r6, #21
 8000376:	2100      	movs	r1, #0
 8000378:	0324      	lsls	r4, r4, #12
 800037a:	0b23      	lsrs	r3, r4, #12
 800037c:	0d0c      	lsrs	r4, r1, #20
 800037e:	4a8f      	ldr	r2, [pc, #572]	; (80005bc <__aeabi_dadd+0x388>)
 8000380:	0524      	lsls	r4, r4, #20
 8000382:	431c      	orrs	r4, r3
 8000384:	4014      	ands	r4, r2
 8000386:	0533      	lsls	r3, r6, #20
 8000388:	4323      	orrs	r3, r4
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	07ed      	lsls	r5, r5, #31
 800038e:	085b      	lsrs	r3, r3, #1
 8000390:	432b      	orrs	r3, r5
 8000392:	0038      	movs	r0, r7
 8000394:	0019      	movs	r1, r3
 8000396:	bc3c      	pop	{r2, r3, r4, r5}
 8000398:	4690      	mov	r8, r2
 800039a:	4699      	mov	r9, r3
 800039c:	46a2      	mov	sl, r4
 800039e:	46ab      	mov	fp, r5
 80003a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a2:	4664      	mov	r4, ip
 80003a4:	4304      	orrs	r4, r0
 80003a6:	d100      	bne.n	80003aa <__aeabi_dadd+0x176>
 80003a8:	e211      	b.n	80007ce <__aeabi_dadd+0x59a>
 80003aa:	0004      	movs	r4, r0
 80003ac:	4667      	mov	r7, ip
 80003ae:	077b      	lsls	r3, r7, #29
 80003b0:	d1c6      	bne.n	8000340 <__aeabi_dadd+0x10c>
 80003b2:	4645      	mov	r5, r8
 80003b4:	0760      	lsls	r0, r4, #29
 80003b6:	08ff      	lsrs	r7, r7, #3
 80003b8:	4307      	orrs	r7, r0
 80003ba:	08e4      	lsrs	r4, r4, #3
 80003bc:	4b7d      	ldr	r3, [pc, #500]	; (80005b4 <__aeabi_dadd+0x380>)
 80003be:	429e      	cmp	r6, r3
 80003c0:	d030      	beq.n	8000424 <__aeabi_dadd+0x1f0>
 80003c2:	0324      	lsls	r4, r4, #12
 80003c4:	0576      	lsls	r6, r6, #21
 80003c6:	0b24      	lsrs	r4, r4, #12
 80003c8:	0d76      	lsrs	r6, r6, #21
 80003ca:	e7d4      	b.n	8000376 <__aeabi_dadd+0x142>
 80003cc:	1a33      	subs	r3, r6, r0
 80003ce:	469a      	mov	sl, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	dd78      	ble.n	80004c6 <__aeabi_dadd+0x292>
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d031      	beq.n	800043c <__aeabi_dadd+0x208>
 80003d8:	4876      	ldr	r0, [pc, #472]	; (80005b4 <__aeabi_dadd+0x380>)
 80003da:	4286      	cmp	r6, r0
 80003dc:	d0ae      	beq.n	800033c <__aeabi_dadd+0x108>
 80003de:	2080      	movs	r0, #128	; 0x80
 80003e0:	0400      	lsls	r0, r0, #16
 80003e2:	4301      	orrs	r1, r0
 80003e4:	4653      	mov	r3, sl
 80003e6:	2b38      	cmp	r3, #56	; 0x38
 80003e8:	dc00      	bgt.n	80003ec <__aeabi_dadd+0x1b8>
 80003ea:	e0e9      	b.n	80005c0 <__aeabi_dadd+0x38c>
 80003ec:	430a      	orrs	r2, r1
 80003ee:	1e51      	subs	r1, r2, #1
 80003f0:	418a      	sbcs	r2, r1
 80003f2:	2100      	movs	r1, #0
 80003f4:	19d2      	adds	r2, r2, r7
 80003f6:	42ba      	cmp	r2, r7
 80003f8:	41bf      	sbcs	r7, r7
 80003fa:	1909      	adds	r1, r1, r4
 80003fc:	427c      	negs	r4, r7
 80003fe:	0017      	movs	r7, r2
 8000400:	190c      	adds	r4, r1, r4
 8000402:	0223      	lsls	r3, r4, #8
 8000404:	d5d3      	bpl.n	80003ae <__aeabi_dadd+0x17a>
 8000406:	4b6b      	ldr	r3, [pc, #428]	; (80005b4 <__aeabi_dadd+0x380>)
 8000408:	3601      	adds	r6, #1
 800040a:	429e      	cmp	r6, r3
 800040c:	d100      	bne.n	8000410 <__aeabi_dadd+0x1dc>
 800040e:	e13a      	b.n	8000686 <__aeabi_dadd+0x452>
 8000410:	2001      	movs	r0, #1
 8000412:	4b69      	ldr	r3, [pc, #420]	; (80005b8 <__aeabi_dadd+0x384>)
 8000414:	401c      	ands	r4, r3
 8000416:	087b      	lsrs	r3, r7, #1
 8000418:	4007      	ands	r7, r0
 800041a:	431f      	orrs	r7, r3
 800041c:	07e0      	lsls	r0, r4, #31
 800041e:	4307      	orrs	r7, r0
 8000420:	0864      	lsrs	r4, r4, #1
 8000422:	e78b      	b.n	800033c <__aeabi_dadd+0x108>
 8000424:	0023      	movs	r3, r4
 8000426:	433b      	orrs	r3, r7
 8000428:	d100      	bne.n	800042c <__aeabi_dadd+0x1f8>
 800042a:	e1cb      	b.n	80007c4 <__aeabi_dadd+0x590>
 800042c:	2280      	movs	r2, #128	; 0x80
 800042e:	0312      	lsls	r2, r2, #12
 8000430:	4314      	orrs	r4, r2
 8000432:	0324      	lsls	r4, r4, #12
 8000434:	0b24      	lsrs	r4, r4, #12
 8000436:	e79e      	b.n	8000376 <__aeabi_dadd+0x142>
 8000438:	002e      	movs	r6, r5
 800043a:	e77f      	b.n	800033c <__aeabi_dadd+0x108>
 800043c:	0008      	movs	r0, r1
 800043e:	4310      	orrs	r0, r2
 8000440:	d100      	bne.n	8000444 <__aeabi_dadd+0x210>
 8000442:	e0b4      	b.n	80005ae <__aeabi_dadd+0x37a>
 8000444:	1e58      	subs	r0, r3, #1
 8000446:	2800      	cmp	r0, #0
 8000448:	d000      	beq.n	800044c <__aeabi_dadd+0x218>
 800044a:	e0de      	b.n	800060a <__aeabi_dadd+0x3d6>
 800044c:	18ba      	adds	r2, r7, r2
 800044e:	42ba      	cmp	r2, r7
 8000450:	419b      	sbcs	r3, r3
 8000452:	1864      	adds	r4, r4, r1
 8000454:	425b      	negs	r3, r3
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	0017      	movs	r7, r2
 800045a:	2601      	movs	r6, #1
 800045c:	0223      	lsls	r3, r4, #8
 800045e:	d5a6      	bpl.n	80003ae <__aeabi_dadd+0x17a>
 8000460:	2602      	movs	r6, #2
 8000462:	e7d5      	b.n	8000410 <__aeabi_dadd+0x1dc>
 8000464:	2d00      	cmp	r5, #0
 8000466:	d16e      	bne.n	8000546 <__aeabi_dadd+0x312>
 8000468:	1c70      	adds	r0, r6, #1
 800046a:	0540      	lsls	r0, r0, #21
 800046c:	0d40      	lsrs	r0, r0, #21
 800046e:	2801      	cmp	r0, #1
 8000470:	dc00      	bgt.n	8000474 <__aeabi_dadd+0x240>
 8000472:	e0f9      	b.n	8000668 <__aeabi_dadd+0x434>
 8000474:	1ab8      	subs	r0, r7, r2
 8000476:	4684      	mov	ip, r0
 8000478:	4287      	cmp	r7, r0
 800047a:	4180      	sbcs	r0, r0
 800047c:	1ae5      	subs	r5, r4, r3
 800047e:	4240      	negs	r0, r0
 8000480:	1a2d      	subs	r5, r5, r0
 8000482:	0228      	lsls	r0, r5, #8
 8000484:	d400      	bmi.n	8000488 <__aeabi_dadd+0x254>
 8000486:	e089      	b.n	800059c <__aeabi_dadd+0x368>
 8000488:	1bd7      	subs	r7, r2, r7
 800048a:	42ba      	cmp	r2, r7
 800048c:	4192      	sbcs	r2, r2
 800048e:	1b1c      	subs	r4, r3, r4
 8000490:	4252      	negs	r2, r2
 8000492:	1aa5      	subs	r5, r4, r2
 8000494:	46d8      	mov	r8, fp
 8000496:	e729      	b.n	80002ec <__aeabi_dadd+0xb8>
 8000498:	4645      	mov	r5, r8
 800049a:	2400      	movs	r4, #0
 800049c:	2700      	movs	r7, #0
 800049e:	e76a      	b.n	8000376 <__aeabi_dadd+0x142>
 80004a0:	4c45      	ldr	r4, [pc, #276]	; (80005b8 <__aeabi_dadd+0x384>)
 80004a2:	1af6      	subs	r6, r6, r3
 80004a4:	402c      	ands	r4, r5
 80004a6:	e749      	b.n	800033c <__aeabi_dadd+0x108>
 80004a8:	003d      	movs	r5, r7
 80004aa:	3828      	subs	r0, #40	; 0x28
 80004ac:	4085      	lsls	r5, r0
 80004ae:	2700      	movs	r7, #0
 80004b0:	e72e      	b.n	8000310 <__aeabi_dadd+0xdc>
 80004b2:	0038      	movs	r0, r7
 80004b4:	f000 fda0 	bl	8000ff8 <__clzsi2>
 80004b8:	3020      	adds	r0, #32
 80004ba:	e71d      	b.n	80002f8 <__aeabi_dadd+0xc4>
 80004bc:	430a      	orrs	r2, r1
 80004be:	1e51      	subs	r1, r2, #1
 80004c0:	418a      	sbcs	r2, r1
 80004c2:	2100      	movs	r1, #0
 80004c4:	e707      	b.n	80002d6 <__aeabi_dadd+0xa2>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_dadd+0x298>
 80004ca:	e0f3      	b.n	80006b4 <__aeabi_dadd+0x480>
 80004cc:	1c70      	adds	r0, r6, #1
 80004ce:	0543      	lsls	r3, r0, #21
 80004d0:	0d5b      	lsrs	r3, r3, #21
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	dc00      	bgt.n	80004d8 <__aeabi_dadd+0x2a4>
 80004d6:	e0ad      	b.n	8000634 <__aeabi_dadd+0x400>
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <__aeabi_dadd+0x380>)
 80004da:	4298      	cmp	r0, r3
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dadd+0x2ac>
 80004de:	e0d1      	b.n	8000684 <__aeabi_dadd+0x450>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	42ba      	cmp	r2, r7
 80004e4:	41bf      	sbcs	r7, r7
 80004e6:	1864      	adds	r4, r4, r1
 80004e8:	427f      	negs	r7, r7
 80004ea:	19e4      	adds	r4, r4, r7
 80004ec:	07e7      	lsls	r7, r4, #31
 80004ee:	0852      	lsrs	r2, r2, #1
 80004f0:	4317      	orrs	r7, r2
 80004f2:	0864      	lsrs	r4, r4, #1
 80004f4:	0006      	movs	r6, r0
 80004f6:	e721      	b.n	800033c <__aeabi_dadd+0x108>
 80004f8:	482e      	ldr	r0, [pc, #184]	; (80005b4 <__aeabi_dadd+0x380>)
 80004fa:	4285      	cmp	r5, r0
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x2cc>
 80004fe:	e093      	b.n	8000628 <__aeabi_dadd+0x3f4>
 8000500:	001d      	movs	r5, r3
 8000502:	e6d0      	b.n	80002a6 <__aeabi_dadd+0x72>
 8000504:	0029      	movs	r1, r5
 8000506:	3e1f      	subs	r6, #31
 8000508:	40f1      	lsrs	r1, r6
 800050a:	2b20      	cmp	r3, #32
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x2dc>
 800050e:	e08d      	b.n	800062c <__aeabi_dadd+0x3f8>
 8000510:	2240      	movs	r2, #64	; 0x40
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	409d      	lsls	r5, r3
 8000516:	432f      	orrs	r7, r5
 8000518:	1e7d      	subs	r5, r7, #1
 800051a:	41af      	sbcs	r7, r5
 800051c:	2400      	movs	r4, #0
 800051e:	430f      	orrs	r7, r1
 8000520:	2600      	movs	r6, #0
 8000522:	e744      	b.n	80003ae <__aeabi_dadd+0x17a>
 8000524:	002b      	movs	r3, r5
 8000526:	0008      	movs	r0, r1
 8000528:	3b20      	subs	r3, #32
 800052a:	40d8      	lsrs	r0, r3
 800052c:	0003      	movs	r3, r0
 800052e:	2d20      	cmp	r5, #32
 8000530:	d100      	bne.n	8000534 <__aeabi_dadd+0x300>
 8000532:	e07d      	b.n	8000630 <__aeabi_dadd+0x3fc>
 8000534:	2040      	movs	r0, #64	; 0x40
 8000536:	1b45      	subs	r5, r0, r5
 8000538:	40a9      	lsls	r1, r5
 800053a:	430a      	orrs	r2, r1
 800053c:	1e51      	subs	r1, r2, #1
 800053e:	418a      	sbcs	r2, r1
 8000540:	2100      	movs	r1, #0
 8000542:	431a      	orrs	r2, r3
 8000544:	e6c7      	b.n	80002d6 <__aeabi_dadd+0xa2>
 8000546:	2e00      	cmp	r6, #0
 8000548:	d050      	beq.n	80005ec <__aeabi_dadd+0x3b8>
 800054a:	4e1a      	ldr	r6, [pc, #104]	; (80005b4 <__aeabi_dadd+0x380>)
 800054c:	42b0      	cmp	r0, r6
 800054e:	d057      	beq.n	8000600 <__aeabi_dadd+0x3cc>
 8000550:	2680      	movs	r6, #128	; 0x80
 8000552:	426b      	negs	r3, r5
 8000554:	4699      	mov	r9, r3
 8000556:	0436      	lsls	r6, r6, #16
 8000558:	4334      	orrs	r4, r6
 800055a:	464b      	mov	r3, r9
 800055c:	2b38      	cmp	r3, #56	; 0x38
 800055e:	dd00      	ble.n	8000562 <__aeabi_dadd+0x32e>
 8000560:	e0d6      	b.n	8000710 <__aeabi_dadd+0x4dc>
 8000562:	2b1f      	cmp	r3, #31
 8000564:	dd00      	ble.n	8000568 <__aeabi_dadd+0x334>
 8000566:	e135      	b.n	80007d4 <__aeabi_dadd+0x5a0>
 8000568:	2620      	movs	r6, #32
 800056a:	1af5      	subs	r5, r6, r3
 800056c:	0026      	movs	r6, r4
 800056e:	40ae      	lsls	r6, r5
 8000570:	46b2      	mov	sl, r6
 8000572:	003e      	movs	r6, r7
 8000574:	40de      	lsrs	r6, r3
 8000576:	46ac      	mov	ip, r5
 8000578:	0035      	movs	r5, r6
 800057a:	4656      	mov	r6, sl
 800057c:	432e      	orrs	r6, r5
 800057e:	4665      	mov	r5, ip
 8000580:	40af      	lsls	r7, r5
 8000582:	1e7d      	subs	r5, r7, #1
 8000584:	41af      	sbcs	r7, r5
 8000586:	40dc      	lsrs	r4, r3
 8000588:	4337      	orrs	r7, r6
 800058a:	1bd7      	subs	r7, r2, r7
 800058c:	42ba      	cmp	r2, r7
 800058e:	4192      	sbcs	r2, r2
 8000590:	1b0c      	subs	r4, r1, r4
 8000592:	4252      	negs	r2, r2
 8000594:	1aa4      	subs	r4, r4, r2
 8000596:	0006      	movs	r6, r0
 8000598:	46d8      	mov	r8, fp
 800059a:	e6a3      	b.n	80002e4 <__aeabi_dadd+0xb0>
 800059c:	4664      	mov	r4, ip
 800059e:	4667      	mov	r7, ip
 80005a0:	432c      	orrs	r4, r5
 80005a2:	d000      	beq.n	80005a6 <__aeabi_dadd+0x372>
 80005a4:	e6a2      	b.n	80002ec <__aeabi_dadd+0xb8>
 80005a6:	2500      	movs	r5, #0
 80005a8:	2600      	movs	r6, #0
 80005aa:	2700      	movs	r7, #0
 80005ac:	e706      	b.n	80003bc <__aeabi_dadd+0x188>
 80005ae:	001e      	movs	r6, r3
 80005b0:	e6c4      	b.n	800033c <__aeabi_dadd+0x108>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	000007ff 	.word	0x000007ff
 80005b8:	ff7fffff 	.word	0xff7fffff
 80005bc:	800fffff 	.word	0x800fffff
 80005c0:	2b1f      	cmp	r3, #31
 80005c2:	dc63      	bgt.n	800068c <__aeabi_dadd+0x458>
 80005c4:	2020      	movs	r0, #32
 80005c6:	1ac3      	subs	r3, r0, r3
 80005c8:	0008      	movs	r0, r1
 80005ca:	4098      	lsls	r0, r3
 80005cc:	469c      	mov	ip, r3
 80005ce:	4683      	mov	fp, r0
 80005d0:	4653      	mov	r3, sl
 80005d2:	0010      	movs	r0, r2
 80005d4:	40d8      	lsrs	r0, r3
 80005d6:	0003      	movs	r3, r0
 80005d8:	4658      	mov	r0, fp
 80005da:	4318      	orrs	r0, r3
 80005dc:	4663      	mov	r3, ip
 80005de:	409a      	lsls	r2, r3
 80005e0:	1e53      	subs	r3, r2, #1
 80005e2:	419a      	sbcs	r2, r3
 80005e4:	4653      	mov	r3, sl
 80005e6:	4302      	orrs	r2, r0
 80005e8:	40d9      	lsrs	r1, r3
 80005ea:	e703      	b.n	80003f4 <__aeabi_dadd+0x1c0>
 80005ec:	0026      	movs	r6, r4
 80005ee:	433e      	orrs	r6, r7
 80005f0:	d006      	beq.n	8000600 <__aeabi_dadd+0x3cc>
 80005f2:	43eb      	mvns	r3, r5
 80005f4:	4699      	mov	r9, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0c7      	beq.n	800058a <__aeabi_dadd+0x356>
 80005fa:	4e94      	ldr	r6, [pc, #592]	; (800084c <__aeabi_dadd+0x618>)
 80005fc:	42b0      	cmp	r0, r6
 80005fe:	d1ac      	bne.n	800055a <__aeabi_dadd+0x326>
 8000600:	000c      	movs	r4, r1
 8000602:	0017      	movs	r7, r2
 8000604:	0006      	movs	r6, r0
 8000606:	46d8      	mov	r8, fp
 8000608:	e698      	b.n	800033c <__aeabi_dadd+0x108>
 800060a:	4b90      	ldr	r3, [pc, #576]	; (800084c <__aeabi_dadd+0x618>)
 800060c:	459a      	cmp	sl, r3
 800060e:	d00b      	beq.n	8000628 <__aeabi_dadd+0x3f4>
 8000610:	4682      	mov	sl, r0
 8000612:	e6e7      	b.n	80003e4 <__aeabi_dadd+0x1b0>
 8000614:	2800      	cmp	r0, #0
 8000616:	d000      	beq.n	800061a <__aeabi_dadd+0x3e6>
 8000618:	e09e      	b.n	8000758 <__aeabi_dadd+0x524>
 800061a:	0018      	movs	r0, r3
 800061c:	4310      	orrs	r0, r2
 800061e:	d100      	bne.n	8000622 <__aeabi_dadd+0x3ee>
 8000620:	e0e9      	b.n	80007f6 <__aeabi_dadd+0x5c2>
 8000622:	001c      	movs	r4, r3
 8000624:	0017      	movs	r7, r2
 8000626:	46d8      	mov	r8, fp
 8000628:	4e88      	ldr	r6, [pc, #544]	; (800084c <__aeabi_dadd+0x618>)
 800062a:	e687      	b.n	800033c <__aeabi_dadd+0x108>
 800062c:	2500      	movs	r5, #0
 800062e:	e772      	b.n	8000516 <__aeabi_dadd+0x2e2>
 8000630:	2100      	movs	r1, #0
 8000632:	e782      	b.n	800053a <__aeabi_dadd+0x306>
 8000634:	0023      	movs	r3, r4
 8000636:	433b      	orrs	r3, r7
 8000638:	2e00      	cmp	r6, #0
 800063a:	d000      	beq.n	800063e <__aeabi_dadd+0x40a>
 800063c:	e0ab      	b.n	8000796 <__aeabi_dadd+0x562>
 800063e:	2b00      	cmp	r3, #0
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x410>
 8000642:	e0e7      	b.n	8000814 <__aeabi_dadd+0x5e0>
 8000644:	000b      	movs	r3, r1
 8000646:	4313      	orrs	r3, r2
 8000648:	d100      	bne.n	800064c <__aeabi_dadd+0x418>
 800064a:	e677      	b.n	800033c <__aeabi_dadd+0x108>
 800064c:	18ba      	adds	r2, r7, r2
 800064e:	42ba      	cmp	r2, r7
 8000650:	41bf      	sbcs	r7, r7
 8000652:	1864      	adds	r4, r4, r1
 8000654:	427f      	negs	r7, r7
 8000656:	19e4      	adds	r4, r4, r7
 8000658:	0223      	lsls	r3, r4, #8
 800065a:	d400      	bmi.n	800065e <__aeabi_dadd+0x42a>
 800065c:	e0f2      	b.n	8000844 <__aeabi_dadd+0x610>
 800065e:	4b7c      	ldr	r3, [pc, #496]	; (8000850 <__aeabi_dadd+0x61c>)
 8000660:	0017      	movs	r7, r2
 8000662:	401c      	ands	r4, r3
 8000664:	0006      	movs	r6, r0
 8000666:	e669      	b.n	800033c <__aeabi_dadd+0x108>
 8000668:	0020      	movs	r0, r4
 800066a:	4338      	orrs	r0, r7
 800066c:	2e00      	cmp	r6, #0
 800066e:	d1d1      	bne.n	8000614 <__aeabi_dadd+0x3e0>
 8000670:	2800      	cmp	r0, #0
 8000672:	d15b      	bne.n	800072c <__aeabi_dadd+0x4f8>
 8000674:	001c      	movs	r4, r3
 8000676:	4314      	orrs	r4, r2
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x448>
 800067a:	e0a8      	b.n	80007ce <__aeabi_dadd+0x59a>
 800067c:	001c      	movs	r4, r3
 800067e:	0017      	movs	r7, r2
 8000680:	46d8      	mov	r8, fp
 8000682:	e65b      	b.n	800033c <__aeabi_dadd+0x108>
 8000684:	0006      	movs	r6, r0
 8000686:	2400      	movs	r4, #0
 8000688:	2700      	movs	r7, #0
 800068a:	e697      	b.n	80003bc <__aeabi_dadd+0x188>
 800068c:	4650      	mov	r0, sl
 800068e:	000b      	movs	r3, r1
 8000690:	3820      	subs	r0, #32
 8000692:	40c3      	lsrs	r3, r0
 8000694:	4699      	mov	r9, r3
 8000696:	4653      	mov	r3, sl
 8000698:	2b20      	cmp	r3, #32
 800069a:	d100      	bne.n	800069e <__aeabi_dadd+0x46a>
 800069c:	e095      	b.n	80007ca <__aeabi_dadd+0x596>
 800069e:	2340      	movs	r3, #64	; 0x40
 80006a0:	4650      	mov	r0, sl
 80006a2:	1a1b      	subs	r3, r3, r0
 80006a4:	4099      	lsls	r1, r3
 80006a6:	430a      	orrs	r2, r1
 80006a8:	1e51      	subs	r1, r2, #1
 80006aa:	418a      	sbcs	r2, r1
 80006ac:	464b      	mov	r3, r9
 80006ae:	2100      	movs	r1, #0
 80006b0:	431a      	orrs	r2, r3
 80006b2:	e69f      	b.n	80003f4 <__aeabi_dadd+0x1c0>
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d130      	bne.n	800071a <__aeabi_dadd+0x4e6>
 80006b8:	0026      	movs	r6, r4
 80006ba:	433e      	orrs	r6, r7
 80006bc:	d067      	beq.n	800078e <__aeabi_dadd+0x55a>
 80006be:	43db      	mvns	r3, r3
 80006c0:	469a      	mov	sl, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d01c      	beq.n	8000700 <__aeabi_dadd+0x4cc>
 80006c6:	4e61      	ldr	r6, [pc, #388]	; (800084c <__aeabi_dadd+0x618>)
 80006c8:	42b0      	cmp	r0, r6
 80006ca:	d060      	beq.n	800078e <__aeabi_dadd+0x55a>
 80006cc:	4653      	mov	r3, sl
 80006ce:	2b38      	cmp	r3, #56	; 0x38
 80006d0:	dd00      	ble.n	80006d4 <__aeabi_dadd+0x4a0>
 80006d2:	e096      	b.n	8000802 <__aeabi_dadd+0x5ce>
 80006d4:	2b1f      	cmp	r3, #31
 80006d6:	dd00      	ble.n	80006da <__aeabi_dadd+0x4a6>
 80006d8:	e09f      	b.n	800081a <__aeabi_dadd+0x5e6>
 80006da:	2620      	movs	r6, #32
 80006dc:	1af3      	subs	r3, r6, r3
 80006de:	0026      	movs	r6, r4
 80006e0:	409e      	lsls	r6, r3
 80006e2:	469c      	mov	ip, r3
 80006e4:	46b3      	mov	fp, r6
 80006e6:	4653      	mov	r3, sl
 80006e8:	003e      	movs	r6, r7
 80006ea:	40de      	lsrs	r6, r3
 80006ec:	0033      	movs	r3, r6
 80006ee:	465e      	mov	r6, fp
 80006f0:	431e      	orrs	r6, r3
 80006f2:	4663      	mov	r3, ip
 80006f4:	409f      	lsls	r7, r3
 80006f6:	1e7b      	subs	r3, r7, #1
 80006f8:	419f      	sbcs	r7, r3
 80006fa:	4653      	mov	r3, sl
 80006fc:	40dc      	lsrs	r4, r3
 80006fe:	4337      	orrs	r7, r6
 8000700:	18bf      	adds	r7, r7, r2
 8000702:	4297      	cmp	r7, r2
 8000704:	4192      	sbcs	r2, r2
 8000706:	1864      	adds	r4, r4, r1
 8000708:	4252      	negs	r2, r2
 800070a:	18a4      	adds	r4, r4, r2
 800070c:	0006      	movs	r6, r0
 800070e:	e678      	b.n	8000402 <__aeabi_dadd+0x1ce>
 8000710:	4327      	orrs	r7, r4
 8000712:	1e7c      	subs	r4, r7, #1
 8000714:	41a7      	sbcs	r7, r4
 8000716:	2400      	movs	r4, #0
 8000718:	e737      	b.n	800058a <__aeabi_dadd+0x356>
 800071a:	4e4c      	ldr	r6, [pc, #304]	; (800084c <__aeabi_dadd+0x618>)
 800071c:	42b0      	cmp	r0, r6
 800071e:	d036      	beq.n	800078e <__aeabi_dadd+0x55a>
 8000720:	2680      	movs	r6, #128	; 0x80
 8000722:	425b      	negs	r3, r3
 8000724:	0436      	lsls	r6, r6, #16
 8000726:	469a      	mov	sl, r3
 8000728:	4334      	orrs	r4, r6
 800072a:	e7cf      	b.n	80006cc <__aeabi_dadd+0x498>
 800072c:	0018      	movs	r0, r3
 800072e:	4310      	orrs	r0, r2
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x500>
 8000732:	e603      	b.n	800033c <__aeabi_dadd+0x108>
 8000734:	1ab8      	subs	r0, r7, r2
 8000736:	4684      	mov	ip, r0
 8000738:	4567      	cmp	r7, ip
 800073a:	41ad      	sbcs	r5, r5
 800073c:	1ae0      	subs	r0, r4, r3
 800073e:	426d      	negs	r5, r5
 8000740:	1b40      	subs	r0, r0, r5
 8000742:	0205      	lsls	r5, r0, #8
 8000744:	d400      	bmi.n	8000748 <__aeabi_dadd+0x514>
 8000746:	e62c      	b.n	80003a2 <__aeabi_dadd+0x16e>
 8000748:	1bd7      	subs	r7, r2, r7
 800074a:	42ba      	cmp	r2, r7
 800074c:	4192      	sbcs	r2, r2
 800074e:	1b1c      	subs	r4, r3, r4
 8000750:	4252      	negs	r2, r2
 8000752:	1aa4      	subs	r4, r4, r2
 8000754:	46d8      	mov	r8, fp
 8000756:	e5f1      	b.n	800033c <__aeabi_dadd+0x108>
 8000758:	0018      	movs	r0, r3
 800075a:	4310      	orrs	r0, r2
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x52c>
 800075e:	e763      	b.n	8000628 <__aeabi_dadd+0x3f4>
 8000760:	08f8      	lsrs	r0, r7, #3
 8000762:	0767      	lsls	r7, r4, #29
 8000764:	4307      	orrs	r7, r0
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	08e4      	lsrs	r4, r4, #3
 800076a:	0300      	lsls	r0, r0, #12
 800076c:	4204      	tst	r4, r0
 800076e:	d008      	beq.n	8000782 <__aeabi_dadd+0x54e>
 8000770:	08dd      	lsrs	r5, r3, #3
 8000772:	4205      	tst	r5, r0
 8000774:	d105      	bne.n	8000782 <__aeabi_dadd+0x54e>
 8000776:	08d2      	lsrs	r2, r2, #3
 8000778:	0759      	lsls	r1, r3, #29
 800077a:	4311      	orrs	r1, r2
 800077c:	000f      	movs	r7, r1
 800077e:	002c      	movs	r4, r5
 8000780:	46d8      	mov	r8, fp
 8000782:	0f7b      	lsrs	r3, r7, #29
 8000784:	00e4      	lsls	r4, r4, #3
 8000786:	431c      	orrs	r4, r3
 8000788:	00ff      	lsls	r7, r7, #3
 800078a:	4e30      	ldr	r6, [pc, #192]	; (800084c <__aeabi_dadd+0x618>)
 800078c:	e5d6      	b.n	800033c <__aeabi_dadd+0x108>
 800078e:	000c      	movs	r4, r1
 8000790:	0017      	movs	r7, r2
 8000792:	0006      	movs	r6, r0
 8000794:	e5d2      	b.n	800033c <__aeabi_dadd+0x108>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d038      	beq.n	800080c <__aeabi_dadd+0x5d8>
 800079a:	000b      	movs	r3, r1
 800079c:	4313      	orrs	r3, r2
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x56e>
 80007a0:	e742      	b.n	8000628 <__aeabi_dadd+0x3f4>
 80007a2:	08f8      	lsrs	r0, r7, #3
 80007a4:	0767      	lsls	r7, r4, #29
 80007a6:	4307      	orrs	r7, r0
 80007a8:	2080      	movs	r0, #128	; 0x80
 80007aa:	08e4      	lsrs	r4, r4, #3
 80007ac:	0300      	lsls	r0, r0, #12
 80007ae:	4204      	tst	r4, r0
 80007b0:	d0e7      	beq.n	8000782 <__aeabi_dadd+0x54e>
 80007b2:	08cb      	lsrs	r3, r1, #3
 80007b4:	4203      	tst	r3, r0
 80007b6:	d1e4      	bne.n	8000782 <__aeabi_dadd+0x54e>
 80007b8:	08d2      	lsrs	r2, r2, #3
 80007ba:	0749      	lsls	r1, r1, #29
 80007bc:	4311      	orrs	r1, r2
 80007be:	000f      	movs	r7, r1
 80007c0:	001c      	movs	r4, r3
 80007c2:	e7de      	b.n	8000782 <__aeabi_dadd+0x54e>
 80007c4:	2700      	movs	r7, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	e5d5      	b.n	8000376 <__aeabi_dadd+0x142>
 80007ca:	2100      	movs	r1, #0
 80007cc:	e76b      	b.n	80006a6 <__aeabi_dadd+0x472>
 80007ce:	2500      	movs	r5, #0
 80007d0:	2700      	movs	r7, #0
 80007d2:	e5f3      	b.n	80003bc <__aeabi_dadd+0x188>
 80007d4:	464e      	mov	r6, r9
 80007d6:	0025      	movs	r5, r4
 80007d8:	3e20      	subs	r6, #32
 80007da:	40f5      	lsrs	r5, r6
 80007dc:	464b      	mov	r3, r9
 80007de:	002e      	movs	r6, r5
 80007e0:	2b20      	cmp	r3, #32
 80007e2:	d02d      	beq.n	8000840 <__aeabi_dadd+0x60c>
 80007e4:	2540      	movs	r5, #64	; 0x40
 80007e6:	1aed      	subs	r5, r5, r3
 80007e8:	40ac      	lsls	r4, r5
 80007ea:	4327      	orrs	r7, r4
 80007ec:	1e7c      	subs	r4, r7, #1
 80007ee:	41a7      	sbcs	r7, r4
 80007f0:	2400      	movs	r4, #0
 80007f2:	4337      	orrs	r7, r6
 80007f4:	e6c9      	b.n	800058a <__aeabi_dadd+0x356>
 80007f6:	2480      	movs	r4, #128	; 0x80
 80007f8:	2500      	movs	r5, #0
 80007fa:	0324      	lsls	r4, r4, #12
 80007fc:	4e13      	ldr	r6, [pc, #76]	; (800084c <__aeabi_dadd+0x618>)
 80007fe:	2700      	movs	r7, #0
 8000800:	e5dc      	b.n	80003bc <__aeabi_dadd+0x188>
 8000802:	4327      	orrs	r7, r4
 8000804:	1e7c      	subs	r4, r7, #1
 8000806:	41a7      	sbcs	r7, r4
 8000808:	2400      	movs	r4, #0
 800080a:	e779      	b.n	8000700 <__aeabi_dadd+0x4cc>
 800080c:	000c      	movs	r4, r1
 800080e:	0017      	movs	r7, r2
 8000810:	4e0e      	ldr	r6, [pc, #56]	; (800084c <__aeabi_dadd+0x618>)
 8000812:	e593      	b.n	800033c <__aeabi_dadd+0x108>
 8000814:	000c      	movs	r4, r1
 8000816:	0017      	movs	r7, r2
 8000818:	e590      	b.n	800033c <__aeabi_dadd+0x108>
 800081a:	4656      	mov	r6, sl
 800081c:	0023      	movs	r3, r4
 800081e:	3e20      	subs	r6, #32
 8000820:	40f3      	lsrs	r3, r6
 8000822:	4699      	mov	r9, r3
 8000824:	4653      	mov	r3, sl
 8000826:	2b20      	cmp	r3, #32
 8000828:	d00e      	beq.n	8000848 <__aeabi_dadd+0x614>
 800082a:	2340      	movs	r3, #64	; 0x40
 800082c:	4656      	mov	r6, sl
 800082e:	1b9b      	subs	r3, r3, r6
 8000830:	409c      	lsls	r4, r3
 8000832:	4327      	orrs	r7, r4
 8000834:	1e7c      	subs	r4, r7, #1
 8000836:	41a7      	sbcs	r7, r4
 8000838:	464b      	mov	r3, r9
 800083a:	2400      	movs	r4, #0
 800083c:	431f      	orrs	r7, r3
 800083e:	e75f      	b.n	8000700 <__aeabi_dadd+0x4cc>
 8000840:	2400      	movs	r4, #0
 8000842:	e7d2      	b.n	80007ea <__aeabi_dadd+0x5b6>
 8000844:	0017      	movs	r7, r2
 8000846:	e5b2      	b.n	80003ae <__aeabi_dadd+0x17a>
 8000848:	2400      	movs	r4, #0
 800084a:	e7f2      	b.n	8000832 <__aeabi_dadd+0x5fe>
 800084c:	000007ff 	.word	0x000007ff
 8000850:	ff7fffff 	.word	0xff7fffff

08000854 <__aeabi_dmul>:
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	4657      	mov	r7, sl
 8000858:	4645      	mov	r5, r8
 800085a:	46de      	mov	lr, fp
 800085c:	464e      	mov	r6, r9
 800085e:	b5e0      	push	{r5, r6, r7, lr}
 8000860:	030c      	lsls	r4, r1, #12
 8000862:	4698      	mov	r8, r3
 8000864:	004e      	lsls	r6, r1, #1
 8000866:	0b23      	lsrs	r3, r4, #12
 8000868:	b087      	sub	sp, #28
 800086a:	0007      	movs	r7, r0
 800086c:	4692      	mov	sl, r2
 800086e:	469b      	mov	fp, r3
 8000870:	0d76      	lsrs	r6, r6, #21
 8000872:	0fcd      	lsrs	r5, r1, #31
 8000874:	2e00      	cmp	r6, #0
 8000876:	d06b      	beq.n	8000950 <__aeabi_dmul+0xfc>
 8000878:	4b6d      	ldr	r3, [pc, #436]	; (8000a30 <__aeabi_dmul+0x1dc>)
 800087a:	429e      	cmp	r6, r3
 800087c:	d035      	beq.n	80008ea <__aeabi_dmul+0x96>
 800087e:	2480      	movs	r4, #128	; 0x80
 8000880:	465b      	mov	r3, fp
 8000882:	0f42      	lsrs	r2, r0, #29
 8000884:	0424      	lsls	r4, r4, #16
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	4314      	orrs	r4, r2
 800088a:	431c      	orrs	r4, r3
 800088c:	00c3      	lsls	r3, r0, #3
 800088e:	4699      	mov	r9, r3
 8000890:	4b68      	ldr	r3, [pc, #416]	; (8000a34 <__aeabi_dmul+0x1e0>)
 8000892:	46a3      	mov	fp, r4
 8000894:	469c      	mov	ip, r3
 8000896:	2300      	movs	r3, #0
 8000898:	2700      	movs	r7, #0
 800089a:	4466      	add	r6, ip
 800089c:	9302      	str	r3, [sp, #8]
 800089e:	4643      	mov	r3, r8
 80008a0:	031c      	lsls	r4, r3, #12
 80008a2:	005a      	lsls	r2, r3, #1
 80008a4:	0fdb      	lsrs	r3, r3, #31
 80008a6:	4650      	mov	r0, sl
 80008a8:	0b24      	lsrs	r4, r4, #12
 80008aa:	0d52      	lsrs	r2, r2, #21
 80008ac:	4698      	mov	r8, r3
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dmul+0x5e>
 80008b0:	e076      	b.n	80009a0 <__aeabi_dmul+0x14c>
 80008b2:	4b5f      	ldr	r3, [pc, #380]	; (8000a30 <__aeabi_dmul+0x1dc>)
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d06d      	beq.n	8000994 <__aeabi_dmul+0x140>
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	0f41      	lsrs	r1, r0, #29
 80008bc:	041b      	lsls	r3, r3, #16
 80008be:	430b      	orrs	r3, r1
 80008c0:	495c      	ldr	r1, [pc, #368]	; (8000a34 <__aeabi_dmul+0x1e0>)
 80008c2:	00e4      	lsls	r4, r4, #3
 80008c4:	468c      	mov	ip, r1
 80008c6:	431c      	orrs	r4, r3
 80008c8:	00c3      	lsls	r3, r0, #3
 80008ca:	2000      	movs	r0, #0
 80008cc:	4462      	add	r2, ip
 80008ce:	4641      	mov	r1, r8
 80008d0:	18b6      	adds	r6, r6, r2
 80008d2:	4069      	eors	r1, r5
 80008d4:	1c72      	adds	r2, r6, #1
 80008d6:	9101      	str	r1, [sp, #4]
 80008d8:	4694      	mov	ip, r2
 80008da:	4307      	orrs	r7, r0
 80008dc:	2f0f      	cmp	r7, #15
 80008de:	d900      	bls.n	80008e2 <__aeabi_dmul+0x8e>
 80008e0:	e0b0      	b.n	8000a44 <__aeabi_dmul+0x1f0>
 80008e2:	4a55      	ldr	r2, [pc, #340]	; (8000a38 <__aeabi_dmul+0x1e4>)
 80008e4:	00bf      	lsls	r7, r7, #2
 80008e6:	59d2      	ldr	r2, [r2, r7]
 80008e8:	4697      	mov	pc, r2
 80008ea:	465b      	mov	r3, fp
 80008ec:	4303      	orrs	r3, r0
 80008ee:	4699      	mov	r9, r3
 80008f0:	d000      	beq.n	80008f4 <__aeabi_dmul+0xa0>
 80008f2:	e087      	b.n	8000a04 <__aeabi_dmul+0x1b0>
 80008f4:	2300      	movs	r3, #0
 80008f6:	469b      	mov	fp, r3
 80008f8:	3302      	adds	r3, #2
 80008fa:	2708      	movs	r7, #8
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	e7ce      	b.n	800089e <__aeabi_dmul+0x4a>
 8000900:	4642      	mov	r2, r8
 8000902:	9201      	str	r2, [sp, #4]
 8000904:	2802      	cmp	r0, #2
 8000906:	d067      	beq.n	80009d8 <__aeabi_dmul+0x184>
 8000908:	2803      	cmp	r0, #3
 800090a:	d100      	bne.n	800090e <__aeabi_dmul+0xba>
 800090c:	e20e      	b.n	8000d2c <__aeabi_dmul+0x4d8>
 800090e:	2801      	cmp	r0, #1
 8000910:	d000      	beq.n	8000914 <__aeabi_dmul+0xc0>
 8000912:	e162      	b.n	8000bda <__aeabi_dmul+0x386>
 8000914:	2300      	movs	r3, #0
 8000916:	2400      	movs	r4, #0
 8000918:	2200      	movs	r2, #0
 800091a:	4699      	mov	r9, r3
 800091c:	9901      	ldr	r1, [sp, #4]
 800091e:	4001      	ands	r1, r0
 8000920:	b2cd      	uxtb	r5, r1
 8000922:	2100      	movs	r1, #0
 8000924:	0312      	lsls	r2, r2, #12
 8000926:	0d0b      	lsrs	r3, r1, #20
 8000928:	0b12      	lsrs	r2, r2, #12
 800092a:	051b      	lsls	r3, r3, #20
 800092c:	4313      	orrs	r3, r2
 800092e:	4a43      	ldr	r2, [pc, #268]	; (8000a3c <__aeabi_dmul+0x1e8>)
 8000930:	0524      	lsls	r4, r4, #20
 8000932:	4013      	ands	r3, r2
 8000934:	431c      	orrs	r4, r3
 8000936:	0064      	lsls	r4, r4, #1
 8000938:	07ed      	lsls	r5, r5, #31
 800093a:	0864      	lsrs	r4, r4, #1
 800093c:	432c      	orrs	r4, r5
 800093e:	4648      	mov	r0, r9
 8000940:	0021      	movs	r1, r4
 8000942:	b007      	add	sp, #28
 8000944:	bc3c      	pop	{r2, r3, r4, r5}
 8000946:	4690      	mov	r8, r2
 8000948:	4699      	mov	r9, r3
 800094a:	46a2      	mov	sl, r4
 800094c:	46ab      	mov	fp, r5
 800094e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000950:	4303      	orrs	r3, r0
 8000952:	4699      	mov	r9, r3
 8000954:	d04f      	beq.n	80009f6 <__aeabi_dmul+0x1a2>
 8000956:	465b      	mov	r3, fp
 8000958:	2b00      	cmp	r3, #0
 800095a:	d100      	bne.n	800095e <__aeabi_dmul+0x10a>
 800095c:	e189      	b.n	8000c72 <__aeabi_dmul+0x41e>
 800095e:	4658      	mov	r0, fp
 8000960:	f000 fb4a 	bl	8000ff8 <__clzsi2>
 8000964:	0003      	movs	r3, r0
 8000966:	3b0b      	subs	r3, #11
 8000968:	2b1c      	cmp	r3, #28
 800096a:	dd00      	ble.n	800096e <__aeabi_dmul+0x11a>
 800096c:	e17a      	b.n	8000c64 <__aeabi_dmul+0x410>
 800096e:	221d      	movs	r2, #29
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	003a      	movs	r2, r7
 8000974:	0001      	movs	r1, r0
 8000976:	465c      	mov	r4, fp
 8000978:	40da      	lsrs	r2, r3
 800097a:	3908      	subs	r1, #8
 800097c:	408c      	lsls	r4, r1
 800097e:	0013      	movs	r3, r2
 8000980:	408f      	lsls	r7, r1
 8000982:	4323      	orrs	r3, r4
 8000984:	469b      	mov	fp, r3
 8000986:	46b9      	mov	r9, r7
 8000988:	2300      	movs	r3, #0
 800098a:	4e2d      	ldr	r6, [pc, #180]	; (8000a40 <__aeabi_dmul+0x1ec>)
 800098c:	2700      	movs	r7, #0
 800098e:	1a36      	subs	r6, r6, r0
 8000990:	9302      	str	r3, [sp, #8]
 8000992:	e784      	b.n	800089e <__aeabi_dmul+0x4a>
 8000994:	4653      	mov	r3, sl
 8000996:	4323      	orrs	r3, r4
 8000998:	d12a      	bne.n	80009f0 <__aeabi_dmul+0x19c>
 800099a:	2400      	movs	r4, #0
 800099c:	2002      	movs	r0, #2
 800099e:	e796      	b.n	80008ce <__aeabi_dmul+0x7a>
 80009a0:	4653      	mov	r3, sl
 80009a2:	4323      	orrs	r3, r4
 80009a4:	d020      	beq.n	80009e8 <__aeabi_dmul+0x194>
 80009a6:	2c00      	cmp	r4, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_dmul+0x158>
 80009aa:	e157      	b.n	8000c5c <__aeabi_dmul+0x408>
 80009ac:	0020      	movs	r0, r4
 80009ae:	f000 fb23 	bl	8000ff8 <__clzsi2>
 80009b2:	0003      	movs	r3, r0
 80009b4:	3b0b      	subs	r3, #11
 80009b6:	2b1c      	cmp	r3, #28
 80009b8:	dd00      	ble.n	80009bc <__aeabi_dmul+0x168>
 80009ba:	e149      	b.n	8000c50 <__aeabi_dmul+0x3fc>
 80009bc:	211d      	movs	r1, #29
 80009be:	1acb      	subs	r3, r1, r3
 80009c0:	4651      	mov	r1, sl
 80009c2:	0002      	movs	r2, r0
 80009c4:	40d9      	lsrs	r1, r3
 80009c6:	4653      	mov	r3, sl
 80009c8:	3a08      	subs	r2, #8
 80009ca:	4094      	lsls	r4, r2
 80009cc:	4093      	lsls	r3, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <__aeabi_dmul+0x1ec>)
 80009d2:	1a12      	subs	r2, r2, r0
 80009d4:	2000      	movs	r0, #0
 80009d6:	e77a      	b.n	80008ce <__aeabi_dmul+0x7a>
 80009d8:	2501      	movs	r5, #1
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	4c14      	ldr	r4, [pc, #80]	; (8000a30 <__aeabi_dmul+0x1dc>)
 80009de:	401d      	ands	r5, r3
 80009e0:	2300      	movs	r3, #0
 80009e2:	2200      	movs	r2, #0
 80009e4:	4699      	mov	r9, r3
 80009e6:	e79c      	b.n	8000922 <__aeabi_dmul+0xce>
 80009e8:	2400      	movs	r4, #0
 80009ea:	2200      	movs	r2, #0
 80009ec:	2001      	movs	r0, #1
 80009ee:	e76e      	b.n	80008ce <__aeabi_dmul+0x7a>
 80009f0:	4653      	mov	r3, sl
 80009f2:	2003      	movs	r0, #3
 80009f4:	e76b      	b.n	80008ce <__aeabi_dmul+0x7a>
 80009f6:	2300      	movs	r3, #0
 80009f8:	469b      	mov	fp, r3
 80009fa:	3301      	adds	r3, #1
 80009fc:	2704      	movs	r7, #4
 80009fe:	2600      	movs	r6, #0
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	e74c      	b.n	800089e <__aeabi_dmul+0x4a>
 8000a04:	2303      	movs	r3, #3
 8000a06:	4681      	mov	r9, r0
 8000a08:	270c      	movs	r7, #12
 8000a0a:	9302      	str	r3, [sp, #8]
 8000a0c:	e747      	b.n	800089e <__aeabi_dmul+0x4a>
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	2300      	movs	r3, #0
 8000a12:	2500      	movs	r5, #0
 8000a14:	0312      	lsls	r2, r2, #12
 8000a16:	4699      	mov	r9, r3
 8000a18:	4c05      	ldr	r4, [pc, #20]	; (8000a30 <__aeabi_dmul+0x1dc>)
 8000a1a:	e782      	b.n	8000922 <__aeabi_dmul+0xce>
 8000a1c:	465c      	mov	r4, fp
 8000a1e:	464b      	mov	r3, r9
 8000a20:	9802      	ldr	r0, [sp, #8]
 8000a22:	e76f      	b.n	8000904 <__aeabi_dmul+0xb0>
 8000a24:	465c      	mov	r4, fp
 8000a26:	464b      	mov	r3, r9
 8000a28:	9501      	str	r5, [sp, #4]
 8000a2a:	9802      	ldr	r0, [sp, #8]
 8000a2c:	e76a      	b.n	8000904 <__aeabi_dmul+0xb0>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	000007ff 	.word	0x000007ff
 8000a34:	fffffc01 	.word	0xfffffc01
 8000a38:	0800302c 	.word	0x0800302c
 8000a3c:	800fffff 	.word	0x800fffff
 8000a40:	fffffc0d 	.word	0xfffffc0d
 8000a44:	464a      	mov	r2, r9
 8000a46:	4649      	mov	r1, r9
 8000a48:	0c17      	lsrs	r7, r2, #16
 8000a4a:	0c1a      	lsrs	r2, r3, #16
 8000a4c:	041b      	lsls	r3, r3, #16
 8000a4e:	0c1b      	lsrs	r3, r3, #16
 8000a50:	0408      	lsls	r0, r1, #16
 8000a52:	0019      	movs	r1, r3
 8000a54:	0c00      	lsrs	r0, r0, #16
 8000a56:	4341      	muls	r1, r0
 8000a58:	0015      	movs	r5, r2
 8000a5a:	4688      	mov	r8, r1
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	437d      	muls	r5, r7
 8000a60:	4379      	muls	r1, r7
 8000a62:	9503      	str	r5, [sp, #12]
 8000a64:	4689      	mov	r9, r1
 8000a66:	0029      	movs	r1, r5
 8000a68:	0015      	movs	r5, r2
 8000a6a:	4345      	muls	r5, r0
 8000a6c:	444d      	add	r5, r9
 8000a6e:	9502      	str	r5, [sp, #8]
 8000a70:	4645      	mov	r5, r8
 8000a72:	0c2d      	lsrs	r5, r5, #16
 8000a74:	46aa      	mov	sl, r5
 8000a76:	9d02      	ldr	r5, [sp, #8]
 8000a78:	4455      	add	r5, sl
 8000a7a:	45a9      	cmp	r9, r5
 8000a7c:	d906      	bls.n	8000a8c <__aeabi_dmul+0x238>
 8000a7e:	468a      	mov	sl, r1
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0249      	lsls	r1, r1, #9
 8000a84:	4689      	mov	r9, r1
 8000a86:	44ca      	add	sl, r9
 8000a88:	4651      	mov	r1, sl
 8000a8a:	9103      	str	r1, [sp, #12]
 8000a8c:	0c29      	lsrs	r1, r5, #16
 8000a8e:	9104      	str	r1, [sp, #16]
 8000a90:	4641      	mov	r1, r8
 8000a92:	0409      	lsls	r1, r1, #16
 8000a94:	042d      	lsls	r5, r5, #16
 8000a96:	0c09      	lsrs	r1, r1, #16
 8000a98:	4688      	mov	r8, r1
 8000a9a:	0029      	movs	r1, r5
 8000a9c:	0c25      	lsrs	r5, r4, #16
 8000a9e:	0424      	lsls	r4, r4, #16
 8000aa0:	4441      	add	r1, r8
 8000aa2:	0c24      	lsrs	r4, r4, #16
 8000aa4:	9105      	str	r1, [sp, #20]
 8000aa6:	0021      	movs	r1, r4
 8000aa8:	4341      	muls	r1, r0
 8000aaa:	4688      	mov	r8, r1
 8000aac:	0021      	movs	r1, r4
 8000aae:	4379      	muls	r1, r7
 8000ab0:	468a      	mov	sl, r1
 8000ab2:	4368      	muls	r0, r5
 8000ab4:	4641      	mov	r1, r8
 8000ab6:	4450      	add	r0, sl
 8000ab8:	4681      	mov	r9, r0
 8000aba:	0c08      	lsrs	r0, r1, #16
 8000abc:	4448      	add	r0, r9
 8000abe:	436f      	muls	r7, r5
 8000ac0:	4582      	cmp	sl, r0
 8000ac2:	d903      	bls.n	8000acc <__aeabi_dmul+0x278>
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0249      	lsls	r1, r1, #9
 8000ac8:	4689      	mov	r9, r1
 8000aca:	444f      	add	r7, r9
 8000acc:	0c01      	lsrs	r1, r0, #16
 8000ace:	4689      	mov	r9, r1
 8000ad0:	0039      	movs	r1, r7
 8000ad2:	4449      	add	r1, r9
 8000ad4:	9102      	str	r1, [sp, #8]
 8000ad6:	4641      	mov	r1, r8
 8000ad8:	040f      	lsls	r7, r1, #16
 8000ada:	9904      	ldr	r1, [sp, #16]
 8000adc:	0c3f      	lsrs	r7, r7, #16
 8000ade:	4688      	mov	r8, r1
 8000ae0:	0400      	lsls	r0, r0, #16
 8000ae2:	19c0      	adds	r0, r0, r7
 8000ae4:	4480      	add	r8, r0
 8000ae6:	4641      	mov	r1, r8
 8000ae8:	9104      	str	r1, [sp, #16]
 8000aea:	4659      	mov	r1, fp
 8000aec:	0c0f      	lsrs	r7, r1, #16
 8000aee:	0409      	lsls	r1, r1, #16
 8000af0:	0c09      	lsrs	r1, r1, #16
 8000af2:	4688      	mov	r8, r1
 8000af4:	4359      	muls	r1, r3
 8000af6:	468a      	mov	sl, r1
 8000af8:	0039      	movs	r1, r7
 8000afa:	4351      	muls	r1, r2
 8000afc:	4689      	mov	r9, r1
 8000afe:	4641      	mov	r1, r8
 8000b00:	434a      	muls	r2, r1
 8000b02:	4651      	mov	r1, sl
 8000b04:	0c09      	lsrs	r1, r1, #16
 8000b06:	468b      	mov	fp, r1
 8000b08:	437b      	muls	r3, r7
 8000b0a:	18d2      	adds	r2, r2, r3
 8000b0c:	445a      	add	r2, fp
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d903      	bls.n	8000b1a <__aeabi_dmul+0x2c6>
 8000b12:	2380      	movs	r3, #128	; 0x80
 8000b14:	025b      	lsls	r3, r3, #9
 8000b16:	469b      	mov	fp, r3
 8000b18:	44d9      	add	r9, fp
 8000b1a:	4651      	mov	r1, sl
 8000b1c:	0409      	lsls	r1, r1, #16
 8000b1e:	0c09      	lsrs	r1, r1, #16
 8000b20:	468a      	mov	sl, r1
 8000b22:	4641      	mov	r1, r8
 8000b24:	4361      	muls	r1, r4
 8000b26:	437c      	muls	r4, r7
 8000b28:	0c13      	lsrs	r3, r2, #16
 8000b2a:	0412      	lsls	r2, r2, #16
 8000b2c:	444b      	add	r3, r9
 8000b2e:	4452      	add	r2, sl
 8000b30:	46a1      	mov	r9, r4
 8000b32:	468a      	mov	sl, r1
 8000b34:	003c      	movs	r4, r7
 8000b36:	4641      	mov	r1, r8
 8000b38:	436c      	muls	r4, r5
 8000b3a:	434d      	muls	r5, r1
 8000b3c:	4651      	mov	r1, sl
 8000b3e:	444d      	add	r5, r9
 8000b40:	0c0f      	lsrs	r7, r1, #16
 8000b42:	197d      	adds	r5, r7, r5
 8000b44:	45a9      	cmp	r9, r5
 8000b46:	d903      	bls.n	8000b50 <__aeabi_dmul+0x2fc>
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	0249      	lsls	r1, r1, #9
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	4444      	add	r4, r8
 8000b50:	9f04      	ldr	r7, [sp, #16]
 8000b52:	9903      	ldr	r1, [sp, #12]
 8000b54:	46b8      	mov	r8, r7
 8000b56:	4441      	add	r1, r8
 8000b58:	468b      	mov	fp, r1
 8000b5a:	4583      	cmp	fp, r0
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	4241      	negs	r1, r0
 8000b60:	4688      	mov	r8, r1
 8000b62:	4651      	mov	r1, sl
 8000b64:	0408      	lsls	r0, r1, #16
 8000b66:	042f      	lsls	r7, r5, #16
 8000b68:	0c00      	lsrs	r0, r0, #16
 8000b6a:	183f      	adds	r7, r7, r0
 8000b6c:	4658      	mov	r0, fp
 8000b6e:	9902      	ldr	r1, [sp, #8]
 8000b70:	1810      	adds	r0, r2, r0
 8000b72:	4689      	mov	r9, r1
 8000b74:	4290      	cmp	r0, r2
 8000b76:	4192      	sbcs	r2, r2
 8000b78:	444f      	add	r7, r9
 8000b7a:	46ba      	mov	sl, r7
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	4693      	mov	fp, r2
 8000b82:	44c2      	add	sl, r8
 8000b84:	44d1      	add	r9, sl
 8000b86:	44cb      	add	fp, r9
 8000b88:	428f      	cmp	r7, r1
 8000b8a:	41bf      	sbcs	r7, r7
 8000b8c:	45c2      	cmp	sl, r8
 8000b8e:	4189      	sbcs	r1, r1
 8000b90:	4599      	cmp	r9, r3
 8000b92:	419b      	sbcs	r3, r3
 8000b94:	4593      	cmp	fp, r2
 8000b96:	4192      	sbcs	r2, r2
 8000b98:	427f      	negs	r7, r7
 8000b9a:	4249      	negs	r1, r1
 8000b9c:	0c2d      	lsrs	r5, r5, #16
 8000b9e:	4252      	negs	r2, r2
 8000ba0:	430f      	orrs	r7, r1
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	197f      	adds	r7, r7, r5
 8000ba8:	18ff      	adds	r7, r7, r3
 8000baa:	465b      	mov	r3, fp
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	0ddb      	lsrs	r3, r3, #23
 8000bb0:	9a05      	ldr	r2, [sp, #20]
 8000bb2:	0264      	lsls	r4, r4, #9
 8000bb4:	431c      	orrs	r4, r3
 8000bb6:	0243      	lsls	r3, r0, #9
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	1e5d      	subs	r5, r3, #1
 8000bbc:	41ab      	sbcs	r3, r5
 8000bbe:	465a      	mov	r2, fp
 8000bc0:	0dc0      	lsrs	r0, r0, #23
 8000bc2:	4303      	orrs	r3, r0
 8000bc4:	0252      	lsls	r2, r2, #9
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	01e2      	lsls	r2, r4, #7
 8000bca:	d556      	bpl.n	8000c7a <__aeabi_dmul+0x426>
 8000bcc:	2001      	movs	r0, #1
 8000bce:	085a      	lsrs	r2, r3, #1
 8000bd0:	4003      	ands	r3, r0
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	07e2      	lsls	r2, r4, #31
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	0864      	lsrs	r4, r4, #1
 8000bda:	485a      	ldr	r0, [pc, #360]	; (8000d44 <__aeabi_dmul+0x4f0>)
 8000bdc:	4460      	add	r0, ip
 8000bde:	2800      	cmp	r0, #0
 8000be0:	dd4d      	ble.n	8000c7e <__aeabi_dmul+0x42a>
 8000be2:	075a      	lsls	r2, r3, #29
 8000be4:	d009      	beq.n	8000bfa <__aeabi_dmul+0x3a6>
 8000be6:	220f      	movs	r2, #15
 8000be8:	401a      	ands	r2, r3
 8000bea:	2a04      	cmp	r2, #4
 8000bec:	d005      	beq.n	8000bfa <__aeabi_dmul+0x3a6>
 8000bee:	1d1a      	adds	r2, r3, #4
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	419b      	sbcs	r3, r3
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	18e4      	adds	r4, r4, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	01e2      	lsls	r2, r4, #7
 8000bfc:	d504      	bpl.n	8000c08 <__aeabi_dmul+0x3b4>
 8000bfe:	2080      	movs	r0, #128	; 0x80
 8000c00:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <__aeabi_dmul+0x4f4>)
 8000c02:	00c0      	lsls	r0, r0, #3
 8000c04:	4014      	ands	r4, r2
 8000c06:	4460      	add	r0, ip
 8000c08:	4a50      	ldr	r2, [pc, #320]	; (8000d4c <__aeabi_dmul+0x4f8>)
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_dmul+0x3bc>
 8000c0e:	e6e3      	b.n	80009d8 <__aeabi_dmul+0x184>
 8000c10:	2501      	movs	r5, #1
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	0762      	lsls	r2, r4, #29
 8000c16:	431a      	orrs	r2, r3
 8000c18:	0264      	lsls	r4, r4, #9
 8000c1a:	9b01      	ldr	r3, [sp, #4]
 8000c1c:	4691      	mov	r9, r2
 8000c1e:	0b22      	lsrs	r2, r4, #12
 8000c20:	0544      	lsls	r4, r0, #21
 8000c22:	0d64      	lsrs	r4, r4, #21
 8000c24:	401d      	ands	r5, r3
 8000c26:	e67c      	b.n	8000922 <__aeabi_dmul+0xce>
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	4659      	mov	r1, fp
 8000c2c:	0312      	lsls	r2, r2, #12
 8000c2e:	4211      	tst	r1, r2
 8000c30:	d008      	beq.n	8000c44 <__aeabi_dmul+0x3f0>
 8000c32:	4214      	tst	r4, r2
 8000c34:	d106      	bne.n	8000c44 <__aeabi_dmul+0x3f0>
 8000c36:	4322      	orrs	r2, r4
 8000c38:	0312      	lsls	r2, r2, #12
 8000c3a:	0b12      	lsrs	r2, r2, #12
 8000c3c:	4645      	mov	r5, r8
 8000c3e:	4699      	mov	r9, r3
 8000c40:	4c43      	ldr	r4, [pc, #268]	; (8000d50 <__aeabi_dmul+0x4fc>)
 8000c42:	e66e      	b.n	8000922 <__aeabi_dmul+0xce>
 8000c44:	465b      	mov	r3, fp
 8000c46:	431a      	orrs	r2, r3
 8000c48:	0312      	lsls	r2, r2, #12
 8000c4a:	0b12      	lsrs	r2, r2, #12
 8000c4c:	4c40      	ldr	r4, [pc, #256]	; (8000d50 <__aeabi_dmul+0x4fc>)
 8000c4e:	e668      	b.n	8000922 <__aeabi_dmul+0xce>
 8000c50:	0003      	movs	r3, r0
 8000c52:	4654      	mov	r4, sl
 8000c54:	3b28      	subs	r3, #40	; 0x28
 8000c56:	409c      	lsls	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e6b9      	b.n	80009d0 <__aeabi_dmul+0x17c>
 8000c5c:	f000 f9cc 	bl	8000ff8 <__clzsi2>
 8000c60:	3020      	adds	r0, #32
 8000c62:	e6a6      	b.n	80009b2 <__aeabi_dmul+0x15e>
 8000c64:	0003      	movs	r3, r0
 8000c66:	3b28      	subs	r3, #40	; 0x28
 8000c68:	409f      	lsls	r7, r3
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	46bb      	mov	fp, r7
 8000c6e:	4699      	mov	r9, r3
 8000c70:	e68a      	b.n	8000988 <__aeabi_dmul+0x134>
 8000c72:	f000 f9c1 	bl	8000ff8 <__clzsi2>
 8000c76:	3020      	adds	r0, #32
 8000c78:	e674      	b.n	8000964 <__aeabi_dmul+0x110>
 8000c7a:	46b4      	mov	ip, r6
 8000c7c:	e7ad      	b.n	8000bda <__aeabi_dmul+0x386>
 8000c7e:	2501      	movs	r5, #1
 8000c80:	1a2a      	subs	r2, r5, r0
 8000c82:	2a38      	cmp	r2, #56	; 0x38
 8000c84:	dd06      	ble.n	8000c94 <__aeabi_dmul+0x440>
 8000c86:	9b01      	ldr	r3, [sp, #4]
 8000c88:	2400      	movs	r4, #0
 8000c8a:	401d      	ands	r5, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4699      	mov	r9, r3
 8000c92:	e646      	b.n	8000922 <__aeabi_dmul+0xce>
 8000c94:	2a1f      	cmp	r2, #31
 8000c96:	dc21      	bgt.n	8000cdc <__aeabi_dmul+0x488>
 8000c98:	2520      	movs	r5, #32
 8000c9a:	0020      	movs	r0, r4
 8000c9c:	1aad      	subs	r5, r5, r2
 8000c9e:	001e      	movs	r6, r3
 8000ca0:	40ab      	lsls	r3, r5
 8000ca2:	40a8      	lsls	r0, r5
 8000ca4:	40d6      	lsrs	r6, r2
 8000ca6:	1e5d      	subs	r5, r3, #1
 8000ca8:	41ab      	sbcs	r3, r5
 8000caa:	4330      	orrs	r0, r6
 8000cac:	4318      	orrs	r0, r3
 8000cae:	40d4      	lsrs	r4, r2
 8000cb0:	0743      	lsls	r3, r0, #29
 8000cb2:	d009      	beq.n	8000cc8 <__aeabi_dmul+0x474>
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d005      	beq.n	8000cc8 <__aeabi_dmul+0x474>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	1d18      	adds	r0, r3, #4
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	18e4      	adds	r4, r4, r3
 8000cc8:	0223      	lsls	r3, r4, #8
 8000cca:	d521      	bpl.n	8000d10 <__aeabi_dmul+0x4bc>
 8000ccc:	2501      	movs	r5, #1
 8000cce:	9b01      	ldr	r3, [sp, #4]
 8000cd0:	2401      	movs	r4, #1
 8000cd2:	401d      	ands	r5, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4699      	mov	r9, r3
 8000cda:	e622      	b.n	8000922 <__aeabi_dmul+0xce>
 8000cdc:	251f      	movs	r5, #31
 8000cde:	0021      	movs	r1, r4
 8000ce0:	426d      	negs	r5, r5
 8000ce2:	1a28      	subs	r0, r5, r0
 8000ce4:	40c1      	lsrs	r1, r0
 8000ce6:	0008      	movs	r0, r1
 8000ce8:	2a20      	cmp	r2, #32
 8000cea:	d01d      	beq.n	8000d28 <__aeabi_dmul+0x4d4>
 8000cec:	355f      	adds	r5, #95	; 0x5f
 8000cee:	1aaa      	subs	r2, r5, r2
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	4323      	orrs	r3, r4
 8000cf4:	1e5c      	subs	r4, r3, #1
 8000cf6:	41a3      	sbcs	r3, r4
 8000cf8:	2507      	movs	r5, #7
 8000cfa:	4303      	orrs	r3, r0
 8000cfc:	401d      	ands	r5, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d009      	beq.n	8000d18 <__aeabi_dmul+0x4c4>
 8000d04:	220f      	movs	r2, #15
 8000d06:	2400      	movs	r4, #0
 8000d08:	401a      	ands	r2, r3
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2a04      	cmp	r2, #4
 8000d0e:	d1d6      	bne.n	8000cbe <__aeabi_dmul+0x46a>
 8000d10:	0003      	movs	r3, r0
 8000d12:	0765      	lsls	r5, r4, #29
 8000d14:	0264      	lsls	r4, r4, #9
 8000d16:	0b22      	lsrs	r2, r4, #12
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	432b      	orrs	r3, r5
 8000d1c:	2501      	movs	r5, #1
 8000d1e:	4699      	mov	r9, r3
 8000d20:	9b01      	ldr	r3, [sp, #4]
 8000d22:	2400      	movs	r4, #0
 8000d24:	401d      	ands	r5, r3
 8000d26:	e5fc      	b.n	8000922 <__aeabi_dmul+0xce>
 8000d28:	2400      	movs	r4, #0
 8000d2a:	e7e2      	b.n	8000cf2 <__aeabi_dmul+0x49e>
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	2501      	movs	r5, #1
 8000d30:	0312      	lsls	r2, r2, #12
 8000d32:	4322      	orrs	r2, r4
 8000d34:	9901      	ldr	r1, [sp, #4]
 8000d36:	0312      	lsls	r2, r2, #12
 8000d38:	0b12      	lsrs	r2, r2, #12
 8000d3a:	400d      	ands	r5, r1
 8000d3c:	4699      	mov	r9, r3
 8000d3e:	4c04      	ldr	r4, [pc, #16]	; (8000d50 <__aeabi_dmul+0x4fc>)
 8000d40:	e5ef      	b.n	8000922 <__aeabi_dmul+0xce>
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	000003ff 	.word	0x000003ff
 8000d48:	feffffff 	.word	0xfeffffff
 8000d4c:	000007fe 	.word	0x000007fe
 8000d50:	000007ff 	.word	0x000007ff

08000d54 <__aeabi_d2iz>:
 8000d54:	b530      	push	{r4, r5, lr}
 8000d56:	4d13      	ldr	r5, [pc, #76]	; (8000da4 <__aeabi_d2iz+0x50>)
 8000d58:	030a      	lsls	r2, r1, #12
 8000d5a:	004b      	lsls	r3, r1, #1
 8000d5c:	0b12      	lsrs	r2, r2, #12
 8000d5e:	0d5b      	lsrs	r3, r3, #21
 8000d60:	0fc9      	lsrs	r1, r1, #31
 8000d62:	2400      	movs	r4, #0
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	dd10      	ble.n	8000d8a <__aeabi_d2iz+0x36>
 8000d68:	4c0f      	ldr	r4, [pc, #60]	; (8000da8 <__aeabi_d2iz+0x54>)
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	dc0f      	bgt.n	8000d8e <__aeabi_d2iz+0x3a>
 8000d6e:	2480      	movs	r4, #128	; 0x80
 8000d70:	4d0e      	ldr	r5, [pc, #56]	; (8000dac <__aeabi_d2iz+0x58>)
 8000d72:	0364      	lsls	r4, r4, #13
 8000d74:	4322      	orrs	r2, r4
 8000d76:	1aed      	subs	r5, r5, r3
 8000d78:	2d1f      	cmp	r5, #31
 8000d7a:	dd0b      	ble.n	8000d94 <__aeabi_d2iz+0x40>
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <__aeabi_d2iz+0x5c>)
 8000d7e:	1ac3      	subs	r3, r0, r3
 8000d80:	40da      	lsrs	r2, r3
 8000d82:	4254      	negs	r4, r2
 8000d84:	2900      	cmp	r1, #0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_d2iz+0x36>
 8000d88:	0014      	movs	r4, r2
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	bd30      	pop	{r4, r5, pc}
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <__aeabi_d2iz+0x60>)
 8000d90:	18cc      	adds	r4, r1, r3
 8000d92:	e7fa      	b.n	8000d8a <__aeabi_d2iz+0x36>
 8000d94:	4c08      	ldr	r4, [pc, #32]	; (8000db8 <__aeabi_d2iz+0x64>)
 8000d96:	40e8      	lsrs	r0, r5
 8000d98:	46a4      	mov	ip, r4
 8000d9a:	4463      	add	r3, ip
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	4302      	orrs	r2, r0
 8000da0:	e7ef      	b.n	8000d82 <__aeabi_d2iz+0x2e>
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	000003fe 	.word	0x000003fe
 8000da8:	0000041d 	.word	0x0000041d
 8000dac:	00000433 	.word	0x00000433
 8000db0:	00000413 	.word	0x00000413
 8000db4:	7fffffff 	.word	0x7fffffff
 8000db8:	fffffbed 	.word	0xfffffbed

08000dbc <__aeabi_i2d>:
 8000dbc:	b570      	push	{r4, r5, r6, lr}
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d030      	beq.n	8000e24 <__aeabi_i2d+0x68>
 8000dc2:	17c3      	asrs	r3, r0, #31
 8000dc4:	18c4      	adds	r4, r0, r3
 8000dc6:	405c      	eors	r4, r3
 8000dc8:	0fc5      	lsrs	r5, r0, #31
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f000 f914 	bl	8000ff8 <__clzsi2>
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <__aeabi_i2d+0x74>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <__aeabi_i2d+0x78>)
 8000dd4:	1a1b      	subs	r3, r3, r0
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	2a1f      	cmp	r2, #31
 8000dda:	dd18      	ble.n	8000e0e <__aeabi_i2d+0x52>
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <__aeabi_i2d+0x7c>)
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	4094      	lsls	r4, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	0324      	lsls	r4, r4, #12
 8000de6:	055b      	lsls	r3, r3, #21
 8000de8:	0b24      	lsrs	r4, r4, #12
 8000dea:	0d5b      	lsrs	r3, r3, #21
 8000dec:	2100      	movs	r1, #0
 8000dee:	0010      	movs	r0, r2
 8000df0:	0324      	lsls	r4, r4, #12
 8000df2:	0d0a      	lsrs	r2, r1, #20
 8000df4:	0b24      	lsrs	r4, r4, #12
 8000df6:	0512      	lsls	r2, r2, #20
 8000df8:	4322      	orrs	r2, r4
 8000dfa:	4c10      	ldr	r4, [pc, #64]	; (8000e3c <__aeabi_i2d+0x80>)
 8000dfc:	051b      	lsls	r3, r3, #20
 8000dfe:	4022      	ands	r2, r4
 8000e00:	4313      	orrs	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	07ed      	lsls	r5, r5, #31
 8000e06:	085b      	lsrs	r3, r3, #1
 8000e08:	432b      	orrs	r3, r5
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	bd70      	pop	{r4, r5, r6, pc}
 8000e0e:	0021      	movs	r1, r4
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	210b      	movs	r1, #11
 8000e16:	1a08      	subs	r0, r1, r0
 8000e18:	40c4      	lsrs	r4, r0
 8000e1a:	055b      	lsls	r3, r3, #21
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	0b24      	lsrs	r4, r4, #12
 8000e20:	0d5b      	lsrs	r3, r3, #21
 8000e22:	e7e3      	b.n	8000dec <__aeabi_i2d+0x30>
 8000e24:	2500      	movs	r5, #0
 8000e26:	2300      	movs	r3, #0
 8000e28:	2400      	movs	r4, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	e7de      	b.n	8000dec <__aeabi_i2d+0x30>
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	0000041e 	.word	0x0000041e
 8000e34:	00000433 	.word	0x00000433
 8000e38:	00000413 	.word	0x00000413
 8000e3c:	800fffff 	.word	0x800fffff

08000e40 <__aeabi_f2d>:
 8000e40:	0041      	lsls	r1, r0, #1
 8000e42:	0e09      	lsrs	r1, r1, #24
 8000e44:	1c4b      	adds	r3, r1, #1
 8000e46:	b570      	push	{r4, r5, r6, lr}
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	0246      	lsls	r6, r0, #9
 8000e4c:	0a75      	lsrs	r5, r6, #9
 8000e4e:	0fc4      	lsrs	r4, r0, #31
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	dd14      	ble.n	8000e7e <__aeabi_f2d+0x3e>
 8000e54:	23e0      	movs	r3, #224	; 0xe0
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	076d      	lsls	r5, r5, #29
 8000e5a:	0b36      	lsrs	r6, r6, #12
 8000e5c:	18cb      	adds	r3, r1, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	0d0a      	lsrs	r2, r1, #20
 8000e62:	0028      	movs	r0, r5
 8000e64:	0512      	lsls	r2, r2, #20
 8000e66:	4d1c      	ldr	r5, [pc, #112]	; (8000ed8 <__aeabi_f2d+0x98>)
 8000e68:	4332      	orrs	r2, r6
 8000e6a:	055b      	lsls	r3, r3, #21
 8000e6c:	402a      	ands	r2, r5
 8000e6e:	085b      	lsrs	r3, r3, #1
 8000e70:	4313      	orrs	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	07e4      	lsls	r4, r4, #31
 8000e76:	085b      	lsrs	r3, r3, #1
 8000e78:	4323      	orrs	r3, r4
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d114      	bne.n	8000eac <__aeabi_f2d+0x6c>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d01e      	beq.n	8000ec4 <__aeabi_f2d+0x84>
 8000e86:	0028      	movs	r0, r5
 8000e88:	f000 f8b6 	bl	8000ff8 <__clzsi2>
 8000e8c:	280a      	cmp	r0, #10
 8000e8e:	dc1c      	bgt.n	8000eca <__aeabi_f2d+0x8a>
 8000e90:	230b      	movs	r3, #11
 8000e92:	002a      	movs	r2, r5
 8000e94:	1a1b      	subs	r3, r3, r0
 8000e96:	40da      	lsrs	r2, r3
 8000e98:	0003      	movs	r3, r0
 8000e9a:	3315      	adds	r3, #21
 8000e9c:	409d      	lsls	r5, r3
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <__aeabi_f2d+0x9c>)
 8000ea0:	0312      	lsls	r2, r2, #12
 8000ea2:	1a1b      	subs	r3, r3, r0
 8000ea4:	055b      	lsls	r3, r3, #21
 8000ea6:	0b16      	lsrs	r6, r2, #12
 8000ea8:	0d5b      	lsrs	r3, r3, #21
 8000eaa:	e7d8      	b.n	8000e5e <__aeabi_f2d+0x1e>
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d006      	beq.n	8000ebe <__aeabi_f2d+0x7e>
 8000eb0:	0b32      	lsrs	r2, r6, #12
 8000eb2:	2680      	movs	r6, #128	; 0x80
 8000eb4:	0336      	lsls	r6, r6, #12
 8000eb6:	076d      	lsls	r5, r5, #29
 8000eb8:	4316      	orrs	r6, r2
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <__aeabi_f2d+0xa0>)
 8000ebc:	e7cf      	b.n	8000e5e <__aeabi_f2d+0x1e>
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <__aeabi_f2d+0xa0>)
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	e7cc      	b.n	8000e5e <__aeabi_f2d+0x1e>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	e7c9      	b.n	8000e5e <__aeabi_f2d+0x1e>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	002a      	movs	r2, r5
 8000ece:	3b0b      	subs	r3, #11
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	e7e3      	b.n	8000e9e <__aeabi_f2d+0x5e>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	800fffff 	.word	0x800fffff
 8000edc:	00000389 	.word	0x00000389
 8000ee0:	000007ff 	.word	0x000007ff

08000ee4 <__aeabi_d2f>:
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	004c      	lsls	r4, r1, #1
 8000ee8:	0d64      	lsrs	r4, r4, #21
 8000eea:	030b      	lsls	r3, r1, #12
 8000eec:	1c62      	adds	r2, r4, #1
 8000eee:	0f45      	lsrs	r5, r0, #29
 8000ef0:	0a5b      	lsrs	r3, r3, #9
 8000ef2:	0552      	lsls	r2, r2, #21
 8000ef4:	432b      	orrs	r3, r5
 8000ef6:	0fc9      	lsrs	r1, r1, #31
 8000ef8:	00c5      	lsls	r5, r0, #3
 8000efa:	0d52      	lsrs	r2, r2, #21
 8000efc:	2a01      	cmp	r2, #1
 8000efe:	dd28      	ble.n	8000f52 <__aeabi_d2f+0x6e>
 8000f00:	4a3a      	ldr	r2, [pc, #232]	; (8000fec <__aeabi_d2f+0x108>)
 8000f02:	18a6      	adds	r6, r4, r2
 8000f04:	2efe      	cmp	r6, #254	; 0xfe
 8000f06:	dc1b      	bgt.n	8000f40 <__aeabi_d2f+0x5c>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	dd3e      	ble.n	8000f8a <__aeabi_d2f+0xa6>
 8000f0c:	0180      	lsls	r0, r0, #6
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1e50      	subs	r0, r2, #1
 8000f12:	4182      	sbcs	r2, r0
 8000f14:	0f6d      	lsrs	r5, r5, #29
 8000f16:	432a      	orrs	r2, r5
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	075a      	lsls	r2, r3, #29
 8000f1e:	d004      	beq.n	8000f2a <__aeabi_d2f+0x46>
 8000f20:	220f      	movs	r2, #15
 8000f22:	401a      	ands	r2, r3
 8000f24:	2a04      	cmp	r2, #4
 8000f26:	d000      	beq.n	8000f2a <__aeabi_d2f+0x46>
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	04d2      	lsls	r2, r2, #19
 8000f2e:	401a      	ands	r2, r3
 8000f30:	d05a      	beq.n	8000fe8 <__aeabi_d2f+0x104>
 8000f32:	3601      	adds	r6, #1
 8000f34:	2eff      	cmp	r6, #255	; 0xff
 8000f36:	d003      	beq.n	8000f40 <__aeabi_d2f+0x5c>
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	b2f4      	uxtb	r4, r6
 8000f3e:	e001      	b.n	8000f44 <__aeabi_d2f+0x60>
 8000f40:	24ff      	movs	r4, #255	; 0xff
 8000f42:	2300      	movs	r3, #0
 8000f44:	0258      	lsls	r0, r3, #9
 8000f46:	05e4      	lsls	r4, r4, #23
 8000f48:	0a40      	lsrs	r0, r0, #9
 8000f4a:	07c9      	lsls	r1, r1, #31
 8000f4c:	4320      	orrs	r0, r4
 8000f4e:	4308      	orrs	r0, r1
 8000f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f52:	2c00      	cmp	r4, #0
 8000f54:	d007      	beq.n	8000f66 <__aeabi_d2f+0x82>
 8000f56:	431d      	orrs	r5, r3
 8000f58:	d0f2      	beq.n	8000f40 <__aeabi_d2f+0x5c>
 8000f5a:	2080      	movs	r0, #128	; 0x80
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	0480      	lsls	r0, r0, #18
 8000f60:	4303      	orrs	r3, r0
 8000f62:	26ff      	movs	r6, #255	; 0xff
 8000f64:	e7da      	b.n	8000f1c <__aeabi_d2f+0x38>
 8000f66:	432b      	orrs	r3, r5
 8000f68:	d003      	beq.n	8000f72 <__aeabi_d2f+0x8e>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	2cff      	cmp	r4, #255	; 0xff
 8000f70:	d003      	beq.n	8000f7a <__aeabi_d2f+0x96>
 8000f72:	025b      	lsls	r3, r3, #9
 8000f74:	0a5b      	lsrs	r3, r3, #9
 8000f76:	b2e4      	uxtb	r4, r4
 8000f78:	e7e4      	b.n	8000f44 <__aeabi_d2f+0x60>
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d032      	beq.n	8000fe4 <__aeabi_d2f+0x100>
 8000f7e:	2080      	movs	r0, #128	; 0x80
 8000f80:	03c0      	lsls	r0, r0, #15
 8000f82:	4303      	orrs	r3, r0
 8000f84:	025b      	lsls	r3, r3, #9
 8000f86:	0a5b      	lsrs	r3, r3, #9
 8000f88:	e7dc      	b.n	8000f44 <__aeabi_d2f+0x60>
 8000f8a:	0032      	movs	r2, r6
 8000f8c:	3217      	adds	r2, #23
 8000f8e:	db14      	blt.n	8000fba <__aeabi_d2f+0xd6>
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	271e      	movs	r7, #30
 8000f94:	0412      	lsls	r2, r2, #16
 8000f96:	4313      	orrs	r3, r2
 8000f98:	1bbf      	subs	r7, r7, r6
 8000f9a:	2f1f      	cmp	r7, #31
 8000f9c:	dc0f      	bgt.n	8000fbe <__aeabi_d2f+0xda>
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <__aeabi_d2f+0x10c>)
 8000fa0:	4694      	mov	ip, r2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	002a      	movs	r2, r5
 8000fa6:	40a5      	lsls	r5, r4
 8000fa8:	002e      	movs	r6, r5
 8000faa:	40a3      	lsls	r3, r4
 8000fac:	1e75      	subs	r5, r6, #1
 8000fae:	41ae      	sbcs	r6, r5
 8000fb0:	40fa      	lsrs	r2, r7
 8000fb2:	4333      	orrs	r3, r6
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	e7b0      	b.n	8000f1c <__aeabi_d2f+0x38>
 8000fba:	2400      	movs	r4, #0
 8000fbc:	e7d5      	b.n	8000f6a <__aeabi_d2f+0x86>
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	4252      	negs	r2, r2
 8000fc2:	1b96      	subs	r6, r2, r6
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	2f20      	cmp	r7, #32
 8000fca:	d009      	beq.n	8000fe0 <__aeabi_d2f+0xfc>
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <__aeabi_d2f+0x110>)
 8000fce:	4684      	mov	ip, r0
 8000fd0:	4464      	add	r4, ip
 8000fd2:	40a3      	lsls	r3, r4
 8000fd4:	432b      	orrs	r3, r5
 8000fd6:	1e5d      	subs	r5, r3, #1
 8000fd8:	41ab      	sbcs	r3, r5
 8000fda:	2600      	movs	r6, #0
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	e79d      	b.n	8000f1c <__aeabi_d2f+0x38>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e7f7      	b.n	8000fd4 <__aeabi_d2f+0xf0>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e7ad      	b.n	8000f44 <__aeabi_d2f+0x60>
 8000fe8:	0034      	movs	r4, r6
 8000fea:	e7bf      	b.n	8000f6c <__aeabi_d2f+0x88>
 8000fec:	fffffc80 	.word	0xfffffc80
 8000ff0:	fffffc82 	.word	0xfffffc82
 8000ff4:	fffffca2 	.word	0xfffffca2

08000ff8 <__clzsi2>:
 8000ff8:	211c      	movs	r1, #28
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	4298      	cmp	r0, r3
 8001000:	d301      	bcc.n	8001006 <__clzsi2+0xe>
 8001002:	0c00      	lsrs	r0, r0, #16
 8001004:	3910      	subs	r1, #16
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	4298      	cmp	r0, r3
 800100a:	d301      	bcc.n	8001010 <__clzsi2+0x18>
 800100c:	0a00      	lsrs	r0, r0, #8
 800100e:	3908      	subs	r1, #8
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	4298      	cmp	r0, r3
 8001014:	d301      	bcc.n	800101a <__clzsi2+0x22>
 8001016:	0900      	lsrs	r0, r0, #4
 8001018:	3904      	subs	r1, #4
 800101a:	a202      	add	r2, pc, #8	; (adr r2, 8001024 <__clzsi2+0x2c>)
 800101c:	5c10      	ldrb	r0, [r2, r0]
 800101e:	1840      	adds	r0, r0, r1
 8001020:	4770      	bx	lr
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	02020304 	.word	0x02020304
 8001028:	01010101 	.word	0x01010101
	...

08001034 <nano_wait>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void nano_wait(int t) {
 8001034:	0003      	movs	r3, r0
    asm("       mov r0,%0\n"
 8001036:	1c18      	adds	r0, r3, #0

08001038 <repeat>:
 8001038:	380e      	subs	r0, #14
 800103a:	dcfd      	bgt.n	8001038 <repeat>
        "repeat:\n"
        "       sub r0,#14\n"
        "       bgt repeat\n"
        : : "r"(t) : "r0", "cc");
}
 800103c:	4770      	bx	lr
	...

08001040 <byte_to_pwm>:

}

/* USER CODE BEGIN 4 */
int byte_to_pwm(int byte)
{
 8001040:	b510      	push	{r4, lr}
	float exact;
	exact = byte * (40.0/255.0) + 55.0;
 8001042:	f7ff febb 	bl	8000dbc <__aeabi_i2d>
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <byte_to_pwm+0x2c>)
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <byte_to_pwm+0x30>)
 800104a:	f7ff fc03 	bl	8000854 <__aeabi_dmul>
 800104e:	2200      	movs	r2, #0
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <byte_to_pwm+0x34>)
 8001052:	f7ff f8ef 	bl	8000234 <__aeabi_dadd>
 8001056:	f7ff ff45 	bl	8000ee4 <__aeabi_d2f>
	return (exact + 0.5); //rounds up the integer by adding 0.5
 800105a:	f7ff fef1 	bl	8000e40 <__aeabi_f2d>
 800105e:	2200      	movs	r2, #0
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <byte_to_pwm+0x38>)
 8001062:	f7ff f8e7 	bl	8000234 <__aeabi_dadd>
 8001066:	f7ff fe75 	bl	8000d54 <__aeabi_d2iz>
}
 800106a:	bd10      	pop	{r4, pc}
 800106c:	14141414 	.word	0x14141414
 8001070:	3fc41414 	.word	0x3fc41414
 8001074:	404b8000 	.word	0x404b8000
 8001078:	3fe00000 	.word	0x3fe00000

0800107c <HAL_ADC_ConvCpltCallback>:
	TIM3->CCR4 = byte_to_pwm(200); //U3
  //necessary portion
}

void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) //is called on each end of conversion for a single adc channel
{
 800107c:	b570      	push	{r4, r5, r6, lr}
	adc_val[adc_count] = HAL_ADC_GetValue(hadc); //stores the current conversion in the corresponding spot in adc_val
 800107e:	4c0a      	ldr	r4, [pc, #40]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x2c>)
{
 8001080:	0006      	movs	r6, r0
	adc_val[adc_count] = HAL_ADC_GetValue(hadc); //stores the current conversion in the corresponding spot in adc_val
 8001082:	6825      	ldr	r5, [r4, #0]
 8001084:	f000 fcf6 	bl	8001a74 <HAL_ADC_GetValue>
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_ADC_ConvCpltCallback+0x30>)
 800108a:	00ad      	lsls	r5, r5, #2
 800108c:	50e8      	str	r0, [r5, r3]
	{
		Error_Handler();
	}
    */
	//keeps track of the current adc conversion and restarts at end of sequence
	if(adc_count > 2)
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	2b02      	cmp	r3, #2
 8001092:	dd05      	ble.n	80010a0 <HAL_ADC_ConvCpltCallback+0x24>
	{
		adc_count = 0;
 8001094:	2300      	movs	r3, #0
		HAL_ADC_Start_IT(hadc);
 8001096:	0030      	movs	r0, r6
		adc_count = 0;
 8001098:	6023      	str	r3, [r4, #0]
		HAL_ADC_Start_IT(hadc);
 800109a:	f000 fc8d 	bl	80019b8 <HAL_ADC_Start_IT>
	}
	else
	{
		adc_count++;
	}
}
 800109e:	bd70      	pop	{r4, r5, r6, pc}
		adc_count++;
 80010a0:	3301      	adds	r3, #1
 80010a2:	6023      	str	r3, [r4, #0]
}
 80010a4:	e7fb      	b.n	800109e <HAL_ADC_ConvCpltCallback+0x22>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	20000060 	.word	0x20000060
 80010ac:	20000064 	.word	0x20000064

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80010b2:	4c0f      	ldr	r4, [pc, #60]	; (80010f0 <Error_Handler+0x40>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	0020      	movs	r0, r4
 80010b8:	f001 fed2 	bl	8002e60 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80010bc:	2104      	movs	r1, #4
 80010be:	0020      	movs	r0, r4
 80010c0:	f001 fece 	bl	8002e60 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80010c4:	2108      	movs	r1, #8
 80010c6:	0020      	movs	r0, r4
 80010c8:	f001 feca 	bl	8002e60 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80010cc:	210c      	movs	r1, #12
 80010ce:	0020      	movs	r0, r4
 80010d0:	f001 fec6 	bl	8002e60 <HAL_TIM_PWM_Stop>
	HAL_ADC_Stop_IT(&hadc);

	while(1)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80010d4:	2580      	movs	r5, #128	; 0x80
	HAL_ADC_Stop_IT(&hadc);
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <Error_Handler+0x44>)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80010d8:	2490      	movs	r4, #144	; 0x90
	HAL_ADC_Stop_IT(&hadc);
 80010da:	f000 fca7 	bl	8001a2c <HAL_ADC_Stop_IT>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80010de:	022d      	lsls	r5, r5, #8
 80010e0:	05e4      	lsls	r4, r4, #23
 80010e2:	2200      	movs	r2, #0
 80010e4:	0029      	movs	r1, r5
 80010e6:	0020      	movs	r0, r4
 80010e8:	f001 f9a6 	bl	8002438 <HAL_GPIO_WritePin>
 80010ec:	e7f9      	b.n	80010e2 <Error_Handler+0x32>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	200000c4 	.word	0x200000c4
 80010f4:	20000104 	.word	0x20000104

080010f8 <SystemClock_Config>:
{
 80010f8:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fa:	2410      	movs	r4, #16
{
 80010fc:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	2234      	movs	r2, #52	; 0x34
 8001100:	2100      	movs	r1, #0
 8001102:	a805      	add	r0, sp, #20
 8001104:	f001 ff6d 	bl	8002fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	2100      	movs	r1, #0
 800110a:	0022      	movs	r2, r4
 800110c:	a801      	add	r0, sp, #4
 800110e:	f001 ff68 	bl	8002fe2 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001112:	2312      	movs	r3, #18
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001116:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	3b11      	subs	r3, #17
 800111a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800111c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001120:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f001 f993 	bl	800244c <HAL_RCC_OscConfig>
 8001126:	1e01      	subs	r1, r0, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x36>
    Error_Handler();
 800112a:	f7ff ffc1 	bl	80010b0 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001130:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001136:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800113a:	f001 fbf5 	bl	8002928 <HAL_RCC_ClockConfig>
 800113e:	2800      	cmp	r0, #0
 8001140:	d1f3      	bne.n	800112a <SystemClock_Config+0x32>
}
 8001142:	b012      	add	sp, #72	; 0x48
 8001144:	bd10      	pop	{r4, pc}
	...

08001148 <main>:
{
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b099      	sub	sp, #100	; 0x64
  HAL_Init();
 800114c:	f000 fac0 	bl	80016d0 <HAL_Init>
  SystemClock_Config();
 8001150:	f7ff ffd2 	bl	80010f8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	2214      	movs	r2, #20
 8001156:	2100      	movs	r1, #0
 8001158:	a80e      	add	r0, sp, #56	; 0x38
 800115a:	f001 ff42 	bl	8002fe2 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	4b9d      	ldr	r3, [pc, #628]	; (80013d8 <main+0x290>)
 8001162:	0280      	lsls	r0, r0, #10
 8001164:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001166:	2480      	movs	r4, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4301      	orrs	r1, r0
 800116a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001174:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800117c:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	430a      	orrs	r2, r1
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	400b      	ands	r3, r1
 8001188:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800118a:	0021      	movs	r1, r4
 800118c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001190:	f001 f952 	bl	8002438 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	05c0      	lsls	r0, r0, #23
 800119c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800119e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f001 f89d 	bl	80022e4 <HAL_GPIO_Init>
  hcan.Instance = CAN;
 80011aa:	4c8c      	ldr	r4, [pc, #560]	; (80013dc <main+0x294>)
 80011ac:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <main+0x298>)
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011ae:	0020      	movs	r0, r4
  hcan.Instance = CAN;
 80011b0:	6023      	str	r3, [r4, #0]
  hcan.Init.Prescaler = 4;
 80011b2:	2304      	movs	r3, #4
 80011b4:	6063      	str	r3, [r4, #4]
  hcan.Init.SJW = CAN_SJW_4TQ;
 80011b6:	23c0      	movs	r3, #192	; 0xc0
 80011b8:	049b      	lsls	r3, r3, #18
 80011ba:	60e3      	str	r3, [r4, #12]
  hcan.Init.BS1 = CAN_BS1_11TQ;
 80011bc:	23a0      	movs	r3, #160	; 0xa0
 80011be:	031b      	lsls	r3, r3, #12
 80011c0:	6123      	str	r3, [r4, #16]
  hcan.Init.BS2 = CAN_BS2_4TQ;
 80011c2:	23c0      	movs	r3, #192	; 0xc0
 80011c4:	039b      	lsls	r3, r3, #14
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011c6:	60a5      	str	r5, [r4, #8]
  hcan.Init.BS2 = CAN_BS2_4TQ;
 80011c8:	6163      	str	r3, [r4, #20]
  hcan.Init.TTCM = DISABLE;
 80011ca:	61a5      	str	r5, [r4, #24]
  hcan.Init.ABOM = DISABLE;
 80011cc:	61e5      	str	r5, [r4, #28]
  hcan.Init.AWUM = ENABLE;
 80011ce:	6227      	str	r7, [r4, #32]
  hcan.Init.NART = DISABLE;
 80011d0:	6265      	str	r5, [r4, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 80011d2:	62a5      	str	r5, [r4, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 80011d4:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011d6:	f000 fdb3 	bl	8001d40 <HAL_CAN_Init>
 80011da:	42a8      	cmp	r0, r5
 80011dc:	d001      	beq.n	80011e2 <main+0x9a>
    Error_Handler();
 80011de:	f7ff ff67 	bl	80010b0 <Error_Handler>
  hcan.pTxMsg = &TxMessage;
 80011e2:	4b80      	ldr	r3, [pc, #512]	; (80013e4 <main+0x29c>)
  sFilterConfig.FilterNumber = 0;
 80011e4:	9013      	str	r0, [sp, #76]	; 0x4c
  hcan.pTxMsg = &TxMessage;
 80011e6:	6323      	str	r3, [r4, #48]	; 0x30
  hcan.pRxMsg = &RxMessage;
 80011e8:	4b7f      	ldr	r3, [pc, #508]	; (80013e8 <main+0x2a0>)
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011ea:	9014      	str	r0, [sp, #80]	; 0x50
  hcan.pRxMsg = &RxMessage;
 80011ec:	6363      	str	r3, [r4, #52]	; 0x34
  sFilterConfig.BankNumber = 14;
 80011ee:	230e      	movs	r3, #14
  sFilterConfig.FilterIdHigh = 0x0000;
 80011f0:	900e      	str	r0, [sp, #56]	; 0x38
  sFilterConfig.FilterIdLow = 0x0000;
 80011f2:	900f      	str	r0, [sp, #60]	; 0x3c
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011f4:	9010      	str	r0, [sp, #64]	; 0x40
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80011f6:	9011      	str	r0, [sp, #68]	; 0x44
  sFilterConfig.FilterFIFOAssignment = 0;
 80011f8:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80011fa:	a90e      	add	r1, sp, #56	; 0x38
 80011fc:	0020      	movs	r0, r4
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011fe:	9715      	str	r7, [sp, #84]	; 0x54
  sFilterConfig.FilterActivation = ENABLE;
 8001200:	9716      	str	r7, [sp, #88]	; 0x58
  sFilterConfig.BankNumber = 14;
 8001202:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001204:	f000 fd2c 	bl	8001c60 <HAL_CAN_ConfigFilter>
 8001208:	1e06      	subs	r6, r0, #0
 800120a:	d1e8      	bne.n	80011de <main+0x96>
  hcan.pTxMsg->StdId = 0x200;
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	601a      	str	r2, [r3, #0]
  hcan.pTxMsg->Data[0] = 0xFF;
 8001214:	3a02      	subs	r2, #2
 8001216:	3aff      	subs	r2, #255	; 0xff
  hcan.pTxMsg->RTR = CAN_RTR_DATA;
 8001218:	60d8      	str	r0, [r3, #12]
  hcan.pTxMsg->IDE = CAN_ID_STD;
 800121a:	6098      	str	r0, [r3, #8]
  hcan.pTxMsg->Data[0] = 0xFF;
 800121c:	751a      	strb	r2, [r3, #20]
  hcan.pTxMsg->ExtId = 0x01;
 800121e:	605f      	str	r7, [r3, #4]
  hcan.pTxMsg->DLC = 1;
 8001220:	611f      	str	r7, [r3, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001222:	0001      	movs	r1, r0
 8001224:	3af3      	subs	r2, #243	; 0xf3
 8001226:	a804      	add	r0, sp, #16
 8001228:	f001 fedb 	bl	8002fe2 <memset>
  hadc.Instance = ADC1;
 800122c:	4d6f      	ldr	r5, [pc, #444]	; (80013ec <main+0x2a4>)
 800122e:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <main+0x2a8>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001230:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8001232:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001234:	2304      	movs	r3, #4
 8001236:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001238:	23c2      	movs	r3, #194	; 0xc2
 800123a:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800123c:	606e      	str	r6, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800123e:	60ae      	str	r6, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001240:	60ee      	str	r6, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001242:	612f      	str	r7, [r5, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001244:	61ae      	str	r6, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001246:	61ee      	str	r6, [r5, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001248:	622e      	str	r6, [r5, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800124a:	626e      	str	r6, [r5, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124e:	62ee      	str	r6, [r5, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001250:	632e      	str	r6, [r5, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001252:	636f      	str	r7, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001254:	f000 fb0a 	bl	800186c <HAL_ADC_Init>
 8001258:	2800      	cmp	r0, #0
 800125a:	d1c0      	bne.n	80011de <main+0x96>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	015b      	lsls	r3, r3, #5
 8001260:	9305      	str	r3, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001262:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 8001264:	9004      	str	r0, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001266:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001268:	a904      	add	r1, sp, #16
 800126a:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800126c:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800126e:	f000 fc77 	bl	8001b60 <HAL_ADC_ConfigChannel>
 8001272:	2800      	cmp	r0, #0
 8001274:	d1b3      	bne.n	80011de <main+0x96>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001276:	a904      	add	r1, sp, #16
 8001278:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 800127a:	9704      	str	r7, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800127c:	f000 fc70 	bl	8001b60 <HAL_ADC_ConfigChannel>
 8001280:	2800      	cmp	r0, #0
 8001282:	d1ac      	bne.n	80011de <main+0x96>
  sConfig.Channel = ADC_CHANNEL_2;
 8001284:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001286:	a904      	add	r1, sp, #16
 8001288:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 800128a:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800128c:	f000 fc68 	bl	8001b60 <HAL_ADC_ConfigChannel>
 8001290:	2800      	cmp	r0, #0
 8001292:	d1a4      	bne.n	80011de <main+0x96>
  sConfig.Channel = ADC_CHANNEL_3;
 8001294:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001296:	a904      	add	r1, sp, #16
 8001298:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_3;
 800129a:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800129c:	f000 fc60 	bl	8001b60 <HAL_ADC_ConfigChannel>
 80012a0:	1e07      	subs	r7, r0, #0
 80012a2:	d19c      	bne.n	80011de <main+0x96>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	0001      	movs	r1, r0
 80012a6:	2208      	movs	r2, #8
 80012a8:	a802      	add	r0, sp, #8
 80012aa:	f001 fe9a 	bl	8002fe2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	221c      	movs	r2, #28
 80012b0:	0039      	movs	r1, r7
 80012b2:	a807      	add	r0, sp, #28
 80012b4:	f001 fe95 	bl	8002fe2 <memset>
  htim3.Init.Prescaler = 160;
 80012b8:	23a0      	movs	r3, #160	; 0xa0
  htim3.Instance = TIM3;
 80012ba:	4d4e      	ldr	r5, [pc, #312]	; (80013f4 <main+0x2ac>)
 80012bc:	4e4e      	ldr	r6, [pc, #312]	; (80013f8 <main+0x2b0>)
  htim3.Init.Prescaler = 160;
 80012be:	606b      	str	r3, [r5, #4]
  htim3.Init.Period = 1000;
 80012c0:	23fa      	movs	r3, #250	; 0xfa
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012c2:	0028      	movs	r0, r5
  htim3.Init.Period = 1000;
 80012c4:	009b      	lsls	r3, r3, #2
  htim3.Instance = TIM3;
 80012c6:	602e      	str	r6, [r5, #0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	60af      	str	r7, [r5, #8]
  htim3.Init.Period = 1000;
 80012ca:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	612f      	str	r7, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	61af      	str	r7, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012d0:	f001 fcd6 	bl	8002c80 <HAL_TIM_PWM_Init>
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d182      	bne.n	80011de <main+0x96>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012dc:	a902      	add	r1, sp, #8
 80012de:	0028      	movs	r0, r5
 80012e0:	f001 fdf6 	bl	8002ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	1e02      	subs	r2, r0, #0
 80012e6:	d000      	beq.n	80012ea <main+0x1a2>
 80012e8:	e779      	b.n	80011de <main+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ea:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80012ec:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f2:	a907      	add	r1, sp, #28
 80012f4:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f6:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f8:	f001 fd1a 	bl	8002d30 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d000      	beq.n	8001302 <main+0x1ba>
 8001300:	e76d      	b.n	80011de <main+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001302:	2204      	movs	r2, #4
 8001304:	a907      	add	r1, sp, #28
 8001306:	0028      	movs	r0, r5
 8001308:	f001 fd12 	bl	8002d30 <HAL_TIM_PWM_ConfigChannel>
 800130c:	2800      	cmp	r0, #0
 800130e:	d000      	beq.n	8001312 <main+0x1ca>
 8001310:	e765      	b.n	80011de <main+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001312:	2208      	movs	r2, #8
 8001314:	a907      	add	r1, sp, #28
 8001316:	0028      	movs	r0, r5
 8001318:	f001 fd0a 	bl	8002d30 <HAL_TIM_PWM_ConfigChannel>
 800131c:	2800      	cmp	r0, #0
 800131e:	d000      	beq.n	8001322 <main+0x1da>
 8001320:	e75d      	b.n	80011de <main+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001322:	220c      	movs	r2, #12
 8001324:	a907      	add	r1, sp, #28
 8001326:	0028      	movs	r0, r5
 8001328:	f001 fd02 	bl	8002d30 <HAL_TIM_PWM_ConfigChannel>
 800132c:	1e07      	subs	r7, r0, #0
 800132e:	d000      	beq.n	8001332 <main+0x1ea>
 8001330:	e755      	b.n	80011de <main+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8001332:	0028      	movs	r0, r5
 8001334:	f000 f934 	bl	80015a0 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001338:	0039      	movs	r1, r7
 800133a:	0028      	movs	r0, r5
 800133c:	f001 fd6e 	bl	8002e1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001340:	2104      	movs	r1, #4
 8001342:	0028      	movs	r0, r5
 8001344:	f001 fd6a 	bl	8002e1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001348:	2108      	movs	r1, #8
 800134a:	0028      	movs	r0, r5
 800134c:	f001 fd66 	bl	8002e1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001350:	210c      	movs	r1, #12
 8001352:	0028      	movs	r0, r5
 8001354:	f001 fd62 	bl	8002e1c <HAL_TIM_PWM_Start>
    nano_wait(30000000);
 8001358:	4828      	ldr	r0, [pc, #160]	; (80013fc <main+0x2b4>)
 800135a:	f7ff fe6b 	bl	8001034 <nano_wait>
    nano_wait(30000000);
 800135e:	4827      	ldr	r0, [pc, #156]	; (80013fc <main+0x2b4>)
 8001360:	f7ff fe68 	bl	8001034 <nano_wait>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	2090      	movs	r0, #144	; 0x90
 8001368:	0209      	lsls	r1, r1, #8
 800136a:	05c0      	lsls	r0, r0, #23
 800136c:	2201      	movs	r2, #1
 800136e:	f001 f863 	bl	8002438 <HAL_GPIO_WritePin>
    TIM3->CCR1 = 75;
 8001372:	234b      	movs	r3, #75	; 0x4b
  if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 8001374:	0039      	movs	r1, r7
    TIM3->CCR1 = 75;
 8001376:	6373      	str	r3, [r6, #52]	; 0x34
  if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 8001378:	0020      	movs	r0, r4
    TIM3->CCR2 = 75;
 800137a:	63b3      	str	r3, [r6, #56]	; 0x38
    TIM3->CCR3 = 75;
 800137c:	63f3      	str	r3, [r6, #60]	; 0x3c
    TIM3->CCR4 = 75;
 800137e:	6433      	str	r3, [r6, #64]	; 0x40
  if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 8001380:	f000 fd7c 	bl	8001e7c <HAL_CAN_Receive_IT>
 8001384:	2800      	cmp	r0, #0
 8001386:	d000      	beq.n	800138a <main+0x242>
 8001388:	e729      	b.n	80011de <main+0x96>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800138a:	2680      	movs	r6, #128	; 0x80
 800138c:	0236      	lsls	r6, r6, #8
    check_error = HAL_CAN_GetError(&hcan);
 800138e:	0020      	movs	r0, r4
 8001390:	f000 ff52 	bl	8002238 <HAL_CAN_GetError>
 8001394:	4d1a      	ldr	r5, [pc, #104]	; (8001400 <main+0x2b8>)
 8001396:	6028      	str	r0, [r5, #0]
	if(check_error == 0x8 || check_error == 0x10)
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	2b08      	cmp	r3, #8
 800139c:	d002      	beq.n	80013a4 <main+0x25c>
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	2b10      	cmp	r3, #16
 80013a2:	d10a      	bne.n	80013ba <main+0x272>
		__HAL_CAN_RESET_HANDLE_STATE(&hcan);
 80013a4:	0023      	movs	r3, r4
 80013a6:	2100      	movs	r1, #0
 80013a8:	333d      	adds	r3, #61	; 0x3d
		  if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 80013aa:	0020      	movs	r0, r4
		__HAL_CAN_RESET_HANDLE_STATE(&hcan);
 80013ac:	7019      	strb	r1, [r3, #0]
		  if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 80013ae:	f000 fd65 	bl	8001e7c <HAL_CAN_Receive_IT>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d000      	beq.n	80013b8 <main+0x270>
 80013b6:	e712      	b.n	80011de <main+0x96>
		  check_error = 0;
 80013b8:	6028      	str	r0, [r5, #0]
    check_state = HAL_CAN_GetState(&hcan);
 80013ba:	0020      	movs	r0, r4
 80013bc:	f000 ff38 	bl	8002230 <HAL_CAN_GetState>
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <main+0x2bc>)
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80013c2:	0031      	movs	r1, r6
    check_state = HAL_CAN_GetState(&hcan);
 80013c4:	6018      	str	r0, [r3, #0]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80013c6:	2090      	movs	r0, #144	; 0x90
 80013c8:	05c0      	lsls	r0, r0, #23
 80013ca:	f001 f83b 	bl	8002444 <HAL_GPIO_TogglePin>
    nano_wait(10000000);
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <main+0x2c0>)
 80013d0:	f7ff fe30 	bl	8001034 <nano_wait>
    check_error = HAL_CAN_GetError(&hcan);
 80013d4:	e7db      	b.n	800138e <main+0x246>
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40021000 	.word	0x40021000
 80013dc:	2000007c 	.word	0x2000007c
 80013e0:	40006400 	.word	0x40006400
 80013e4:	20000044 	.word	0x20000044
 80013e8:	20000020 	.word	0x20000020
 80013ec:	20000104 	.word	0x20000104
 80013f0:	40012400 	.word	0x40012400
 80013f4:	200000c4 	.word	0x200000c4
 80013f8:	40000400 	.word	0x40000400
 80013fc:	01c9c380 	.word	0x01c9c380
 8001400:	20000074 	.word	0x20000074
 8001404:	20000078 	.word	0x20000078
 8001408:	00989680 	.word	0x00989680

0800140c <HAL_CAN_RxCpltCallback>:
{
 800140c:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800140e:	2180      	movs	r1, #128	; 0x80
{
 8001410:	0006      	movs	r6, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001412:	2090      	movs	r0, #144	; 0x90
 8001414:	2201      	movs	r2, #1
 8001416:	0209      	lsls	r1, r1, #8
 8001418:	05c0      	lsls	r0, r0, #23
 800141a:	f001 f80d 	bl	8002438 <HAL_GPIO_WritePin>
	if((hcan->pRxMsg->StdId == 0x202))
 800141e:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_CAN_RxCpltCallback+0x50>)
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d110      	bne.n	800144a <HAL_CAN_RxCpltCallback+0x3e>
		TIM3->CCR1 = byte_to_pwm((int)hcan->pRxMsg->Data[7]); //U7
 8001428:	7ee0      	ldrb	r0, [r4, #27]
 800142a:	f7ff fe09 	bl	8001040 <byte_to_pwm>
 800142e:	4d0c      	ldr	r5, [pc, #48]	; (8001460 <HAL_CAN_RxCpltCallback+0x54>)
 8001430:	6368      	str	r0, [r5, #52]	; 0x34
		TIM3->CCR2 = byte_to_pwm((int)hcan->pRxMsg->Data[6]); //U2
 8001432:	7ea0      	ldrb	r0, [r4, #26]
 8001434:	f7ff fe04 	bl	8001040 <byte_to_pwm>
 8001438:	63a8      	str	r0, [r5, #56]	; 0x38
		TIM3->CCR3 = byte_to_pwm((int)hcan->pRxMsg->Data[5]); //U1
 800143a:	7e60      	ldrb	r0, [r4, #25]
 800143c:	f7ff fe00 	bl	8001040 <byte_to_pwm>
 8001440:	63e8      	str	r0, [r5, #60]	; 0x3c
		TIM3->CCR4 = byte_to_pwm((int)hcan->pRxMsg->Data[4]); //U3
 8001442:	7e20      	ldrb	r0, [r4, #24]
 8001444:	f7ff fdfc 	bl	8001040 <byte_to_pwm>
 8001448:	6428      	str	r0, [r5, #64]	; 0x40
	if (HAL_CAN_Receive_IT(hcan, CAN_FIFO0) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	0030      	movs	r0, r6
 800144e:	f000 fd15 	bl	8001e7c <HAL_CAN_Receive_IT>
 8001452:	2800      	cmp	r0, #0
 8001454:	d001      	beq.n	800145a <HAL_CAN_RxCpltCallback+0x4e>
		Error_Handler();
 8001456:	f7ff fe2b 	bl	80010b0 <Error_Handler>
}
 800145a:	bd70      	pop	{r4, r5, r6, pc}
 800145c:	00000202 	.word	0x00000202
 8001460:	40000400 	.word	0x40000400

08001464 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	2001      	movs	r0, #1
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_MspInit+0x2c>)
{
 8001468:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	6999      	ldr	r1, [r3, #24]
 800146c:	4301      	orrs	r1, r0
 800146e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001474:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4002      	ands	r2, r0
 8001478:	9200      	str	r2, [sp, #0]
 800147a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	430a      	orrs	r2, r1
 8001480:	61da      	str	r2, [r3, #28]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	400b      	ands	r3, r1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	b002      	add	sp, #8
 800148c:	4770      	bx	lr
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001494:	b510      	push	{r4, lr}
 8001496:	0004      	movs	r4, r0
 8001498:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	2214      	movs	r2, #20
 800149c:	2100      	movs	r1, #0
 800149e:	a803      	add	r0, sp, #12
 80014a0:	f001 fd9f 	bl	8002fe2 <memset>
  if(hadc->Instance==ADC1)
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_ADC_MspInit+0x64>)
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d123      	bne.n	80014f4 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ac:	2080      	movs	r0, #128	; 0x80
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_ADC_MspInit+0x68>)
 80014b0:	0080      	lsls	r0, r0, #2
 80014b2:	6999      	ldr	r1, [r3, #24]
 80014b4:	4301      	orrs	r1, r0
 80014b6:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ba:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014be:	4002      	ands	r2, r0
 80014c0:	9201      	str	r2, [sp, #4]
 80014c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	695a      	ldr	r2, [r3, #20]
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	430a      	orrs	r2, r1
 80014ca:	615a      	str	r2, [r3, #20]
 80014cc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	400b      	ands	r3, r1
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014d6:	230f      	movs	r3, #15
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014dc:	3b0c      	subs	r3, #12
 80014de:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f000 ff00 	bl	80022e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 80014e4:	200c      	movs	r0, #12
 80014e6:	2200      	movs	r2, #0
 80014e8:	2101      	movs	r1, #1
 80014ea:	f000 fea7 	bl	800223c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80014ee:	200c      	movs	r0, #12
 80014f0:	f000 fed4 	bl	800229c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f4:	b008      	add	sp, #32
 80014f6:	bd10      	pop	{r4, pc}
 80014f8:	40012400 	.word	0x40012400
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001500:	b510      	push	{r4, lr}
 8001502:	0004      	movs	r4, r0
 8001504:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	2214      	movs	r2, #20
 8001508:	2100      	movs	r1, #0
 800150a:	a803      	add	r0, sp, #12
 800150c:	f001 fd69 	bl	8002fe2 <memset>
  if(hcan->Instance==CAN)
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_CAN_MspInit+0x70>)
 8001512:	6822      	ldr	r2, [r4, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d128      	bne.n	800156a <HAL_CAN_MspInit+0x6a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001518:	2080      	movs	r0, #128	; 0x80
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_CAN_MspInit+0x74>)
 800151c:	0480      	lsls	r0, r0, #18
 800151e:	69d9      	ldr	r1, [r3, #28]
 8001520:	4301      	orrs	r1, r0
 8001522:	61d9      	str	r1, [r3, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001526:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	0289      	lsls	r1, r1, #10
    __HAL_RCC_CAN1_CLK_ENABLE();
 800152a:	4002      	ands	r2, r0
 800152c:	9201      	str	r2, [sp, #4]
 800152e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	430a      	orrs	r2, r1
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	400b      	ands	r3, r1
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001542:	23c0      	movs	r3, #192	; 0xc0
 8001544:	015b      	lsls	r3, r3, #5
 8001546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154c:	3301      	adds	r3, #1
 800154e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001552:	3301      	adds	r3, #1
 8001554:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f000 fec5 	bl	80022e4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	201e      	movs	r0, #30
 800155e:	0011      	movs	r1, r2
 8001560:	f000 fe6c 	bl	800223c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001564:	201e      	movs	r0, #30
 8001566:	f000 fe99 	bl	800229c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800156a:	b008      	add	sp, #32
 800156c:	bd10      	pop	{r4, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	40006400 	.word	0x40006400
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM3)
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_TIM_PWM_MspInit+0x20>)
 800157a:	6802      	ldr	r2, [r0, #0]
{
 800157c:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 800157e:	429a      	cmp	r2, r3
 8001580:	d108      	bne.n	8001594 <HAL_TIM_PWM_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001582:	2002      	movs	r0, #2
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <HAL_TIM_PWM_MspInit+0x24>)
 8001586:	69d1      	ldr	r1, [r2, #28]
 8001588:	4301      	orrs	r1, r0
 800158a:	61d1      	str	r1, [r2, #28]
 800158c:	69d3      	ldr	r3, [r2, #28]
 800158e:	4003      	ands	r3, r0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001594:	b002      	add	sp, #8
 8001596:	4770      	bx	lr
 8001598:	40000400 	.word	0x40000400
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a0:	b530      	push	{r4, r5, lr}
 80015a2:	0004      	movs	r4, r0
 80015a4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	2214      	movs	r2, #20
 80015a8:	2100      	movs	r1, #0
 80015aa:	a803      	add	r0, sp, #12
 80015ac:	f001 fd19 	bl	8002fe2 <memset>
  if(htim->Instance==TIM3)
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_TIM_MspPostInit+0x70>)
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d128      	bne.n	800160a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	2080      	movs	r0, #128	; 0x80
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_TIM_MspPostInit+0x74>)
 80015bc:	0280      	lsls	r0, r0, #10
 80015be:	6959      	ldr	r1, [r3, #20]
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4301      	orrs	r1, r0
 80015c4:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4002      	ands	r2, r0
 80015ce:	9201      	str	r2, [sp, #4]
 80015d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	430a      	orrs	r2, r1
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80015dc:	2401      	movs	r4, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	400b      	ands	r3, r1
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e4:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	a903      	add	r1, sp, #12
 80015e8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80015ee:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f000 fe78 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015f4:	2303      	movs	r3, #3
 80015f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	a903      	add	r1, sp, #12
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001604:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f000 fe6d 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800160a:	b009      	add	sp, #36	; 0x24
 800160c:	bd30      	pop	{r4, r5, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40000400 	.word	0x40000400
 8001614:	40021000 	.word	0x40021000
 8001618:	48000400 	.word	0x48000400

0800161c <NMI_Handler>:
 800161c:	4770      	bx	lr

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	e7fe      	b.n	800161e <HardFault_Handler>

08001620 <SVC_Handler>:
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001626:	f000 f863 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162a:	bd10      	pop	{r4, pc}

0800162c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 800162c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800162e:	4802      	ldr	r0, [pc, #8]	; (8001638 <ADC1_IRQHandler+0xc>)
 8001630:	f000 fa26 	bl	8001a80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001634:	bd10      	pop	{r4, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	20000104 	.word	0x20000104

0800163c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800163c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800163e:	4802      	ldr	r0, [pc, #8]	; (8001648 <CEC_CAN_IRQHandler+0xc>)
 8001640:	f000 fd04 	bl	800204c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001644:	bd10      	pop	{r4, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	2000007c 	.word	0x2000007c

0800164c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800164c:	2101      	movs	r1, #1
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4002      	ands	r2, r0
 800165c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	480e      	ldr	r0, [pc, #56]	; (800169c <SystemInit+0x50>)
 8001662:	4002      	ands	r2, r0
 8001664:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <SystemInit+0x54>)
 800166a:	4002      	ands	r2, r0
 800166c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <SystemInit+0x58>)
 8001672:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001674:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001676:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167a:	4382      	bics	r2, r0
 800167c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 800167e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001680:	4809      	ldr	r0, [pc, #36]	; (80016a8 <SystemInit+0x5c>)
 8001682:	4002      	ands	r2, r0
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001688:	438a      	bics	r2, r1
 800168a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]

}
 8001690:	4770      	bx	lr
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40021000 	.word	0x40021000
 8001698:	08ffb80c 	.word	0x08ffb80c
 800169c:	fef6ffff 	.word	0xfef6ffff
 80016a0:	fffbffff 	.word	0xfffbffff
 80016a4:	ffc0ffff 	.word	0xffc0ffff
 80016a8:	fffffe2c 	.word	0xfffffe2c

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b510      	push	{r4, lr}
 80016ae:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80016b0:	f001 f9e8 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 80016b4:	21fa      	movs	r1, #250	; 0xfa
 80016b6:	0089      	lsls	r1, r1, #2
 80016b8:	f7fe fd30 	bl	800011c <__udivsi3>
 80016bc:	f000 fdf8 	bl	80022b0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80016c0:	2001      	movs	r0, #1
 80016c2:	2200      	movs	r2, #0
 80016c4:	0021      	movs	r1, r4
 80016c6:	4240      	negs	r0, r0
 80016c8:	f000 fdb8 	bl	800223c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80016cc:	2000      	movs	r0, #0
 80016ce:	bd10      	pop	{r4, pc}

080016d0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	2310      	movs	r3, #16
 80016d2:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_Init+0x1c>)
{
 80016d4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016da:	430b      	orrs	r3, r1
 80016dc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	f7ff ffe5 	bl	80016ac <HAL_InitTick>
  HAL_MspInit();
 80016e2:	f7ff febf 	bl	8001464 <HAL_MspInit>
}
 80016e6:	2000      	movs	r0, #0
 80016e8:	bd10      	pop	{r4, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40022000 	.word	0x40022000

080016f0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80016f0:	4a02      	ldr	r2, [pc, #8]	; (80016fc <HAL_IncTick+0xc>)
 80016f2:	6813      	ldr	r3, [r2, #0]
 80016f4:	3301      	adds	r3, #1
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	4770      	bx	lr
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	20000150 	.word	0x20000150

08001700 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <HAL_GetTick+0x8>)
 8001702:	6818      	ldr	r0, [r3, #0]
}
 8001704:	4770      	bx	lr
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	20000150 	.word	0x20000150

0800170c <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800170c:	2103      	movs	r1, #3
 800170e:	6803      	ldr	r3, [r0, #0]
{
 8001710:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001712:	689a      	ldr	r2, [r3, #8]
{
 8001714:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001716:	400a      	ands	r2, r1
 8001718:	2a01      	cmp	r2, #1
 800171a:	d001      	beq.n	8001720 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800171c:	2000      	movs	r0, #0
}
 800171e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	4211      	tst	r1, r2
 8001724:	d102      	bne.n	800172c <ADC_Disable+0x20>
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	0412      	lsls	r2, r2, #16
 800172a:	d5f7      	bpl.n	800171c <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800172c:	2205      	movs	r2, #5
 800172e:	689d      	ldr	r5, [r3, #8]
 8001730:	4015      	ands	r5, r2
 8001732:	2d01      	cmp	r5, #1
 8001734:	d11a      	bne.n	800176c <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 8001736:	2202      	movs	r2, #2
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	2203      	movs	r2, #3
 8001740:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001742:	f7ff ffdd 	bl	8001700 <HAL_GetTick>
 8001746:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	422b      	tst	r3, r5
 800174e:	d0e5      	beq.n	800171c <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001750:	f7ff ffd6 	bl	8001700 <HAL_GetTick>
 8001754:	1b80      	subs	r0, r0, r6
 8001756:	2802      	cmp	r0, #2
 8001758:	d9f6      	bls.n	8001748 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175a:	2310      	movs	r3, #16
 800175c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001760:	4313      	orrs	r3, r2
 8001762:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001764:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001766:	431d      	orrs	r5, r3
 8001768:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 800176a:	e7d8      	b.n	800171e <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176c:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001770:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001772:	4313      	orrs	r3, r2
 8001774:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001776:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001778:	4303      	orrs	r3, r0
 800177a:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800177c:	e7cf      	b.n	800171e <ADC_Disable+0x12>
	...

08001780 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001780:	2300      	movs	r3, #0
{
 8001782:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001784:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001786:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001788:	6803      	ldr	r3, [r0, #0]
{
 800178a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	400a      	ands	r2, r1
 8001790:	2a01      	cmp	r2, #1
 8001792:	d107      	bne.n	80017a4 <ADC_Enable+0x24>
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	4211      	tst	r1, r2
 8001798:	d001      	beq.n	800179e <ADC_Enable+0x1e>
  return HAL_OK;
 800179a:	2000      	movs	r0, #0
}
 800179c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	0412      	lsls	r2, r2, #16
 80017a2:	d4fa      	bmi.n	800179a <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <ADC_Enable+0x8c>)
 80017a8:	4211      	tst	r1, r2
 80017aa:	d008      	beq.n	80017be <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ac:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ae:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80017b2:	4313      	orrs	r3, r2
 80017b4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017b8:	4303      	orrs	r3, r0
 80017ba:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80017bc:	e7ee      	b.n	800179c <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80017be:	2201      	movs	r2, #1
 80017c0:	6899      	ldr	r1, [r3, #8]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <ADC_Enable+0x90>)
 80017c8:	4912      	ldr	r1, [pc, #72]	; (8001814 <ADC_Enable+0x94>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	f7fe fca6 	bl	800011c <__udivsi3>
 80017d0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80017d2:	9b01      	ldr	r3, [sp, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d115      	bne.n	8001804 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80017d8:	f7ff ff92 	bl	8001700 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017dc:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80017de:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	422b      	tst	r3, r5
 80017e6:	d1d8      	bne.n	800179a <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017e8:	f7ff ff8a 	bl	8001700 <HAL_GetTick>
 80017ec:	1b80      	subs	r0, r0, r6
 80017ee:	2802      	cmp	r0, #2
 80017f0:	d9f6      	bls.n	80017e0 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f2:	2310      	movs	r3, #16
 80017f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f8:	4313      	orrs	r3, r2
 80017fa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017fe:	432b      	orrs	r3, r5
 8001800:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8001802:	e7cb      	b.n	800179c <ADC_Enable+0x1c>
      wait_loop_index--;
 8001804:	9b01      	ldr	r3, [sp, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	e7e2      	b.n	80017d2 <ADC_Enable+0x52>
 800180c:	80000017 	.word	0x80000017
 8001810:	20000000 	.word	0x20000000
 8001814:	000f4240 	.word	0x000f4240

08001818 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001818:	2204      	movs	r2, #4
 800181a:	6803      	ldr	r3, [r0, #0]
{
 800181c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800181e:	6899      	ldr	r1, [r3, #8]
{
 8001820:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001822:	4211      	tst	r1, r2
 8001824:	d101      	bne.n	800182a <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001826:	2000      	movs	r0, #0
}
 8001828:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800182a:	6899      	ldr	r1, [r3, #8]
 800182c:	4211      	tst	r1, r2
 800182e:	d006      	beq.n	800183e <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001830:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001832:	0792      	lsls	r2, r2, #30
 8001834:	d403      	bmi.n	800183e <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001836:	2210      	movs	r2, #16
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	430a      	orrs	r2, r1
 800183c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800183e:	f7ff ff5f 	bl	8001700 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001842:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 8001844:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	422b      	tst	r3, r5
 800184c:	d0eb      	beq.n	8001826 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800184e:	f7ff ff57 	bl	8001700 <HAL_GetTick>
 8001852:	1b80      	subs	r0, r0, r6
 8001854:	2802      	cmp	r0, #2
 8001856:	d9f6      	bls.n	8001846 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001858:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800185e:	4313      	orrs	r3, r2
 8001860:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001864:	4303      	orrs	r3, r0
 8001866:	64a3      	str	r3, [r4, #72]	; 0x48
 8001868:	e7de      	b.n	8001828 <ADC_ConversionStop+0x10>
	...

0800186c <HAL_ADC_Init>:
{
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001870:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001872:	2c00      	cmp	r4, #0
 8001874:	d072      	beq.n	800195c <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001876:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001878:	2b00      	cmp	r3, #0
 800187a:	d106      	bne.n	800188a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800187c:	0022      	movs	r2, r4
 800187e:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8001880:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8001882:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001884:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001886:	f7ff fe05 	bl	8001494 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800188a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800188c:	06db      	lsls	r3, r3, #27
 800188e:	d500      	bpl.n	8001892 <HAL_ADC_Init+0x26>
 8001890:	e079      	b.n	8001986 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001892:	2204      	movs	r2, #4
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	6898      	ldr	r0, [r3, #8]
 8001898:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800189a:	d000      	beq.n	800189e <HAL_ADC_Init+0x32>
 800189c:	e073      	b.n	8001986 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800189e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80018a0:	4942      	ldr	r1, [pc, #264]	; (80019ac <HAL_ADC_Init+0x140>)
 80018a2:	4011      	ands	r1, r2
 80018a4:	2202      	movs	r2, #2
 80018a6:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80018a8:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80018aa:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	400a      	ands	r2, r1
 80018b0:	2a01      	cmp	r2, #1
 80018b2:	d000      	beq.n	80018b6 <HAL_ADC_Init+0x4a>
 80018b4:	e06d      	b.n	8001992 <HAL_ADC_Init+0x126>
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	4211      	tst	r1, r2
 80018ba:	d102      	bne.n	80018c2 <HAL_ADC_Init+0x56>
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	0412      	lsls	r2, r2, #16
 80018c0:	d567      	bpl.n	8001992 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	493a      	ldr	r1, [pc, #232]	; (80019b0 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80018c6:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80018c8:	400a      	ands	r2, r1
 80018ca:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80018cc:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80018ce:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80018d0:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80018d2:	69e2      	ldr	r2, [r4, #28]
 80018d4:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80018d6:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80018d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80018da:	3a01      	subs	r2, #1
 80018dc:	1e56      	subs	r6, r2, #1
 80018de:	41b2      	sbcs	r2, r6
 80018e0:	0316      	lsls	r6, r2, #12
 80018e2:	68e2      	ldr	r2, [r4, #12]
 80018e4:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80018e6:	6922      	ldr	r2, [r4, #16]
 80018e8:	430f      	orrs	r7, r1
 80018ea:	2a02      	cmp	r2, #2
 80018ec:	d100      	bne.n	80018f0 <HAL_ADC_Init+0x84>
 80018ee:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80018f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80018f4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80018f6:	433a      	orrs	r2, r7
 80018f8:	4332      	orrs	r2, r6
 80018fa:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018fc:	2901      	cmp	r1, #1
 80018fe:	d104      	bne.n	800190a <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001900:	2d00      	cmp	r5, #0
 8001902:	d12c      	bne.n	800195e <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	0249      	lsls	r1, r1, #9
 8001908:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190a:	20c2      	movs	r0, #194	; 0xc2
 800190c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800190e:	30ff      	adds	r0, #255	; 0xff
 8001910:	4281      	cmp	r1, r0
 8001912:	d002      	beq.n	800191a <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001914:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001916:	4301      	orrs	r1, r0
 8001918:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800191a:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800191c:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800191e:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001920:	4311      	orrs	r1, r2
 8001922:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001924:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001926:	4281      	cmp	r1, r0
 8001928:	d002      	beq.n	8001930 <HAL_ADC_Init+0xc4>
 800192a:	1e48      	subs	r0, r1, #1
 800192c:	2806      	cmp	r0, #6
 800192e:	d807      	bhi.n	8001940 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001930:	2507      	movs	r5, #7
 8001932:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001934:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001936:	43a8      	bics	r0, r5
 8001938:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800193a:	6958      	ldr	r0, [r3, #20]
 800193c:	4301      	orrs	r1, r0
 800193e:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	491c      	ldr	r1, [pc, #112]	; (80019b4 <HAL_ADC_Init+0x148>)
 8001944:	400b      	ands	r3, r1
 8001946:	429a      	cmp	r2, r3
 8001948:	d111      	bne.n	800196e <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 800194a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800194c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800194e:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8001950:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001952:	4393      	bics	r3, r2
 8001954:	001a      	movs	r2, r3
 8001956:	2301      	movs	r3, #1
 8001958:	4313      	orrs	r3, r2
 800195a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195e:	2020      	movs	r0, #32
 8001960:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001962:	4328      	orrs	r0, r5
 8001964:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001966:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001968:	4301      	orrs	r1, r0
 800196a:	64a1      	str	r1, [r4, #72]	; 0x48
 800196c:	e7cd      	b.n	800190a <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 800196e:	2212      	movs	r2, #18
 8001970:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001972:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001974:	4393      	bics	r3, r2
 8001976:	001a      	movs	r2, r3
 8001978:	2310      	movs	r3, #16
 800197a:	4313      	orrs	r3, r2
 800197c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001980:	4303      	orrs	r3, r0
 8001982:	64a3      	str	r3, [r4, #72]	; 0x48
 8001984:	e7ea      	b.n	800195c <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001986:	2310      	movs	r3, #16
 8001988:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800198a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198c:	4313      	orrs	r3, r2
 800198e:	6463      	str	r3, [r4, #68]	; 0x44
 8001990:	e7e4      	b.n	800195c <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001992:	2118      	movs	r1, #24
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	438a      	bics	r2, r1
 8001998:	68a1      	ldr	r1, [r4, #8]
 800199a:	430a      	orrs	r2, r1
 800199c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800199e:	6919      	ldr	r1, [r3, #16]
 80019a0:	6862      	ldr	r2, [r4, #4]
 80019a2:	0089      	lsls	r1, r1, #2
 80019a4:	0889      	lsrs	r1, r1, #2
 80019a6:	4311      	orrs	r1, r2
 80019a8:	6119      	str	r1, [r3, #16]
 80019aa:	e78a      	b.n	80018c2 <HAL_ADC_Init+0x56>
 80019ac:	fffffefd 	.word	0xfffffefd
 80019b0:	fffe0219 	.word	0xfffe0219
 80019b4:	833fffe7 	.word	0x833fffe7

080019b8 <HAL_ADC_Start_IT>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019b8:	6803      	ldr	r3, [r0, #0]
{
 80019ba:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019bc:	689b      	ldr	r3, [r3, #8]
{
 80019be:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80019c0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019c2:	075b      	lsls	r3, r3, #29
 80019c4:	d420      	bmi.n	8001a08 <HAL_ADC_Start_IT+0x50>
    __HAL_LOCK(hadc);
 80019c6:	0025      	movs	r5, r4
 80019c8:	3540      	adds	r5, #64	; 0x40
 80019ca:	782b      	ldrb	r3, [r5, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d01b      	beq.n	8001a08 <HAL_ADC_Start_IT+0x50>
 80019d0:	2301      	movs	r3, #1
 80019d2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019d4:	69e3      	ldr	r3, [r4, #28]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d111      	bne.n	80019fe <HAL_ADC_Start_IT+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80019da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <HAL_ADC_Start_IT+0x70>)
      switch(hadc->Init.EOCSelection)
 80019de:	6961      	ldr	r1, [r4, #20]
      ADC_STATE_CLR_SET(hadc->State,
 80019e0:	401a      	ands	r2, r3
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4313      	orrs	r3, r2
 80019e8:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 80019ea:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019ec:	221c      	movs	r2, #28
      ADC_CLEAR_ERRORCODE(hadc);
 80019ee:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80019f0:	702b      	strb	r3, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 80019f6:	2908      	cmp	r1, #8
 80019f8:	d007      	beq.n	8001a0a <HAL_ADC_Start_IT+0x52>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	e00b      	b.n	8001a16 <HAL_ADC_Start_IT+0x5e>
      tmp_hal_status = ADC_Enable(hadc);
 80019fe:	0020      	movs	r0, r4
 8001a00:	f7ff febe 	bl	8001780 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001a04:	2800      	cmp	r0, #0
 8001a06:	d0e8      	beq.n	80019da <HAL_ADC_Start_IT+0x22>
}
 8001a08:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	438a      	bics	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001a12:	2218      	movs	r2, #24
 8001a14:	6859      	ldr	r1, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	6899      	ldr	r1, [r3, #8]
 8001a1e:	2000      	movs	r0, #0
 8001a20:	430a      	orrs	r2, r1
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	e7f0      	b.n	8001a08 <HAL_ADC_Start_IT+0x50>
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	fffff0fe 	.word	0xfffff0fe

08001a2c <HAL_ADC_Stop_IT>:
{
 8001a2c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001a2e:	0006      	movs	r6, r0
 8001a30:	3640      	adds	r6, #64	; 0x40
 8001a32:	7833      	ldrb	r3, [r6, #0]
{
 8001a34:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001a36:	2002      	movs	r0, #2
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d017      	beq.n	8001a6c <HAL_ADC_Stop_IT+0x40>
 8001a3c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001a3e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8001a40:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001a42:	f7ff fee9 	bl	8001818 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d10e      	bne.n	8001a68 <HAL_ADC_Stop_IT+0x3c>
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a4a:	211c      	movs	r1, #28
 8001a4c:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = ADC_Disable(hadc);
 8001a4e:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a50:	6853      	ldr	r3, [r2, #4]
 8001a52:	438b      	bics	r3, r1
 8001a54:	6053      	str	r3, [r2, #4]
    tmp_hal_status = ADC_Disable(hadc);
 8001a56:	f7ff fe59 	bl	800170c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d104      	bne.n	8001a68 <HAL_ADC_Stop_IT+0x3c>
      ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a60:	4a03      	ldr	r2, [pc, #12]	; (8001a70 <HAL_ADC_Stop_IT+0x44>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	431d      	orrs	r5, r3
 8001a66:	6465      	str	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	7033      	strb	r3, [r6, #0]
}
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	fffffefe 	.word	0xfffffefe

08001a74 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001a74:	6803      	ldr	r3, [r0, #0]
 8001a76:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001a78:	4770      	bx	lr

08001a7a <HAL_ADC_LevelOutOfWindowCallback>:
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ADC_ErrorCallback>:
}
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001a80:	2204      	movs	r2, #4
 8001a82:	6803      	ldr	r3, [r0, #0]
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001a86:	6819      	ldr	r1, [r3, #0]
{
 8001a88:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001a8a:	4211      	tst	r1, r2
 8001a8c:	d002      	beq.n	8001a94 <HAL_ADC_IRQHandler+0x14>
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	4211      	tst	r1, r2
 8001a92:	d106      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001a94:	2208      	movs	r2, #8
 8001a96:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001a98:	4211      	tst	r1, r2
 8001a9a:	d028      	beq.n	8001aee <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	4211      	tst	r1, r2
 8001aa0:	d025      	beq.n	8001aee <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aa2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001aa4:	06d2      	lsls	r2, r2, #27
 8001aa6:	d404      	bmi.n	8001ab2 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ab2:	22c0      	movs	r2, #192	; 0xc0
 8001ab4:	68d9      	ldr	r1, [r3, #12]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	4211      	tst	r1, r2
 8001aba:	d112      	bne.n	8001ae2 <HAL_ADC_IRQHandler+0x62>
 8001abc:	6a22      	ldr	r2, [r4, #32]
 8001abe:	2a00      	cmp	r2, #0
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	0712      	lsls	r2, r2, #28
 8001ac6:	d50c      	bpl.n	8001ae2 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	0752      	lsls	r2, r2, #29
 8001acc:	d43c      	bmi.n	8001b48 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ace:	210c      	movs	r1, #12
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	438a      	bics	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_ADC_IRQHandler+0xdc>)
 8001ada:	401a      	ands	r2, r3
 8001adc:	2301      	movs	r3, #1
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8001ae2:	0020      	movs	r0, r4
 8001ae4:	f7ff faca 	bl	800107c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001ae8:	220c      	movs	r2, #12
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001aee:	2580      	movs	r5, #128	; 0x80
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	422a      	tst	r2, r5
 8001af6:	d00c      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x92>
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	422b      	tst	r3, r5
 8001afc:	d009      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b02:	025b      	lsls	r3, r3, #9
 8001b04:	4313      	orrs	r3, r2
 8001b06:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b08:	0020      	movs	r0, r4
 8001b0a:	f7ff ffb6 	bl	8001a7a <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001b12:	2210      	movs	r2, #16
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	4211      	tst	r1, r2
 8001b1a:	d014      	beq.n	8001b46 <HAL_ADC_IRQHandler+0xc6>
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	4211      	tst	r1, r2
 8001b20:	d011      	beq.n	8001b46 <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001b22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b24:	2a01      	cmp	r2, #1
 8001b26:	d002      	beq.n	8001b2e <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001b28:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001b2a:	07d2      	lsls	r2, r2, #31
 8001b2c:	d508      	bpl.n	8001b40 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b2e:	2202      	movs	r2, #2
 8001b30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8001b32:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b34:	430a      	orrs	r2, r1
 8001b36:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b38:	2210      	movs	r2, #16
 8001b3a:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001b3c:	f7ff ff9e 	bl	8001a7c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b40:	2210      	movs	r2, #16
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b48:	2320      	movs	r3, #32
 8001b4a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	2301      	movs	r3, #1
 8001b52:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b54:	4313      	orrs	r3, r2
 8001b56:	64a3      	str	r3, [r4, #72]	; 0x48
 8001b58:	e7c3      	b.n	8001ae2 <HAL_ADC_IRQHandler+0x62>
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	fffffefe 	.word	0xfffffefe

08001b60 <HAL_ADC_ConfigChannel>:
{
 8001b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001b62:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001b64:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001b66:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001b68:	3440      	adds	r4, #64	; 0x40
 8001b6a:	7823      	ldrb	r3, [r4, #0]
{
 8001b6c:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8001b6e:	2002      	movs	r0, #2
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d02b      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0x6c>
 8001b74:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b76:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b78:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b7a:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8001b7c:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b7e:	0740      	lsls	r0, r0, #29
 8001b80:	d45a      	bmi.n	8001c38 <HAL_ADC_ConfigChannel+0xd8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001b82:	4830      	ldr	r0, [pc, #192]	; (8001c44 <HAL_ADC_ConfigChannel+0xe4>)
 8001b84:	684f      	ldr	r7, [r1, #4]
 8001b86:	680d      	ldr	r5, [r1, #0]
 8001b88:	4287      	cmp	r7, r0
 8001b8a:	d03f      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b8c:	40ab      	lsls	r3, r5
 8001b8e:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b90:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b92:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b94:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b96:	4338      	orrs	r0, r7
 8001b98:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b9a:	429e      	cmp	r6, r3
 8001b9c:	d00f      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x5e>
 8001b9e:	3e01      	subs	r6, #1
 8001ba0:	2e06      	cmp	r6, #6
 8001ba2:	d90c      	bls.n	8001bbe <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001ba4:	688b      	ldr	r3, [r1, #8]
 8001ba6:	2107      	movs	r1, #7
 8001ba8:	6950      	ldr	r0, [r2, #20]
 8001baa:	4008      	ands	r0, r1
 8001bac:	4283      	cmp	r3, r0
 8001bae:	d006      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001bb0:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001bb2:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001bb4:	4388      	bics	r0, r1
 8001bb6:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001bb8:	6950      	ldr	r0, [r2, #20]
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bbe:	002b      	movs	r3, r5
 8001bc0:	3b10      	subs	r3, #16
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d903      	bls.n	8001bce <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	7023      	strb	r3, [r4, #0]
}
 8001bcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <HAL_ADC_ConfigChannel+0xe8>)
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	6811      	ldr	r1, [r2, #0]
 8001bd4:	2d10      	cmp	r5, #16
 8001bd6:	d015      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0xa4>
 8001bd8:	2d11      	cmp	r5, #17
 8001bda:	d015      	beq.n	8001c08 <HAL_ADC_ConfigChannel+0xa8>
 8001bdc:	045b      	lsls	r3, r3, #17
 8001bde:	430b      	orrs	r3, r1
 8001be0:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be2:	2d10      	cmp	r5, #16
 8001be4:	d1ef      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_ADC_ConfigChannel+0xec>)
 8001be8:	4919      	ldr	r1, [pc, #100]	; (8001c50 <HAL_ADC_ConfigChannel+0xf0>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	f7fe fa96 	bl	800011c <__udivsi3>
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	4358      	muls	r0, r3
 8001bf4:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0e4      	beq.n	8001bc6 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001bfc:	9b01      	ldr	r3, [sp, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	e7f8      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	e7ea      	b.n	8001bde <HAL_ADC_ConfigChannel+0x7e>
 8001c08:	03db      	lsls	r3, r3, #15
 8001c0a:	e7e8      	b.n	8001bde <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c0c:	40ab      	lsls	r3, r5
 8001c0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c10:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c12:	002b      	movs	r3, r5
 8001c14:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c16:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d8d4      	bhi.n	8001bc6 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_ADC_ConfigChannel+0xe8>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2d10      	cmp	r5, #16
 8001c22:	d005      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0xd0>
 8001c24:	2d11      	cmp	r5, #17
 8001c26:	d005      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0xd4>
 8001c28:	490a      	ldr	r1, [pc, #40]	; (8001c54 <HAL_ADC_ConfigChannel+0xf4>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e7ca      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x66>
 8001c30:	4909      	ldr	r1, [pc, #36]	; (8001c58 <HAL_ADC_ConfigChannel+0xf8>)
 8001c32:	e7fa      	b.n	8001c2a <HAL_ADC_ConfigChannel+0xca>
 8001c34:	4909      	ldr	r1, [pc, #36]	; (8001c5c <HAL_ADC_ConfigChannel+0xfc>)
 8001c36:	e7f8      	b.n	8001c2a <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c38:	2220      	movs	r2, #32
 8001c3a:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001c3c:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	646a      	str	r2, [r5, #68]	; 0x44
 8001c42:	e7c1      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x68>
 8001c44:	00001001 	.word	0x00001001
 8001c48:	40012708 	.word	0x40012708
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	000f4240 	.word	0x000f4240
 8001c54:	feffffff 	.word	0xfeffffff
 8001c58:	ff7fffff 	.word	0xff7fffff
 8001c5c:	ffbfffff 	.word	0xffbfffff

08001c60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8001c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8001c62:	2601      	movs	r6, #1

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8001c64:	2780      	movs	r7, #128	; 0x80
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8001c66:	0034      	movs	r4, r6
  MODIFY_REG(hcan->Instance->FMR                         ,
 8001c68:	6803      	ldr	r3, [r0, #0]
 8001c6a:	00bf      	lsls	r7, r7, #2
 8001c6c:	59d8      	ldr	r0, [r3, r7]
 8001c6e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8001c70:	9000      	str	r0, [sp, #0]
 8001c72:	0228      	lsls	r0, r5, #8
 8001c74:	9001      	str	r0, [sp, #4]
 8001c76:	9d00      	ldr	r5, [sp, #0]
 8001c78:	4830      	ldr	r0, [pc, #192]	; (8001d3c <HAL_CAN_ConfigFilter+0xdc>)
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8001c7a:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(hcan->Instance->FMR                         ,
 8001c7c:	4005      	ands	r5, r0
 8001c7e:	0028      	movs	r0, r5
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8001c80:	4094      	lsls	r4, r2
  MODIFY_REG(hcan->Instance->FMR                         ,
 8001c82:	9d01      	ldr	r5, [sp, #4]
 8001c84:	4328      	orrs	r0, r5
 8001c86:	4330      	orrs	r0, r6
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001c88:	2687      	movs	r6, #135	; 0x87
 8001c8a:	43e5      	mvns	r5, r4
  MODIFY_REG(hcan->Instance->FMR                         ,
 8001c8c:	51d8      	str	r0, [r3, r7]
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001c8e:	00b6      	lsls	r6, r6, #2
 8001c90:	5998      	ldr	r0, [r3, r6]
 8001c92:	4028      	ands	r0, r5
 8001c94:	5198      	str	r0, [r3, r6]

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c96:	69c8      	ldr	r0, [r1, #28]
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	d133      	bne.n	8001d04 <HAL_CAN_ConfigFilter+0xa4>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001c9c:	3e10      	subs	r6, #16
 8001c9e:	5998      	ldr	r0, [r3, r6]
 8001ca0:	00d2      	lsls	r2, r2, #3
 8001ca2:	4028      	ands	r0, r5
 8001ca4:	5198      	str	r0, [r3, r6]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ca6:	68c8      	ldr	r0, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ca8:	888e      	ldrh	r6, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001caa:	0400      	lsls	r0, r0, #16
 8001cac:	4330      	orrs	r0, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001cae:	2690      	movs	r6, #144	; 0x90
 8001cb0:	189a      	adds	r2, r3, r2
 8001cb2:	00b6      	lsls	r6, r6, #2
 8001cb4:	5190      	str	r0, [r2, r6]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb6:	6888      	ldr	r0, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001cb8:	880e      	ldrh	r6, [r1, #0]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cba:	0400      	lsls	r0, r0, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cbc:	4330      	orrs	r0, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001cbe:	2691      	movs	r6, #145	; 0x91
 8001cc0:	00b6      	lsls	r6, r6, #2
 8001cc2:	5190      	str	r0, [r2, r6]
 8001cc4:	2281      	movs	r2, #129	; 0x81
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cc6:	6988      	ldr	r0, [r1, #24]
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d12e      	bne.n	8001d2c <HAL_CAN_ConfigFilter+0xcc>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8001cce:	5898      	ldr	r0, [r3, r2]
 8001cd0:	4028      	ands	r0, r5
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8001cd2:	5098      	str	r0, [r3, r2]
 8001cd4:	2285      	movs	r2, #133	; 0x85
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cd6:	6908      	ldr	r0, [r1, #16]
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d129      	bne.n	8001d32 <HAL_CAN_ConfigFilter+0xd2>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8001cde:	5898      	ldr	r0, [r3, r2]
 8001ce0:	4005      	ands	r5, r0
 8001ce2:	509d      	str	r5, [r3, r2]
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8001ce4:	6a0a      	ldr	r2, [r1, #32]
 8001ce6:	2a01      	cmp	r2, #1
 8001ce8:	d104      	bne.n	8001cf4 <HAL_CAN_ConfigFilter+0x94>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001cea:	2287      	movs	r2, #135	; 0x87
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	5899      	ldr	r1, [r3, r2]
 8001cf0:	430c      	orrs	r4, r1
 8001cf2:	509c      	str	r4, [r3, r2]
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	0089      	lsls	r1, r1, #2
 8001cfa:	585a      	ldr	r2, [r3, r1]
 8001cfc:	4382      	bics	r2, r0
 8001cfe:	505a      	str	r2, [r3, r1]
  
  /* Return function status */
  return HAL_OK;
}
 8001d00:	2000      	movs	r0, #0
 8001d02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d04:	2801      	cmp	r0, #1
 8001d06:	d1dd      	bne.n	8001cc4 <HAL_CAN_ConfigFilter+0x64>
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001d08:	2683      	movs	r6, #131	; 0x83
 8001d0a:	00b6      	lsls	r6, r6, #2
 8001d0c:	5998      	ldr	r0, [r3, r6]
 8001d0e:	00d2      	lsls	r2, r2, #3
 8001d10:	4320      	orrs	r0, r4
 8001d12:	5198      	str	r0, [r3, r6]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d14:	6808      	ldr	r0, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d16:	888e      	ldrh	r6, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d18:	0400      	lsls	r0, r0, #16
 8001d1a:	4330      	orrs	r0, r6
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001d1c:	2690      	movs	r6, #144	; 0x90
 8001d1e:	189a      	adds	r2, r3, r2
 8001d20:	00b6      	lsls	r6, r6, #2
 8001d22:	5190      	str	r0, [r2, r6]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d24:	6888      	ldr	r0, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d26:	898e      	ldrh	r6, [r1, #12]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d28:	0400      	lsls	r0, r0, #16
 8001d2a:	e7c7      	b.n	8001cbc <HAL_CAN_ConfigFilter+0x5c>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8001d2c:	5898      	ldr	r0, [r3, r2]
 8001d2e:	4320      	orrs	r0, r4
 8001d30:	e7cf      	b.n	8001cd2 <HAL_CAN_ConfigFilter+0x72>
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8001d32:	5898      	ldr	r0, [r3, r2]
 8001d34:	4320      	orrs	r0, r4
 8001d36:	5098      	str	r0, [r3, r2]
 8001d38:	e7d4      	b.n	8001ce4 <HAL_CAN_ConfigFilter+0x84>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	ffffc0ff 	.word	0xffffc0ff

08001d40 <HAL_CAN_Init>:
{
 8001d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d42:	0004      	movs	r4, r0
     return HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
  if(hcan == NULL)
 8001d46:	2c00      	cmp	r4, #0
 8001d48:	d070      	beq.n	8001e2c <HAL_CAN_Init+0xec>
  if(hcan->State == HAL_CAN_STATE_RESET)
 8001d4a:	0025      	movs	r5, r4
 8001d4c:	353d      	adds	r5, #61	; 0x3d
 8001d4e:	782b      	ldrb	r3, [r5, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <HAL_CAN_Init+0x22>
    hcan->Lock = HAL_UNLOCKED;
 8001d56:	0022      	movs	r2, r4
 8001d58:	323c      	adds	r2, #60	; 0x3c
 8001d5a:	7013      	strb	r3, [r2, #0]
    HAL_CAN_MspInit(hcan);
 8001d5c:	0020      	movs	r0, r4
 8001d5e:	f7ff fbcf 	bl	8001500 <HAL_CAN_MspInit>
  hcan->State = HAL_CAN_STATE_BUSY;
 8001d62:	2102      	movs	r1, #2
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d64:	2701      	movs	r7, #1
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d66:	6823      	ldr	r3, [r4, #0]
  hcan->State = HAL_CAN_STATE_BUSY;
 8001d68:	7029      	strb	r1, [r5, #0]
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	433a      	orrs	r2, r7
 8001d74:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();   
 8001d76:	f7ff fcc3 	bl	8001700 <HAL_GetTick>
 8001d7a:	9001      	str	r0, [sp, #4]
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	685e      	ldr	r6, [r3, #4]
 8001d80:	403e      	ands	r6, r7
 8001d82:	d049      	beq.n	8001e18 <HAL_CAN_Init+0xd8>
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	423a      	tst	r2, r7
 8001d88:	d100      	bne.n	8001d8c <HAL_CAN_Init+0x4c>
 8001d8a:	e073      	b.n	8001e74 <HAL_CAN_Init+0x134>
    if (hcan->Init.TTCM == ENABLE)
 8001d8c:	69a1      	ldr	r1, [r4, #24]
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	2901      	cmp	r1, #1
 8001d92:	d14c      	bne.n	8001e2e <HAL_CAN_Init+0xee>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 8001d9a:	69e1      	ldr	r1, [r4, #28]
 8001d9c:	2240      	movs	r2, #64	; 0x40
 8001d9e:	2901      	cmp	r1, #1
 8001da0:	d149      	bne.n	8001e36 <HAL_CAN_Init+0xf6>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
    if (hcan->Init.AWUM == ENABLE)
 8001da8:	6a21      	ldr	r1, [r4, #32]
 8001daa:	2220      	movs	r2, #32
 8001dac:	2901      	cmp	r1, #1
 8001dae:	d146      	bne.n	8001e3e <HAL_CAN_Init+0xfe>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
    if (hcan->Init.NART == ENABLE)
 8001db6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001db8:	2210      	movs	r2, #16
 8001dba:	2901      	cmp	r1, #1
 8001dbc:	d143      	bne.n	8001e46 <HAL_CAN_Init+0x106>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
    if (hcan->Init.RFLM == ENABLE)
 8001dc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001dc6:	2208      	movs	r2, #8
 8001dc8:	2901      	cmp	r1, #1
 8001dca:	d140      	bne.n	8001e4e <HAL_CAN_Init+0x10e>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]
    if (hcan->Init.TXFP == ENABLE)
 8001dd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	2901      	cmp	r1, #1
 8001dd8:	d13d      	bne.n	8001e56 <HAL_CAN_Init+0x116>
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001de0:	2601      	movs	r6, #1
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001de2:	68e1      	ldr	r1, [r4, #12]
 8001de4:	68a2      	ldr	r2, [r4, #8]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	6921      	ldr	r1, [r4, #16]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	6961      	ldr	r1, [r4, #20]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	6861      	ldr	r1, [r4, #4]
 8001df2:	3901      	subs	r1, #1
 8001df4:	430a      	orrs	r2, r1
 8001df6:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	43b2      	bics	r2, r6
 8001dfc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();   
 8001dfe:	f7ff fc7f 	bl	8001700 <HAL_GetTick>
 8001e02:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4232      	tst	r2, r6
 8001e0a:	d128      	bne.n	8001e5e <HAL_CAN_Init+0x11e>
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001e0c:	6858      	ldr	r0, [r3, #4]
 8001e0e:	4030      	ands	r0, r6
 8001e10:	d130      	bne.n	8001e74 <HAL_CAN_Init+0x134>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e12:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8001e14:	702e      	strb	r6, [r5, #0]
    return HAL_OK;
 8001e16:	e009      	b.n	8001e2c <HAL_CAN_Init+0xec>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001e18:	f7ff fc72 	bl	8001700 <HAL_GetTick>
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	1ac0      	subs	r0, r0, r3
 8001e20:	280a      	cmp	r0, #10
 8001e22:	d9ab      	bls.n	8001d7c <HAL_CAN_Init+0x3c>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001e24:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8001e26:	343c      	adds	r4, #60	; 0x3c
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001e28:	7028      	strb	r0, [r5, #0]
      __HAL_UNLOCK(hcan);
 8001e2a:	7026      	strb	r6, [r4, #0]
}
 8001e2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	4391      	bics	r1, r2
 8001e32:	6019      	str	r1, [r3, #0]
 8001e34:	e7b1      	b.n	8001d9a <HAL_CAN_Init+0x5a>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	4391      	bics	r1, r2
 8001e3a:	6019      	str	r1, [r3, #0]
 8001e3c:	e7b4      	b.n	8001da8 <HAL_CAN_Init+0x68>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	4391      	bics	r1, r2
 8001e42:	6019      	str	r1, [r3, #0]
 8001e44:	e7b7      	b.n	8001db6 <HAL_CAN_Init+0x76>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e46:	6819      	ldr	r1, [r3, #0]
 8001e48:	4391      	bics	r1, r2
 8001e4a:	6019      	str	r1, [r3, #0]
 8001e4c:	e7ba      	b.n	8001dc4 <HAL_CAN_Init+0x84>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	4391      	bics	r1, r2
 8001e52:	6019      	str	r1, [r3, #0]
 8001e54:	e7bd      	b.n	8001dd2 <HAL_CAN_Init+0x92>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e56:	6819      	ldr	r1, [r3, #0]
 8001e58:	4391      	bics	r1, r2
 8001e5a:	6019      	str	r1, [r3, #0]
 8001e5c:	e7c0      	b.n	8001de0 <HAL_CAN_Init+0xa0>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001e5e:	f7ff fc4f 	bl	8001700 <HAL_GetTick>
 8001e62:	1bc0      	subs	r0, r0, r7
 8001e64:	280a      	cmp	r0, #10
 8001e66:	d9cd      	bls.n	8001e04 <HAL_CAN_Init+0xc4>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001e68:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	343c      	adds	r4, #60	; 0x3c
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001e6e:	7028      	strb	r0, [r5, #0]
       __HAL_UNLOCK(hcan);
 8001e70:	7023      	strb	r3, [r4, #0]
       return HAL_TIMEOUT;
 8001e72:	e7db      	b.n	8001e2c <HAL_CAN_Init+0xec>
    hcan->State = HAL_CAN_STATE_ERROR;
 8001e74:	2304      	movs	r3, #4
    return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
    hcan->State = HAL_CAN_STATE_ERROR;
 8001e78:	702b      	strb	r3, [r5, #0]
    return HAL_ERROR;
 8001e7a:	e7d7      	b.n	8001e2c <HAL_CAN_Init+0xec>

08001e7c <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber    FIFO number.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8001e7c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 8001e7e:	0004      	movs	r4, r0
 8001e80:	343c      	adds	r4, #60	; 0x3c
 8001e82:	7823      	ldrb	r3, [r4, #0]
{
 8001e84:	0005      	movs	r5, r0
  __HAL_LOCK(hcan);
 8001e86:	2002      	movs	r0, #2
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d014      	beq.n	8001eb6 <HAL_CAN_Receive_IT+0x3a>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	7023      	strb	r3, [r4, #0]
 8001e90:	002b      	movs	r3, r5
 8001e92:	333d      	adds	r3, #61	; 0x3d

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d10f      	bne.n	8001eb8 <HAL_CAN_Receive_IT+0x3c>
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	2a22      	cmp	r2, #34	; 0x22
 8001e9c:	d008      	beq.n	8001eb0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8001e9e:	781a      	ldrb	r2, [r3, #0]
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8001ea0:	2a42      	cmp	r2, #66	; 0x42
 8001ea2:	d005      	beq.n	8001eb0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001ea4:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8001ea6:	2a62      	cmp	r2, #98	; 0x62
 8001ea8:	d002      	beq.n	8001eb0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8001eaa:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001eac:	2a72      	cmp	r2, #114	; 0x72
 8001eae:	d11b      	bne.n	8001ee8 <HAL_CAN_Receive_IT+0x6c>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8001eb0:	2300      	movs	r3, #0

    return HAL_BUSY;
 8001eb2:	2002      	movs	r0, #2
    __HAL_UNLOCK(hcan);
 8001eb4:	7023      	strb	r3, [r4, #0]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }
  
  /* Return function status */
  return HAL_OK;
}
 8001eb6:	bd30      	pop	{r4, r5, pc}
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8001eb8:	2901      	cmp	r1, #1
 8001eba:	d10b      	bne.n	8001ed4 <HAL_CAN_Receive_IT+0x58>
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	2a32      	cmp	r2, #50	; 0x32
 8001ec0:	d0f6      	beq.n	8001eb0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8001ec2:	781a      	ldrb	r2, [r3, #0]
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8001ec4:	2a52      	cmp	r2, #82	; 0x52
 8001ec6:	d0f3      	beq.n	8001eb0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001ec8:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8001eca:	2a62      	cmp	r2, #98	; 0x62
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8001ece:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001ed0:	2a72      	cmp	r2, #114	; 0x72
 8001ed2:	d0ed      	beq.n	8001eb0 <HAL_CAN_Receive_IT+0x34>
    switch(hcan->State)
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	2a22      	cmp	r2, #34	; 0x22
 8001eda:	d022      	beq.n	8001f22 <HAL_CAN_Receive_IT+0xa6>
 8001edc:	2a42      	cmp	r2, #66	; 0x42
 8001ede:	d022      	beq.n	8001f26 <HAL_CAN_Receive_IT+0xaa>
 8001ee0:	2a12      	cmp	r2, #18
 8001ee2:	d122      	bne.n	8001f2a <HAL_CAN_Receive_IT+0xae>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001ee4:	3240      	adds	r2, #64	; 0x40
 8001ee6:	e008      	b.n	8001efa <HAL_CAN_Receive_IT+0x7e>
    switch(hcan->State)
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	2a32      	cmp	r2, #50	; 0x32
 8001eee:	d018      	beq.n	8001f22 <HAL_CAN_Receive_IT+0xa6>
 8001ef0:	2a52      	cmp	r2, #82	; 0x52
 8001ef2:	d018      	beq.n	8001f26 <HAL_CAN_Receive_IT+0xaa>
 8001ef4:	2a12      	cmp	r2, #18
 8001ef6:	d112      	bne.n	8001f1e <HAL_CAN_Receive_IT+0xa2>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001ef8:	3230      	adds	r2, #48	; 0x30
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001efa:	701a      	strb	r2, [r3, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001efc:	2300      	movs	r3, #0
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8001efe:	208f      	movs	r0, #143	; 0x8f
 8001f00:	682a      	ldr	r2, [r5, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f02:	642b      	str	r3, [r5, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8001f04:	6955      	ldr	r5, [r2, #20]
 8001f06:	0200      	lsls	r0, r0, #8
 8001f08:	4328      	orrs	r0, r5
 8001f0a:	6150      	str	r0, [r2, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8001f0c:	6950      	ldr	r0, [r2, #20]
  __HAL_UNLOCK(hcan);
 8001f0e:	7023      	strb	r3, [r4, #0]
  if(FIFONumber == CAN_FIFO0)
 8001f10:	4299      	cmp	r1, r3
 8001f12:	d10c      	bne.n	8001f2e <HAL_CAN_Receive_IT+0xb2>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8001f14:	330a      	adds	r3, #10
 8001f16:	4303      	orrs	r3, r0
 8001f18:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8001f1a:	0008      	movs	r0, r1
 8001f1c:	e7cb      	b.n	8001eb6 <HAL_CAN_Receive_IT+0x3a>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001f1e:	2222      	movs	r2, #34	; 0x22
 8001f20:	e7eb      	b.n	8001efa <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8001f22:	2262      	movs	r2, #98	; 0x62
 8001f24:	e7e9      	b.n	8001efa <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8001f26:	2272      	movs	r2, #114	; 0x72
 8001f28:	e7e7      	b.n	8001efa <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001f2a:	2232      	movs	r2, #50	; 0x32
 8001f2c:	e7e5      	b.n	8001efa <HAL_CAN_Receive_IT+0x7e>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8001f2e:	2150      	movs	r1, #80	; 0x50
 8001f30:	4301      	orrs	r1, r0
 8001f32:	6151      	str	r1, [r2, #20]
  return HAL_OK;
 8001f34:	0018      	movs	r0, r3
 8001f36:	e7be      	b.n	8001eb6 <HAL_CAN_Receive_IT+0x3a>

08001f38 <HAL_CAN_TxCpltCallback>:
 8001f38:	4770      	bx	lr
	...

08001f3c <CAN_Receive_IT>:
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8001f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 8001f3e:	2900      	cmp	r1, #0
 8001f40:	d161      	bne.n	8002006 <CAN_Receive_IT+0xca>
  {
    pRxMsg = hcan->pRxMsg;
 8001f42:	6b43      	ldr	r3, [r0, #52]	; 0x34
  {
    pRxMsg = hcan->pRx1Msg;
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8001f44:	26d8      	movs	r6, #216	; 0xd8
 8001f46:	6802      	ldr	r2, [r0, #0]
 8001f48:	010c      	lsls	r4, r1, #4
 8001f4a:	1915      	adds	r5, r2, r4
 8001f4c:	9401      	str	r4, [sp, #4]
 8001f4e:	2404      	movs	r4, #4
 8001f50:	0076      	lsls	r6, r6, #1
 8001f52:	59af      	ldr	r7, [r5, r6]
 8001f54:	4027      	ands	r7, r4
 8001f56:	609f      	str	r7, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8001f58:	d157      	bne.n	800200a <CAN_Receive_IT+0xce>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 8001f5a:	59af      	ldr	r7, [r5, r6]
 8001f5c:	0d7f      	lsrs	r7, r7, #21
 8001f5e:	601f      	str	r7, [r3, #0]
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f60:	27da      	movs	r7, #218	; 0xda
 8001f62:	240f      	movs	r4, #15
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8001f64:	59ae      	ldr	r6, [r5, r6]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f66:	007f      	lsls	r7, r7, #1
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8001f68:	07b6      	lsls	r6, r6, #30
 8001f6a:	0ff6      	lsrs	r6, r6, #31
 8001f6c:	60de      	str	r6, [r3, #12]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f6e:	59ee      	ldr	r6, [r5, r7]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f70:	59ed      	ldr	r5, [r5, r7]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f72:	4026      	ands	r6, r4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f74:	0a2d      	lsrs	r5, r5, #8
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001f76:	010c      	lsls	r4, r1, #4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f78:	b2ed      	uxtb	r5, r5
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001f7a:	1914      	adds	r4, r2, r4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f7c:	61dd      	str	r5, [r3, #28]
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001f7e:	0025      	movs	r5, r4
 8001f80:	35b9      	adds	r5, #185	; 0xb9
 8001f82:	35ff      	adds	r5, #255	; 0xff
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f84:	611e      	str	r6, [r3, #16]
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001f86:	682e      	ldr	r6, [r5, #0]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8001f88:	34bd      	adds	r4, #189	; 0xbd
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001f8a:	751e      	strb	r6, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8001f8c:	682e      	ldr	r6, [r5, #0]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8001f8e:	34ff      	adds	r4, #255	; 0xff
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8001f90:	0a36      	lsrs	r6, r6, #8
 8001f92:	755e      	strb	r6, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8001f94:	682e      	ldr	r6, [r5, #0]
  pRxMsg->FIFONumber = FIFONumber;
 8001f96:	6219      	str	r1, [r3, #32]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8001f98:	0c36      	lsrs	r6, r6, #16
 8001f9a:	759e      	strb	r6, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8001f9c:	682d      	ldr	r5, [r5, #0]
 8001f9e:	0e2d      	lsrs	r5, r5, #24
 8001fa0:	75dd      	strb	r5, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8001fa2:	6825      	ldr	r5, [r4, #0]
 8001fa4:	761d      	strb	r5, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8001fa6:	6825      	ldr	r5, [r4, #0]
 8001fa8:	0a2d      	lsrs	r5, r5, #8
 8001faa:	765d      	strb	r5, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8001fac:	6825      	ldr	r5, [r4, #0]
 8001fae:	0c2d      	lsrs	r5, r5, #16
 8001fb0:	769d      	strb	r5, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8001fb2:	6824      	ldr	r4, [r4, #0]
 8001fb4:	0e24      	lsrs	r4, r4, #24
 8001fb6:	76dc      	strb	r4, [r3, #27]
 8001fb8:	2320      	movs	r3, #32

  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001fba:	2900      	cmp	r1, #0
 8001fbc:	d129      	bne.n	8002012 <CAN_Receive_IT+0xd6>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8001fbe:	68d4      	ldr	r4, [r2, #12]
 8001fc0:	4323      	orrs	r3, r4
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8001fc2:	240a      	movs	r4, #10
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8001fc4:	60d3      	str	r3, [r2, #12]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8001fc6:	6953      	ldr	r3, [r2, #20]
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8001fc8:	43a3      	bics	r3, r4
 8001fca:	6153      	str	r3, [r2, #20]
  }
  
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 8001fcc:	0003      	movs	r3, r0
 8001fce:	333d      	adds	r3, #61	; 0x3d
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	2a22      	cmp	r2, #34	; 0x22
 8001fd4:	d002      	beq.n	8001fdc <CAN_Receive_IT+0xa0>
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	2a32      	cmp	r2, #50	; 0x32
 8001fda:	d104      	bne.n	8001fe6 <CAN_Receive_IT+0xaa>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001fdc:	6804      	ldr	r4, [r0, #0]
 8001fde:	4d19      	ldr	r5, [pc, #100]	; (8002044 <CAN_Receive_IT+0x108>)
 8001fe0:	6962      	ldr	r2, [r4, #20]
 8001fe2:	402a      	ands	r2, r5
 8001fe4:	6162      	str	r2, [r4, #20]
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	b2d2      	uxtb	r2, r2
  if (FIFONumber == CAN_FIFO0)
 8001fea:	2900      	cmp	r1, #0
 8001fec:	d11b      	bne.n	8002026 <CAN_Receive_IT+0xea>
    switch(hcan->State)
 8001fee:	2a62      	cmp	r2, #98	; 0x62
 8001ff0:	d015      	beq.n	800201e <CAN_Receive_IT+0xe2>
 8001ff2:	2a72      	cmp	r2, #114	; 0x72
 8001ff4:	d015      	beq.n	8002022 <CAN_Receive_IT+0xe6>
 8001ff6:	2a42      	cmp	r2, #66	; 0x42
 8001ff8:	d121      	bne.n	800203e <CAN_Receive_IT+0x102>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001ffa:	3a30      	subs	r2, #48	; 0x30
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 8001ffc:	701a      	strb	r2, [r3, #0]
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8001ffe:	f7ff fa05 	bl	800140c <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8002002:	2000      	movs	r0, #0
 8002004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pRxMsg = hcan->pRx1Msg;
 8002006:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002008:	e79c      	b.n	8001f44 <CAN_Receive_IT+0x8>
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 800200a:	59af      	ldr	r7, [r5, r6]
 800200c:	08ff      	lsrs	r7, r7, #3
 800200e:	605f      	str	r7, [r3, #4]
 8002010:	e7a6      	b.n	8001f60 <CAN_Receive_IT+0x24>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8002012:	6914      	ldr	r4, [r2, #16]
 8002014:	4323      	orrs	r3, r4
 8002016:	6113      	str	r3, [r2, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8002018:	6953      	ldr	r3, [r2, #20]
 800201a:	2450      	movs	r4, #80	; 0x50
 800201c:	e7d4      	b.n	8001fc8 <CAN_Receive_IT+0x8c>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800201e:	2232      	movs	r2, #50	; 0x32
 8002020:	e7ec      	b.n	8001ffc <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8002022:	2252      	movs	r2, #82	; 0x52
 8002024:	e7ea      	b.n	8001ffc <CAN_Receive_IT+0xc0>
    switch(hcan->State)
 8002026:	2a62      	cmp	r2, #98	; 0x62
 8002028:	d005      	beq.n	8002036 <CAN_Receive_IT+0xfa>
 800202a:	2a72      	cmp	r2, #114	; 0x72
 800202c:	d005      	beq.n	800203a <CAN_Receive_IT+0xfe>
 800202e:	2a52      	cmp	r2, #82	; 0x52
 8002030:	d105      	bne.n	800203e <CAN_Receive_IT+0x102>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8002032:	3a40      	subs	r2, #64	; 0x40
 8002034:	e7e2      	b.n	8001ffc <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8002036:	2222      	movs	r2, #34	; 0x22
 8002038:	e7e0      	b.n	8001ffc <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800203a:	2242      	movs	r2, #66	; 0x42
 800203c:	e7de      	b.n	8001ffc <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_READY;
 800203e:	2201      	movs	r2, #1
 8002040:	e7dc      	b.n	8001ffc <CAN_Receive_IT+0xc0>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	ffff70ff 	.word	0xffff70ff

08002048 <HAL_CAN_ErrorCallback>:
}
 8002048:	4770      	bx	lr
	...

0800204c <HAL_CAN_IRQHandler>:
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 800204c:	2210      	movs	r2, #16
 800204e:	6803      	ldr	r3, [r0, #0]
{
 8002050:	b570      	push	{r4, r5, r6, lr}
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8002052:	68d9      	ldr	r1, [r3, #12]
{
 8002054:	0004      	movs	r4, r0
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002056:	2500      	movs	r5, #0
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8002058:	4211      	tst	r1, r2
 800205a:	d005      	beq.n	8002068 <HAL_CAN_IRQHandler+0x1c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
 800205c:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 800205e:	0709      	lsls	r1, r1, #28
 8002060:	d502      	bpl.n	8002068 <HAL_CAN_IRQHandler+0x1c>
    errorcode |= HAL_CAN_ERROR_FOV0;
 8002062:	2580      	movs	r5, #128	; 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002064:	60da      	str	r2, [r3, #12]
    errorcode |= HAL_CAN_ERROR_FOV0;
 8002066:	00ad      	lsls	r5, r5, #2
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8002068:	2210      	movs	r2, #16
 800206a:	6919      	ldr	r1, [r3, #16]
 800206c:	4211      	tst	r1, r2
 800206e:	d006      	beq.n	800207e <HAL_CAN_IRQHandler+0x32>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
 8002070:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8002072:	0649      	lsls	r1, r1, #25
 8002074:	d503      	bpl.n	800207e <HAL_CAN_IRQHandler+0x32>
    errorcode |= HAL_CAN_ERROR_FOV1;
 8002076:	2180      	movs	r1, #128	; 0x80
 8002078:	00c9      	lsls	r1, r1, #3
 800207a:	430d      	orrs	r5, r1
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800207c:	611a      	str	r2, [r3, #16]
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	07d2      	lsls	r2, r2, #31
 8002082:	d53a      	bpl.n	80020fa <HAL_CAN_IRQHandler+0xae>
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	4964      	ldr	r1, [pc, #400]	; (8002218 <HAL_CAN_IRQHandler+0x1cc>)
 8002088:	400a      	ands	r2, r1
 800208a:	428a      	cmp	r2, r1
 800208c:	d009      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x56>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	4962      	ldr	r1, [pc, #392]	; (800221c <HAL_CAN_IRQHandler+0x1d0>)
 8002092:	400a      	ands	r2, r1
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8002094:	428a      	cmp	r2, r1
 8002096:	d004      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x56>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	4961      	ldr	r1, [pc, #388]	; (8002220 <HAL_CAN_IRQHandler+0x1d4>)
 800209c:	400a      	ands	r2, r1
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800209e:	428a      	cmp	r2, r1
 80020a0:	d12b      	bne.n	80020fa <HAL_CAN_IRQHandler+0xae>
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	0792      	lsls	r2, r2, #30
 80020a6:	d406      	bmi.n	80020b6 <HAL_CAN_IRQHandler+0x6a>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 80020a8:	689a      	ldr	r2, [r3, #8]
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 80020aa:	0592      	lsls	r2, r2, #22
 80020ac:	d403      	bmi.n	80020b6 <HAL_CAN_IRQHandler+0x6a>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
 80020ae:	689a      	ldr	r2, [r3, #8]
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 80020b0:	0392      	lsls	r2, r2, #14
 80020b2:	d400      	bmi.n	80020b6 <HAL_CAN_IRQHandler+0x6a>
 80020b4:	e092      	b.n	80021dc <HAL_CAN_IRQHandler+0x190>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 80020b6:	2101      	movs	r1, #1
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	438a      	bics	r2, r1
 80020bc:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 80020be:	0022      	movs	r2, r4
 80020c0:	323d      	adds	r2, #61	; 0x3d
 80020c2:	7811      	ldrb	r1, [r2, #0]
 80020c4:	2912      	cmp	r1, #18
 80020c6:	d103      	bne.n	80020d0 <HAL_CAN_IRQHandler+0x84>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80020c8:	6959      	ldr	r1, [r3, #20]
 80020ca:	4856      	ldr	r0, [pc, #344]	; (8002224 <HAL_CAN_IRQHandler+0x1d8>)
 80020cc:	4001      	ands	r1, r0
 80020ce:	6159      	str	r1, [r3, #20]
  switch(hcan->State)
 80020d0:	7813      	ldrb	r3, [r2, #0]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b52      	cmp	r3, #82	; 0x52
 80020d6:	d100      	bne.n	80020da <HAL_CAN_IRQHandler+0x8e>
 80020d8:	e07a      	b.n	80021d0 <HAL_CAN_IRQHandler+0x184>
 80020da:	2b72      	cmp	r3, #114	; 0x72
 80020dc:	d100      	bne.n	80020e0 <HAL_CAN_IRQHandler+0x94>
 80020de:	e079      	b.n	80021d4 <HAL_CAN_IRQHandler+0x188>
 80020e0:	2b42      	cmp	r3, #66	; 0x42
 80020e2:	d000      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x9a>
 80020e4:	e078      	b.n	80021d8 <HAL_CAN_IRQHandler+0x18c>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80020e6:	3b20      	subs	r3, #32
      hcan->State = HAL_CAN_STATE_READY;
 80020e8:	7013      	strb	r3, [r2, #0]
  HAL_CAN_TxCpltCallback(hcan);
 80020ea:	0020      	movs	r0, r4
 80020ec:	f7ff ff24 	bl	8001f38 <HAL_CAN_TxCpltCallback>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <HAL_CAN_IRQHandler+0x1dc>)
 80020f4:	6891      	ldr	r1, [r2, #8]
 80020f6:	430b      	orrs	r3, r1
 80020f8:	6093      	str	r3, [r2, #8]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	0792      	lsls	r2, r2, #30
 8002100:	d506      	bpl.n	8002110 <HAL_CAN_IRQHandler+0xc4>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
 8002102:	68db      	ldr	r3, [r3, #12]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8002104:	079b      	lsls	r3, r3, #30
 8002106:	d003      	beq.n	8002110 <HAL_CAN_IRQHandler+0xc4>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8002108:	2100      	movs	r1, #0
 800210a:	0020      	movs	r0, r4
 800210c:	f7ff ff16 	bl	8001f3c <CAN_Receive_IT>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	06d2      	lsls	r2, r2, #27
 8002116:	d506      	bpl.n	8002126 <HAL_CAN_IRQHandler+0xda>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
 8002118:	691b      	ldr	r3, [r3, #16]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800211a:	079b      	lsls	r3, r3, #30
 800211c:	d003      	beq.n	8002126 <HAL_CAN_IRQHandler+0xda>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 800211e:	2101      	movs	r1, #1
 8002120:	0020      	movs	r0, r4
 8002122:	f7ff ff0b 	bl	8001f3c <CAN_Receive_IT>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8002126:	2201      	movs	r2, #1
  hcan->ErrorCode |= errorcode;
 8002128:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800212a:	431d      	orrs	r5, r3
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800212c:	6823      	ldr	r3, [r4, #0]
  hcan->ErrorCode |= errorcode;
 800212e:	6425      	str	r5, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8002130:	6999      	ldr	r1, [r3, #24]
 8002132:	4211      	tst	r1, r2
 8002134:	d008      	beq.n	8002148 <HAL_CAN_IRQHandler+0xfc>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8002136:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8002138:	05c9      	lsls	r1, r1, #23
 800213a:	d505      	bpl.n	8002148 <HAL_CAN_IRQHandler+0xfc>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800213c:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800213e:	0409      	lsls	r1, r1, #16
 8002140:	d502      	bpl.n	8002148 <HAL_CAN_IRQHandler+0xfc>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8002142:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002144:	430a      	orrs	r2, r1
 8002146:	6422      	str	r2, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8002148:	2202      	movs	r2, #2
 800214a:	6999      	ldr	r1, [r3, #24]
 800214c:	4211      	tst	r1, r2
 800214e:	d008      	beq.n	8002162 <HAL_CAN_IRQHandler+0x116>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8002150:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8002152:	0589      	lsls	r1, r1, #22
 8002154:	d505      	bpl.n	8002162 <HAL_CAN_IRQHandler+0x116>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8002156:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8002158:	0409      	lsls	r1, r1, #16
 800215a:	d502      	bpl.n	8002162 <HAL_CAN_IRQHandler+0x116>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 800215c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800215e:	430a      	orrs	r2, r1
 8002160:	6422      	str	r2, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8002162:	2204      	movs	r2, #4
 8002164:	6999      	ldr	r1, [r3, #24]
 8002166:	4211      	tst	r1, r2
 8002168:	d008      	beq.n	800217c <HAL_CAN_IRQHandler+0x130>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800216a:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 800216c:	0549      	lsls	r1, r1, #21
 800216e:	d505      	bpl.n	800217c <HAL_CAN_IRQHandler+0x130>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8002170:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8002172:	0409      	lsls	r1, r1, #16
 8002174:	d502      	bpl.n	800217c <HAL_CAN_IRQHandler+0x130>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8002176:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002178:	430a      	orrs	r2, r1
 800217a:	6422      	str	r2, [r4, #64]	; 0x40
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 800217c:	2170      	movs	r1, #112	; 0x70
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	420a      	tst	r2, r1
 8002182:	d012      	beq.n	80021aa <HAL_CAN_IRQHandler+0x15e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8002184:	695a      	ldr	r2, [r3, #20]
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8002186:	0512      	lsls	r2, r2, #20
 8002188:	d50f      	bpl.n	80021aa <HAL_CAN_IRQHandler+0x15e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800218a:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800218c:	0412      	lsls	r2, r2, #16
 800218e:	d50c      	bpl.n	80021aa <HAL_CAN_IRQHandler+0x15e>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	400a      	ands	r2, r1
 8002194:	2a30      	cmp	r2, #48	; 0x30
 8002196:	d035      	beq.n	8002204 <HAL_CAN_IRQHandler+0x1b8>
 8002198:	d824      	bhi.n	80021e4 <HAL_CAN_IRQHandler+0x198>
 800219a:	2a10      	cmp	r2, #16
 800219c:	d02a      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x1a8>
 800219e:	2a20      	cmp	r2, #32
 80021a0:	d02d      	beq.n	80021fe <HAL_CAN_IRQHandler+0x1b2>
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021a2:	2170      	movs	r1, #112	; 0x70
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	438a      	bics	r2, r1
 80021a8:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 80021aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d00e      	beq.n	80021ce <HAL_CAN_IRQHandler+0x182>
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80021b0:	2204      	movs	r2, #4
 80021b2:	6859      	ldr	r1, [r3, #4]
    HAL_CAN_ErrorCallback(hcan);
 80021b4:	0020      	movs	r0, r4
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 80021ba:	0022      	movs	r2, r4
 80021bc:	2101      	movs	r1, #1
 80021be:	323d      	adds	r2, #61	; 0x3d
 80021c0:	7011      	strb	r1, [r2, #0]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	4919      	ldr	r1, [pc, #100]	; (800222c <HAL_CAN_IRQHandler+0x1e0>)
 80021c6:	400a      	ands	r2, r1
 80021c8:	615a      	str	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 80021ca:	f7ff ff3d 	bl	8002048 <HAL_CAN_ErrorCallback>
}
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80021d0:	2332      	movs	r3, #50	; 0x32
 80021d2:	e789      	b.n	80020e8 <HAL_CAN_IRQHandler+0x9c>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80021d4:	2362      	movs	r3, #98	; 0x62
 80021d6:	e787      	b.n	80020e8 <HAL_CAN_IRQHandler+0x9c>
      hcan->State = HAL_CAN_STATE_READY;
 80021d8:	2301      	movs	r3, #1
 80021da:	e785      	b.n	80020e8 <HAL_CAN_IRQHandler+0x9c>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	431d      	orrs	r5, r3
 80021e2:	e785      	b.n	80020f0 <HAL_CAN_IRQHandler+0xa4>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 80021e4:	2a50      	cmp	r2, #80	; 0x50
 80021e6:	d010      	beq.n	800220a <HAL_CAN_IRQHandler+0x1be>
 80021e8:	2a60      	cmp	r2, #96	; 0x60
 80021ea:	d011      	beq.n	8002210 <HAL_CAN_IRQHandler+0x1c4>
 80021ec:	2a40      	cmp	r2, #64	; 0x40
 80021ee:	d1d8      	bne.n	80021a2 <HAL_CAN_IRQHandler+0x156>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80021f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80021f2:	e001      	b.n	80021f8 <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 80021f4:	2208      	movs	r2, #8
 80021f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80021f8:	430a      	orrs	r2, r1
 80021fa:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 80021fc:	e7d1      	b.n	80021a2 <HAL_CAN_IRQHandler+0x156>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80021fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002200:	2210      	movs	r2, #16
 8002202:	e7f9      	b.n	80021f8 <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8002204:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002206:	2220      	movs	r2, #32
 8002208:	e7f6      	b.n	80021f8 <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 800220a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	e7f3      	b.n	80021f8 <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002214:	0052      	lsls	r2, r2, #1
 8002216:	e7ef      	b.n	80021f8 <HAL_CAN_IRQHandler+0x1ac>
 8002218:	04000001 	.word	0x04000001
 800221c:	08000100 	.word	0x08000100
 8002220:	10010000 	.word	0x10010000
 8002224:	ffff70ff 	.word	0xffff70ff
 8002228:	00010519 	.word	0x00010519
 800222c:	ffff70a4 	.word	0xffff70a4

08002230 <HAL_CAN_GetState>:
  return hcan->State;
 8002230:	303d      	adds	r0, #61	; 0x3d
 8002232:	7800      	ldrb	r0, [r0, #0]
 8002234:	b2c0      	uxtb	r0, r0
}
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_GetError>:
  return hcan->ErrorCode;
 8002238:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800223a:	4770      	bx	lr

0800223c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002240:	2800      	cmp	r0, #0
 8002242:	da14      	bge.n	800226e <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002244:	230f      	movs	r3, #15
 8002246:	b2c0      	uxtb	r0, r0
 8002248:	4003      	ands	r3, r0
 800224a:	3b08      	subs	r3, #8
 800224c:	4a11      	ldr	r2, [pc, #68]	; (8002294 <HAL_NVIC_SetPriority+0x58>)
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	189b      	adds	r3, r3, r2
 8002254:	2203      	movs	r2, #3
 8002256:	4010      	ands	r0, r2
 8002258:	4090      	lsls	r0, r2
 800225a:	32fc      	adds	r2, #252	; 0xfc
 800225c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800225e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002260:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002262:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002264:	69dc      	ldr	r4, [r3, #28]
 8002266:	43ac      	bics	r4, r5
 8002268:	4321      	orrs	r1, r4
 800226a:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800226c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800226e:	2503      	movs	r5, #3
 8002270:	0883      	lsrs	r3, r0, #2
 8002272:	4028      	ands	r0, r5
 8002274:	40a8      	lsls	r0, r5
 8002276:	35fc      	adds	r5, #252	; 0xfc
 8002278:	002e      	movs	r6, r5
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <HAL_NVIC_SetPriority+0x5c>)
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	189b      	adds	r3, r3, r2
 8002280:	22c0      	movs	r2, #192	; 0xc0
 8002282:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002284:	4029      	ands	r1, r5
 8002286:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	589c      	ldr	r4, [r3, r2]
 800228c:	43b4      	bics	r4, r6
 800228e:	4321      	orrs	r1, r4
 8002290:	5099      	str	r1, [r3, r2]
 8002292:	e7eb      	b.n	800226c <HAL_NVIC_SetPriority+0x30>
 8002294:	e000ed00 	.word	0xe000ed00
 8002298:	e000e100 	.word	0xe000e100

0800229c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800229c:	231f      	movs	r3, #31
 800229e:	4018      	ands	r0, r3
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	4083      	lsls	r3, r0
 80022a4:	4a01      	ldr	r2, [pc, #4]	; (80022ac <HAL_NVIC_EnableIRQ+0x10>)
 80022a6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022a8:	4770      	bx	lr
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_SYSTICK_Config+0x28>)
 80022b2:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b4:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d80d      	bhi.n	80022d6 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ba:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022bc:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022be:	4808      	ldr	r0, [pc, #32]	; (80022e0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c2:	6a03      	ldr	r3, [r0, #32]
 80022c4:	0609      	lsls	r1, r1, #24
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	430b      	orrs	r3, r1
 80022cc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ce:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d2:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022d6:	4770      	bx	lr
 80022d8:	00ffffff 	.word	0x00ffffff
 80022dc:	e000e010 	.word	0xe000e010
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80022e6:	680b      	ldr	r3, [r1, #0]
{ 
 80022e8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80022ea:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80022ec:	2300      	movs	r3, #0
{ 
 80022ee:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80022f0:	9a02      	ldr	r2, [sp, #8]
 80022f2:	40da      	lsrs	r2, r3
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80022f6:	b007      	add	sp, #28
 80022f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022fa:	2201      	movs	r2, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	9203      	str	r2, [sp, #12]
 8002300:	9903      	ldr	r1, [sp, #12]
 8002302:	9a02      	ldr	r2, [sp, #8]
 8002304:	400a      	ands	r2, r1
 8002306:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8002308:	d100      	bne.n	800230c <HAL_GPIO_Init+0x28>
 800230a:	e088      	b.n	800241e <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800230c:	9a01      	ldr	r2, [sp, #4]
 800230e:	2110      	movs	r1, #16
 8002310:	6852      	ldr	r2, [r2, #4]
 8002312:	0016      	movs	r6, r2
 8002314:	438e      	bics	r6, r1
 8002316:	2e02      	cmp	r6, #2
 8002318:	d10e      	bne.n	8002338 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800231a:	2507      	movs	r5, #7
 800231c:	401d      	ands	r5, r3
 800231e:	00ad      	lsls	r5, r5, #2
 8002320:	3901      	subs	r1, #1
 8002322:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8002324:	08dc      	lsrs	r4, r3, #3
 8002326:	00a4      	lsls	r4, r4, #2
 8002328:	1904      	adds	r4, r0, r4
 800232a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800232c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800232e:	9901      	ldr	r1, [sp, #4]
 8002330:	6909      	ldr	r1, [r1, #16]
 8002332:	40a9      	lsls	r1, r5
 8002334:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8002336:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002338:	2403      	movs	r4, #3
 800233a:	005f      	lsls	r7, r3, #1
 800233c:	40bc      	lsls	r4, r7
 800233e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002340:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002342:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002344:	4025      	ands	r5, r4
 8002346:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	2503      	movs	r5, #3
 800234a:	4015      	ands	r5, r2
 800234c:	40bd      	lsls	r5, r7
 800234e:	4661      	mov	r1, ip
 8002350:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8002352:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002354:	2e01      	cmp	r6, #1
 8002356:	d80f      	bhi.n	8002378 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002358:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800235a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800235c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800235e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002360:	40bd      	lsls	r5, r7
 8002362:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002364:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002366:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002368:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800236a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800236c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800236e:	2101      	movs	r1, #1
 8002370:	400d      	ands	r5, r1
 8002372:	409d      	lsls	r5, r3
 8002374:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002376:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8002378:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800237a:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800237e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002380:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002382:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002384:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002386:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002388:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800238a:	420a      	tst	r2, r1
 800238c:	d047      	beq.n	800241e <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2101      	movs	r1, #1
 8002390:	4c24      	ldr	r4, [pc, #144]	; (8002424 <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002392:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002394:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002396:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002398:	430d      	orrs	r5, r1
 800239a:	61a5      	str	r5, [r4, #24]
 800239c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800239e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a0:	400c      	ands	r4, r1
 80023a2:	9405      	str	r4, [sp, #20]
 80023a4:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80023a6:	240f      	movs	r4, #15
 80023a8:	491f      	ldr	r1, [pc, #124]	; (8002428 <HAL_GPIO_Init+0x144>)
 80023aa:	00ad      	lsls	r5, r5, #2
 80023ac:	00b6      	lsls	r6, r6, #2
 80023ae:	186d      	adds	r5, r5, r1
 80023b0:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 80023b4:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b6:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80023b8:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ba:	2400      	movs	r4, #0
 80023bc:	4288      	cmp	r0, r1
 80023be:	d008      	beq.n	80023d2 <HAL_GPIO_Init+0xee>
 80023c0:	491a      	ldr	r1, [pc, #104]	; (800242c <HAL_GPIO_Init+0x148>)
 80023c2:	3401      	adds	r4, #1
 80023c4:	4288      	cmp	r0, r1
 80023c6:	d004      	beq.n	80023d2 <HAL_GPIO_Init+0xee>
 80023c8:	4919      	ldr	r1, [pc, #100]	; (8002430 <HAL_GPIO_Init+0x14c>)
 80023ca:	3404      	adds	r4, #4
 80023cc:	4288      	cmp	r0, r1
 80023ce:	d100      	bne.n	80023d2 <HAL_GPIO_Init+0xee>
 80023d0:	3c03      	subs	r4, #3
 80023d2:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023d4:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023d6:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80023d8:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80023da:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80023dc:	4c15      	ldr	r4, [pc, #84]	; (8002434 <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023de:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80023e0:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80023e2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e4:	03d1      	lsls	r1, r2, #15
 80023e6:	d401      	bmi.n	80023ec <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023e8:	003e      	movs	r6, r7
 80023ea:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80023ec:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80023ee:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80023f0:	9e00      	ldr	r6, [sp, #0]
 80023f2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	0391      	lsls	r1, r2, #14
 80023f6:	d401      	bmi.n	80023fc <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80023f8:	003e      	movs	r6, r7
 80023fa:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80023fc:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80023fe:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8002400:	9e00      	ldr	r6, [sp, #0]
 8002402:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	02d1      	lsls	r1, r2, #11
 8002406:	d401      	bmi.n	800240c <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002408:	003e      	movs	r6, r7
 800240a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800240c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800240e:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8002410:	9f00      	ldr	r7, [sp, #0]
 8002412:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	0292      	lsls	r2, r2, #10
 8002416:	d401      	bmi.n	800241c <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002418:	402e      	ands	r6, r5
 800241a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800241c:	60e7      	str	r7, [r4, #12]
    position++;
 800241e:	3301      	adds	r3, #1
 8002420:	e766      	b.n	80022f0 <HAL_GPIO_Init+0xc>
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000
 800242c:	48000400 	.word	0x48000400
 8002430:	48000800 	.word	0x48000800
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002438:	2a00      	cmp	r2, #0
 800243a:	d001      	beq.n	8002440 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800243c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800243e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002440:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002442:	e7fc      	b.n	800243e <HAL_GPIO_WritePin+0x6>

08002444 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002444:	6943      	ldr	r3, [r0, #20]
 8002446:	4059      	eors	r1, r3
 8002448:	6141      	str	r1, [r0, #20]
}
 800244a:	4770      	bx	lr

0800244c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	6803      	ldr	r3, [r0, #0]
{
 8002450:	b085      	sub	sp, #20
 8002452:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002454:	07db      	lsls	r3, r3, #31
 8002456:	d433      	bmi.n	80024c0 <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	079b      	lsls	r3, r3, #30
 800245c:	d500      	bpl.n	8002460 <HAL_RCC_OscConfig+0x14>
 800245e:	e08a      	b.n	8002576 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	071b      	lsls	r3, r3, #28
 8002464:	d500      	bpl.n	8002468 <HAL_RCC_OscConfig+0x1c>
 8002466:	e0ca      	b.n	80025fe <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	075b      	lsls	r3, r3, #29
 800246c:	d500      	bpl.n	8002470 <HAL_RCC_OscConfig+0x24>
 800246e:	e0ed      	b.n	800264c <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	06db      	lsls	r3, r3, #27
 8002474:	d51a      	bpl.n	80024ac <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002476:	696a      	ldr	r2, [r5, #20]
 8002478:	4cbc      	ldr	r4, [pc, #752]	; (800276c <HAL_RCC_OscConfig+0x320>)
 800247a:	2304      	movs	r3, #4
 800247c:	2a01      	cmp	r2, #1
 800247e:	d000      	beq.n	8002482 <HAL_RCC_OscConfig+0x36>
 8002480:	e159      	b.n	8002736 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002482:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002484:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002486:	430b      	orrs	r3, r1
 8002488:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800248a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800248c:	431a      	orrs	r2, r3
 800248e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002490:	f7ff f936 	bl	8001700 <HAL_GetTick>
 8002494:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002498:	4233      	tst	r3, r6
 800249a:	d100      	bne.n	800249e <HAL_RCC_OscConfig+0x52>
 800249c:	e144      	b.n	8002728 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800249e:	21f8      	movs	r1, #248	; 0xf8
 80024a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80024a2:	69ab      	ldr	r3, [r5, #24]
 80024a4:	438a      	bics	r2, r1
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4313      	orrs	r3, r2
 80024aa:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	d500      	bpl.n	80024b4 <HAL_RCC_OscConfig+0x68>
 80024b2:	e167      	b.n	8002784 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80024b6:	2900      	cmp	r1, #0
 80024b8:	d000      	beq.n	80024bc <HAL_RCC_OscConfig+0x70>
 80024ba:	e1a4      	b.n	8002806 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80024bc:	2000      	movs	r0, #0
 80024be:	e018      	b.n	80024f2 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024c0:	210c      	movs	r1, #12
 80024c2:	4caa      	ldr	r4, [pc, #680]	; (800276c <HAL_RCC_OscConfig+0x320>)
 80024c4:	6862      	ldr	r2, [r4, #4]
 80024c6:	400a      	ands	r2, r1
 80024c8:	2a04      	cmp	r2, #4
 80024ca:	d00b      	beq.n	80024e4 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024cc:	6863      	ldr	r3, [r4, #4]
 80024ce:	400b      	ands	r3, r1
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d110      	bne.n	80024f6 <HAL_RCC_OscConfig+0xaa>
 80024d4:	22c0      	movs	r2, #192	; 0xc0
 80024d6:	6863      	ldr	r3, [r4, #4]
 80024d8:	0252      	lsls	r2, r2, #9
 80024da:	4013      	ands	r3, r2
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	0252      	lsls	r2, r2, #9
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d108      	bne.n	80024f6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	039b      	lsls	r3, r3, #14
 80024e8:	d5b6      	bpl.n	8002458 <HAL_RCC_OscConfig+0xc>
 80024ea:	686b      	ldr	r3, [r5, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1b3      	bne.n	8002458 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80024f0:	2001      	movs	r0, #1
}
 80024f2:	b005      	add	sp, #20
 80024f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f6:	686b      	ldr	r3, [r5, #4]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d113      	bne.n	8002524 <HAL_RCC_OscConfig+0xd8>
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	6822      	ldr	r2, [r4, #0]
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	4313      	orrs	r3, r2
 8002504:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002506:	f7ff f8fb 	bl	8001700 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800250c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	02b6      	lsls	r6, r6, #10
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	4233      	tst	r3, r6
 8002514:	d1a0      	bne.n	8002458 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002516:	f7ff f8f3 	bl	8001700 <HAL_GetTick>
 800251a:	1bc0      	subs	r0, r0, r7
 800251c:	2864      	cmp	r0, #100	; 0x64
 800251e:	d9f7      	bls.n	8002510 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8002520:	2003      	movs	r0, #3
 8002522:	e7e6      	b.n	80024f2 <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	2b00      	cmp	r3, #0
 8002526:	d116      	bne.n	8002556 <HAL_RCC_OscConfig+0x10a>
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	4a91      	ldr	r2, [pc, #580]	; (8002770 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252c:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252e:	4013      	ands	r3, r2
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	4a8f      	ldr	r2, [pc, #572]	; (8002774 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	4013      	ands	r3, r2
 800253a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800253c:	f7ff f8e0 	bl	8001700 <HAL_GetTick>
 8002540:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	4233      	tst	r3, r6
 8002546:	d100      	bne.n	800254a <HAL_RCC_OscConfig+0xfe>
 8002548:	e786      	b.n	8002458 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254a:	f7ff f8d9 	bl	8001700 <HAL_GetTick>
 800254e:	1bc0      	subs	r0, r0, r7
 8002550:	2864      	cmp	r0, #100	; 0x64
 8002552:	d9f6      	bls.n	8002542 <HAL_RCC_OscConfig+0xf6>
 8002554:	e7e4      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002556:	2b05      	cmp	r3, #5
 8002558:	d105      	bne.n	8002566 <HAL_RCC_OscConfig+0x11a>
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	6822      	ldr	r2, [r4, #0]
 800255e:	02db      	lsls	r3, r3, #11
 8002560:	4313      	orrs	r3, r2
 8002562:	6023      	str	r3, [r4, #0]
 8002564:	e7ca      	b.n	80024fc <HAL_RCC_OscConfig+0xb0>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	4a81      	ldr	r2, [pc, #516]	; (8002770 <HAL_RCC_OscConfig+0x324>)
 800256a:	4013      	ands	r3, r2
 800256c:	6023      	str	r3, [r4, #0]
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	4a80      	ldr	r2, [pc, #512]	; (8002774 <HAL_RCC_OscConfig+0x328>)
 8002572:	4013      	ands	r3, r2
 8002574:	e7c6      	b.n	8002504 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002576:	220c      	movs	r2, #12
 8002578:	4c7c      	ldr	r4, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x320>)
 800257a:	6863      	ldr	r3, [r4, #4]
 800257c:	4213      	tst	r3, r2
 800257e:	d00b      	beq.n	8002598 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002580:	6863      	ldr	r3, [r4, #4]
 8002582:	4013      	ands	r3, r2
 8002584:	2b08      	cmp	r3, #8
 8002586:	d115      	bne.n	80025b4 <HAL_RCC_OscConfig+0x168>
 8002588:	22c0      	movs	r2, #192	; 0xc0
 800258a:	6863      	ldr	r3, [r4, #4]
 800258c:	0252      	lsls	r2, r2, #9
 800258e:	4013      	ands	r3, r2
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	0212      	lsls	r2, r2, #8
 8002594:	4293      	cmp	r3, r2
 8002596:	d10d      	bne.n	80025b4 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	079b      	lsls	r3, r3, #30
 800259c:	d502      	bpl.n	80025a4 <HAL_RCC_OscConfig+0x158>
 800259e:	68eb      	ldr	r3, [r5, #12]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d1a5      	bne.n	80024f0 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	21f8      	movs	r1, #248	; 0xf8
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	692b      	ldr	r3, [r5, #16]
 80025aa:	438a      	bics	r2, r1
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	6023      	str	r3, [r4, #0]
 80025b2:	e755      	b.n	8002460 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b4:	68ea      	ldr	r2, [r5, #12]
 80025b6:	2301      	movs	r3, #1
 80025b8:	2a00      	cmp	r2, #0
 80025ba:	d00f      	beq.n	80025dc <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 80025bc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4313      	orrs	r3, r2
 80025c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025c4:	f7ff f89c 	bl	8001700 <HAL_GetTick>
 80025c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	4233      	tst	r3, r6
 80025ce:	d1e9      	bne.n	80025a4 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d0:	f7ff f896 	bl	8001700 <HAL_GetTick>
 80025d4:	1bc0      	subs	r0, r0, r7
 80025d6:	2802      	cmp	r0, #2
 80025d8:	d9f7      	bls.n	80025ca <HAL_RCC_OscConfig+0x17e>
 80025da:	e7a1      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 80025dc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80025e0:	439a      	bics	r2, r3
 80025e2:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80025e4:	f7ff f88c 	bl	8001700 <HAL_GetTick>
 80025e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	4233      	tst	r3, r6
 80025ee:	d100      	bne.n	80025f2 <HAL_RCC_OscConfig+0x1a6>
 80025f0:	e736      	b.n	8002460 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff f885 	bl	8001700 <HAL_GetTick>
 80025f6:	1bc0      	subs	r0, r0, r7
 80025f8:	2802      	cmp	r0, #2
 80025fa:	d9f6      	bls.n	80025ea <HAL_RCC_OscConfig+0x19e>
 80025fc:	e790      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fe:	69ea      	ldr	r2, [r5, #28]
 8002600:	2301      	movs	r3, #1
 8002602:	4c5a      	ldr	r4, [pc, #360]	; (800276c <HAL_RCC_OscConfig+0x320>)
 8002604:	2a00      	cmp	r2, #0
 8002606:	d010      	beq.n	800262a <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 8002608:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800260c:	4313      	orrs	r3, r2
 800260e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002610:	f7ff f876 	bl	8001700 <HAL_GetTick>
 8002614:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002618:	4233      	tst	r3, r6
 800261a:	d000      	beq.n	800261e <HAL_RCC_OscConfig+0x1d2>
 800261c:	e724      	b.n	8002468 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff f86f 	bl	8001700 <HAL_GetTick>
 8002622:	1bc0      	subs	r0, r0, r7
 8002624:	2802      	cmp	r0, #2
 8002626:	d9f6      	bls.n	8002616 <HAL_RCC_OscConfig+0x1ca>
 8002628:	e77a      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 800262a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800262e:	439a      	bics	r2, r3
 8002630:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002632:	f7ff f865 	bl	8001700 <HAL_GetTick>
 8002636:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800263a:	4233      	tst	r3, r6
 800263c:	d100      	bne.n	8002640 <HAL_RCC_OscConfig+0x1f4>
 800263e:	e713      	b.n	8002468 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff f85e 	bl	8001700 <HAL_GetTick>
 8002644:	1bc0      	subs	r0, r0, r7
 8002646:	2802      	cmp	r0, #2
 8002648:	d9f6      	bls.n	8002638 <HAL_RCC_OscConfig+0x1ec>
 800264a:	e769      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002650:	4c46      	ldr	r4, [pc, #280]	; (800276c <HAL_RCC_OscConfig+0x320>)
 8002652:	0552      	lsls	r2, r2, #21
 8002654:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002656:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002658:	4213      	tst	r3, r2
 800265a:	d108      	bne.n	800266e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	69e3      	ldr	r3, [r4, #28]
 800265e:	4313      	orrs	r3, r2
 8002660:	61e3      	str	r3, [r4, #28]
 8002662:	69e3      	ldr	r3, [r4, #28]
 8002664:	4013      	ands	r3, r2
 8002666:	9303      	str	r3, [sp, #12]
 8002668:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	2780      	movs	r7, #128	; 0x80
 8002670:	4e41      	ldr	r6, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x32c>)
 8002672:	007f      	lsls	r7, r7, #1
 8002674:	6833      	ldr	r3, [r6, #0]
 8002676:	423b      	tst	r3, r7
 8002678:	d006      	beq.n	8002688 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267a:	68ab      	ldr	r3, [r5, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d113      	bne.n	80026a8 <HAL_RCC_OscConfig+0x25c>
 8002680:	6a22      	ldr	r2, [r4, #32]
 8002682:	4313      	orrs	r3, r2
 8002684:	6223      	str	r3, [r4, #32]
 8002686:	e030      	b.n	80026ea <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002688:	6833      	ldr	r3, [r6, #0]
 800268a:	433b      	orrs	r3, r7
 800268c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800268e:	f7ff f837 	bl	8001700 <HAL_GetTick>
 8002692:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	6833      	ldr	r3, [r6, #0]
 8002696:	423b      	tst	r3, r7
 8002698:	d1ef      	bne.n	800267a <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7ff f831 	bl	8001700 <HAL_GetTick>
 800269e:	9b01      	ldr	r3, [sp, #4]
 80026a0:	1ac0      	subs	r0, r0, r3
 80026a2:	2864      	cmp	r0, #100	; 0x64
 80026a4:	d9f6      	bls.n	8002694 <HAL_RCC_OscConfig+0x248>
 80026a6:	e73b      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 80026a8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d114      	bne.n	80026d8 <HAL_RCC_OscConfig+0x28c>
 80026ae:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b2:	4393      	bics	r3, r2
 80026b4:	6223      	str	r3, [r4, #32]
 80026b6:	6a23      	ldr	r3, [r4, #32]
 80026b8:	3203      	adds	r2, #3
 80026ba:	4393      	bics	r3, r2
 80026bc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80026be:	f7ff f81f 	bl	8001700 <HAL_GetTick>
 80026c2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	6a23      	ldr	r3, [r4, #32]
 80026c6:	423b      	tst	r3, r7
 80026c8:	d025      	beq.n	8002716 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff f819 	bl	8001700 <HAL_GetTick>
 80026ce:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_RCC_OscConfig+0x330>)
 80026d0:	1b80      	subs	r0, r0, r6
 80026d2:	4298      	cmp	r0, r3
 80026d4:	d9f6      	bls.n	80026c4 <HAL_RCC_OscConfig+0x278>
 80026d6:	e723      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d10b      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2a8>
 80026dc:	6a21      	ldr	r1, [r4, #32]
 80026de:	3b01      	subs	r3, #1
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6223      	str	r3, [r4, #32]
 80026e4:	6a23      	ldr	r3, [r4, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80026ea:	f7ff f809 	bl	8001700 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80026f0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	e00d      	b.n	8002710 <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	6a23      	ldr	r3, [r4, #32]
 80026f6:	4393      	bics	r3, r2
 80026f8:	2204      	movs	r2, #4
 80026fa:	6223      	str	r3, [r4, #32]
 80026fc:	6a23      	ldr	r3, [r4, #32]
 80026fe:	4393      	bics	r3, r2
 8002700:	e7c0      	b.n	8002684 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fffd 	bl	8001700 <HAL_GetTick>
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x330>)
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	4298      	cmp	r0, r3
 800270c:	d900      	bls.n	8002710 <HAL_RCC_OscConfig+0x2c4>
 800270e:	e707      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	6a23      	ldr	r3, [r4, #32]
 8002712:	423b      	tst	r3, r7
 8002714:	d0f5      	beq.n	8002702 <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 8002716:	9b00      	ldr	r3, [sp, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d000      	beq.n	800271e <HAL_RCC_OscConfig+0x2d2>
 800271c:	e6a8      	b.n	8002470 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	69e3      	ldr	r3, [r4, #28]
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <HAL_RCC_OscConfig+0x334>)
 8002722:	4013      	ands	r3, r2
 8002724:	61e3      	str	r3, [r4, #28]
 8002726:	e6a3      	b.n	8002470 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002728:	f7fe ffea 	bl	8001700 <HAL_GetTick>
 800272c:	1bc0      	subs	r0, r0, r7
 800272e:	2802      	cmp	r0, #2
 8002730:	d800      	bhi.n	8002734 <HAL_RCC_OscConfig+0x2e8>
 8002732:	e6b0      	b.n	8002496 <HAL_RCC_OscConfig+0x4a>
 8002734:	e6f4      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002736:	3205      	adds	r2, #5
 8002738:	d103      	bne.n	8002742 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 800273a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800273c:	439a      	bics	r2, r3
 800273e:	6362      	str	r2, [r4, #52]	; 0x34
 8002740:	e6ad      	b.n	800249e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002742:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002744:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002746:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002748:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800274a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800274c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800274e:	4393      	bics	r3, r2
 8002750:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002752:	f7fe ffd5 	bl	8001700 <HAL_GetTick>
 8002756:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800275a:	4233      	tst	r3, r6
 800275c:	d100      	bne.n	8002760 <HAL_RCC_OscConfig+0x314>
 800275e:	e6a5      	b.n	80024ac <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002760:	f7fe ffce 	bl	8001700 <HAL_GetTick>
 8002764:	1bc0      	subs	r0, r0, r7
 8002766:	2802      	cmp	r0, #2
 8002768:	d9f6      	bls.n	8002758 <HAL_RCC_OscConfig+0x30c>
 800276a:	e6d9      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 800276c:	40021000 	.word	0x40021000
 8002770:	fffeffff 	.word	0xfffeffff
 8002774:	fffbffff 	.word	0xfffbffff
 8002778:	40007000 	.word	0x40007000
 800277c:	00001388 	.word	0x00001388
 8002780:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002784:	210c      	movs	r1, #12
 8002786:	4c46      	ldr	r4, [pc, #280]	; (80028a0 <HAL_RCC_OscConfig+0x454>)
 8002788:	6862      	ldr	r2, [r4, #4]
 800278a:	400a      	ands	r2, r1
 800278c:	428a      	cmp	r2, r1
 800278e:	d009      	beq.n	80027a4 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002790:	6863      	ldr	r3, [r4, #4]
 8002792:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002794:	2b08      	cmp	r3, #8
 8002796:	d10e      	bne.n	80027b6 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002798:	22c0      	movs	r2, #192	; 0xc0
 800279a:	6863      	ldr	r3, [r4, #4]
 800279c:	0252      	lsls	r2, r2, #9
 800279e:	4013      	ands	r3, r2
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80027a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027a6:	03db      	lsls	r3, r3, #15
 80027a8:	d400      	bmi.n	80027ac <HAL_RCC_OscConfig+0x360>
 80027aa:	e683      	b.n	80024b4 <HAL_RCC_OscConfig+0x68>
 80027ac:	6a2b      	ldr	r3, [r5, #32]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d000      	beq.n	80027b4 <HAL_RCC_OscConfig+0x368>
 80027b2:	e69d      	b.n	80024f0 <HAL_RCC_OscConfig+0xa4>
 80027b4:	e67e      	b.n	80024b4 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b6:	6a2b      	ldr	r3, [r5, #32]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d011      	beq.n	80027e0 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 80027bc:	2680      	movs	r6, #128	; 0x80
 80027be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027c0:	0276      	lsls	r6, r6, #9
 80027c2:	4333      	orrs	r3, r6
 80027c4:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 80027c6:	f7fe ff9b 	bl	8001700 <HAL_GetTick>
 80027ca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027ce:	4233      	tst	r3, r6
 80027d0:	d000      	beq.n	80027d4 <HAL_RCC_OscConfig+0x388>
 80027d2:	e66f      	b.n	80024b4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d4:	f7fe ff94 	bl	8001700 <HAL_GetTick>
 80027d8:	1bc0      	subs	r0, r0, r7
 80027da:	2802      	cmp	r0, #2
 80027dc:	d9f6      	bls.n	80027cc <HAL_RCC_OscConfig+0x380>
 80027de:	e69f      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 80027e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027e2:	4a30      	ldr	r2, [pc, #192]	; (80028a4 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80027e4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80027e6:	4013      	ands	r3, r2
 80027e8:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 80027ea:	f7fe ff89 	bl	8001700 <HAL_GetTick>
 80027ee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80027f0:	0276      	lsls	r6, r6, #9
 80027f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027f4:	4233      	tst	r3, r6
 80027f6:	d100      	bne.n	80027fa <HAL_RCC_OscConfig+0x3ae>
 80027f8:	e65c      	b.n	80024b4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027fa:	f7fe ff81 	bl	8001700 <HAL_GetTick>
 80027fe:	1bc0      	subs	r0, r0, r7
 8002800:	2802      	cmp	r0, #2
 8002802:	d9f6      	bls.n	80027f2 <HAL_RCC_OscConfig+0x3a6>
 8002804:	e68c      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002806:	220c      	movs	r2, #12
 8002808:	4c25      	ldr	r4, [pc, #148]	; (80028a0 <HAL_RCC_OscConfig+0x454>)
 800280a:	6863      	ldr	r3, [r4, #4]
 800280c:	4013      	ands	r3, r2
 800280e:	2b08      	cmp	r3, #8
 8002810:	d100      	bne.n	8002814 <HAL_RCC_OscConfig+0x3c8>
 8002812:	e66d      	b.n	80024f0 <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_RCC_OscConfig+0x45c>)
 8002818:	4013      	ands	r3, r2
 800281a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281c:	2902      	cmp	r1, #2
 800281e:	d12f      	bne.n	8002880 <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 8002820:	f7fe ff6e 	bl	8001700 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002826:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	04b6      	lsls	r6, r6, #18
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	4233      	tst	r3, r6
 800282e:	d121      	bne.n	8002874 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002830:	220f      	movs	r2, #15
 8002832:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002834:	4393      	bics	r3, r2
 8002836:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002838:	4313      	orrs	r3, r2
 800283a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800283c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800283e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002840:	6862      	ldr	r2, [r4, #4]
 8002842:	430b      	orrs	r3, r1
 8002844:	4919      	ldr	r1, [pc, #100]	; (80028ac <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002846:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002848:	400a      	ands	r2, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	045b      	lsls	r3, r3, #17
 8002854:	4313      	orrs	r3, r2
 8002856:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002858:	f7fe ff52 	bl	8001700 <HAL_GetTick>
 800285c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285e:	04ad      	lsls	r5, r5, #18
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	422b      	tst	r3, r5
 8002864:	d000      	beq.n	8002868 <HAL_RCC_OscConfig+0x41c>
 8002866:	e629      	b.n	80024bc <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe ff4a 	bl	8001700 <HAL_GetTick>
 800286c:	1b80      	subs	r0, r0, r6
 800286e:	2802      	cmp	r0, #2
 8002870:	d9f6      	bls.n	8002860 <HAL_RCC_OscConfig+0x414>
 8002872:	e655      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe ff44 	bl	8001700 <HAL_GetTick>
 8002878:	1bc0      	subs	r0, r0, r7
 800287a:	2802      	cmp	r0, #2
 800287c:	d9d5      	bls.n	800282a <HAL_RCC_OscConfig+0x3de>
 800287e:	e64f      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8002880:	f7fe ff3e 	bl	8001700 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002886:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002888:	04ad      	lsls	r5, r5, #18
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	422b      	tst	r3, r5
 800288e:	d100      	bne.n	8002892 <HAL_RCC_OscConfig+0x446>
 8002890:	e614      	b.n	80024bc <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe ff35 	bl	8001700 <HAL_GetTick>
 8002896:	1b80      	subs	r0, r0, r6
 8002898:	2802      	cmp	r0, #2
 800289a:	d9f6      	bls.n	800288a <HAL_RCC_OscConfig+0x43e>
 800289c:	e640      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40021000 	.word	0x40021000
 80028a4:	fffeffff 	.word	0xfffeffff
 80028a8:	feffffff 	.word	0xfeffffff
 80028ac:	ffc27fff 	.word	0xffc27fff

080028b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80028b2:	4c19      	ldr	r4, [pc, #100]	; (8002918 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80028b4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80028b6:	2210      	movs	r2, #16
 80028b8:	0021      	movs	r1, r4
 80028ba:	4668      	mov	r0, sp
 80028bc:	f000 fb88 	bl	8002fd0 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80028c0:	0021      	movs	r1, r4
 80028c2:	ad04      	add	r5, sp, #16
 80028c4:	2210      	movs	r2, #16
 80028c6:	3110      	adds	r1, #16
 80028c8:	0028      	movs	r0, r5
 80028ca:	f000 fb81 	bl	8002fd0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ce:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80028d0:	4e12      	ldr	r6, [pc, #72]	; (800291c <HAL_RCC_GetSysClockFreq+0x6c>)
 80028d2:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80028d4:	401a      	ands	r2, r3
 80028d6:	2a08      	cmp	r2, #8
 80028d8:	d004      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x34>
 80028da:	2a0c      	cmp	r2, #12
 80028dc:	d11a      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80028de:	4810      	ldr	r0, [pc, #64]	; (8002920 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80028e0:	b008      	add	sp, #32
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028e4:	200f      	movs	r0, #15
 80028e6:	466a      	mov	r2, sp
 80028e8:	0c99      	lsrs	r1, r3, #18
 80028ea:	4001      	ands	r1, r0
 80028ec:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028ee:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80028f0:	4002      	ands	r2, r0
 80028f2:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028f4:	22c0      	movs	r2, #192	; 0xc0
 80028f6:	2080      	movs	r0, #128	; 0x80
 80028f8:	0252      	lsls	r2, r2, #9
 80028fa:	4013      	ands	r3, r2
 80028fc:	0240      	lsls	r0, r0, #9
 80028fe:	4283      	cmp	r3, r0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002902:	4808      	ldr	r0, [pc, #32]	; (8002924 <HAL_RCC_GetSysClockFreq+0x74>)
 8002904:	e002      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002906:	4293      	cmp	r3, r2
 8002908:	d1fb      	bne.n	8002902 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800290c:	f7fd fc06 	bl	800011c <__udivsi3>
 8002910:	4360      	muls	r0, r4
 8002912:	e7e5      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8002914:	4803      	ldr	r0, [pc, #12]	; (8002924 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8002916:	e7e3      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x30>
 8002918:	0800300c 	.word	0x0800300c
 800291c:	40021000 	.word	0x40021000
 8002920:	02dc6c00 	.word	0x02dc6c00
 8002924:	007a1200 	.word	0x007a1200

08002928 <HAL_RCC_ClockConfig>:
{
 8002928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800292a:	2201      	movs	r2, #1
 800292c:	4c4f      	ldr	r4, [pc, #316]	; (8002a6c <HAL_RCC_ClockConfig+0x144>)
{
 800292e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002930:	6823      	ldr	r3, [r4, #0]
{
 8002932:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002934:	4013      	ands	r3, r2
 8002936:	428b      	cmp	r3, r1
 8002938:	d31f      	bcc.n	800297a <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293a:	6832      	ldr	r2, [r6, #0]
 800293c:	0793      	lsls	r3, r2, #30
 800293e:	d428      	bmi.n	8002992 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002940:	07d3      	lsls	r3, r2, #31
 8002942:	d42e      	bmi.n	80029a2 <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002944:	2301      	movs	r3, #1
 8002946:	6822      	ldr	r2, [r4, #0]
 8002948:	9901      	ldr	r1, [sp, #4]
 800294a:	401a      	ands	r2, r3
 800294c:	4291      	cmp	r1, r2
 800294e:	d200      	bcs.n	8002952 <HAL_RCC_ClockConfig+0x2a>
 8002950:	e07e      	b.n	8002a50 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002952:	6833      	ldr	r3, [r6, #0]
 8002954:	4c46      	ldr	r4, [pc, #280]	; (8002a70 <HAL_RCC_ClockConfig+0x148>)
 8002956:	075b      	lsls	r3, r3, #29
 8002958:	d500      	bpl.n	800295c <HAL_RCC_ClockConfig+0x34>
 800295a:	e080      	b.n	8002a5e <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800295c:	f7ff ffa8 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8002960:	6863      	ldr	r3, [r4, #4]
 8002962:	4a44      	ldr	r2, [pc, #272]	; (8002a74 <HAL_RCC_ClockConfig+0x14c>)
 8002964:	061b      	lsls	r3, r3, #24
 8002966:	0f1b      	lsrs	r3, r3, #28
 8002968:	5cd3      	ldrb	r3, [r2, r3]
 800296a:	40d8      	lsrs	r0, r3
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_RCC_ClockConfig+0x150>)
 800296e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002970:	2000      	movs	r0, #0
 8002972:	f7fe fe9b 	bl	80016ac <HAL_InitTick>
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
 8002978:	e00a      	b.n	8002990 <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	9901      	ldr	r1, [sp, #4]
 800297e:	4393      	bics	r3, r2
 8002980:	430b      	orrs	r3, r1
 8002982:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	4013      	ands	r3, r2
 8002988:	9a01      	ldr	r2, [sp, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d0d5      	beq.n	800293a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800298e:	2001      	movs	r0, #1
}
 8002990:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002992:	20f0      	movs	r0, #240	; 0xf0
 8002994:	4936      	ldr	r1, [pc, #216]	; (8002a70 <HAL_RCC_ClockConfig+0x148>)
 8002996:	684b      	ldr	r3, [r1, #4]
 8002998:	4383      	bics	r3, r0
 800299a:	68b0      	ldr	r0, [r6, #8]
 800299c:	4303      	orrs	r3, r0
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e7ce      	b.n	8002940 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a2:	6872      	ldr	r2, [r6, #4]
 80029a4:	4d32      	ldr	r5, [pc, #200]	; (8002a70 <HAL_RCC_ClockConfig+0x148>)
 80029a6:	2a01      	cmp	r2, #1
 80029a8:	d11a      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	682b      	ldr	r3, [r5, #0]
 80029ac:	039b      	lsls	r3, r3, #14
 80029ae:	d5ee      	bpl.n	800298e <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b0:	2103      	movs	r1, #3
 80029b2:	686b      	ldr	r3, [r5, #4]
 80029b4:	438b      	bics	r3, r1
 80029b6:	4313      	orrs	r3, r2
 80029b8:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80029ba:	f7fe fea1 	bl	8001700 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80029c0:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c6:	220c      	movs	r2, #12
 80029c8:	686b      	ldr	r3, [r5, #4]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d0b9      	beq.n	8002944 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fe fe96 	bl	8001700 <HAL_GetTick>
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_ClockConfig+0x154>)
 80029d6:	1bc0      	subs	r0, r0, r7
 80029d8:	4298      	cmp	r0, r3
 80029da:	d9f4      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 80029dc:	2003      	movs	r0, #3
 80029de:	e7d7      	b.n	8002990 <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e0:	2a02      	cmp	r2, #2
 80029e2:	d103      	bne.n	80029ec <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	019b      	lsls	r3, r3, #6
 80029e8:	d4e2      	bmi.n	80029b0 <HAL_RCC_ClockConfig+0x88>
 80029ea:	e7d0      	b.n	800298e <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80029ec:	2a03      	cmp	r2, #3
 80029ee:	d103      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80029f2:	03db      	lsls	r3, r3, #15
 80029f4:	d4dc      	bmi.n	80029b0 <HAL_RCC_ClockConfig+0x88>
 80029f6:	e7ca      	b.n	800298e <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	079b      	lsls	r3, r3, #30
 80029fc:	d4d8      	bmi.n	80029b0 <HAL_RCC_ClockConfig+0x88>
 80029fe:	e7c6      	b.n	800298e <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d10b      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a04:	220c      	movs	r2, #12
 8002a06:	686b      	ldr	r3, [r5, #4]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d09a      	beq.n	8002944 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0e:	f7fe fe77 	bl	8001700 <HAL_GetTick>
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <HAL_RCC_ClockConfig+0x154>)
 8002a14:	1bc0      	subs	r0, r0, r7
 8002a16:	4298      	cmp	r0, r3
 8002a18:	d9f4      	bls.n	8002a04 <HAL_RCC_ClockConfig+0xdc>
 8002a1a:	e7df      	b.n	80029dc <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d011      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a20:	220c      	movs	r2, #12
 8002a22:	686b      	ldr	r3, [r5, #4]
 8002a24:	4213      	tst	r3, r2
 8002a26:	d100      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x102>
 8002a28:	e78c      	b.n	8002944 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2a:	f7fe fe69 	bl	8001700 <HAL_GetTick>
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_RCC_ClockConfig+0x154>)
 8002a30:	1bc0      	subs	r0, r0, r7
 8002a32:	4298      	cmp	r0, r3
 8002a34:	d9f4      	bls.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
 8002a36:	e7d1      	b.n	80029dc <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fe fe62 	bl	8001700 <HAL_GetTick>
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_RCC_ClockConfig+0x154>)
 8002a3e:	1bc0      	subs	r0, r0, r7
 8002a40:	4298      	cmp	r0, r3
 8002a42:	d8cb      	bhi.n	80029dc <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002a44:	220c      	movs	r2, #12
 8002a46:	686b      	ldr	r3, [r5, #4]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d1f4      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x110>
 8002a4e:	e779      	b.n	8002944 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	439a      	bics	r2, r3
 8002a54:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	421a      	tst	r2, r3
 8002a5a:	d198      	bne.n	800298e <HAL_RCC_ClockConfig+0x66>
 8002a5c:	e779      	b.n	8002952 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5e:	6863      	ldr	r3, [r4, #4]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_RCC_ClockConfig+0x158>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	68f2      	ldr	r2, [r6, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	6063      	str	r3, [r4, #4]
 8002a6a:	e777      	b.n	800295c <HAL_RCC_ClockConfig+0x34>
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40021000 	.word	0x40021000
 8002a74:	0800306c 	.word	0x0800306c
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	00001388 	.word	0x00001388
 8002a80:	fffff8ff 	.word	0xfffff8ff

08002a84 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002a84:	4b01      	ldr	r3, [pc, #4]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x8>)
 8002a86:	6818      	ldr	r0, [r3, #0]
}
 8002a88:	4770      	bx	lr
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	20000000 	.word	0x20000000

08002a90 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a90:	2201      	movs	r2, #1
 8002a92:	6a03      	ldr	r3, [r0, #32]
{
 8002a94:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a96:	4393      	bics	r3, r2
 8002a98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a9e:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aa0:	3272      	adds	r2, #114	; 0x72
 8002aa2:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa4:	680a      	ldr	r2, [r1, #0]
 8002aa6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aac:	688a      	ldr	r2, [r1, #8]
 8002aae:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ab0:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <TIM_OC1_SetConfig+0x68>)
 8002ab2:	4290      	cmp	r0, r2
 8002ab4:	d005      	beq.n	8002ac2 <TIM_OC1_SetConfig+0x32>
 8002ab6:	4e11      	ldr	r6, [pc, #68]	; (8002afc <TIM_OC1_SetConfig+0x6c>)
 8002ab8:	42b0      	cmp	r0, r6
 8002aba:	d002      	beq.n	8002ac2 <TIM_OC1_SetConfig+0x32>
 8002abc:	4e10      	ldr	r6, [pc, #64]	; (8002b00 <TIM_OC1_SetConfig+0x70>)
 8002abe:	42b0      	cmp	r0, r6
 8002ac0:	d113      	bne.n	8002aea <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ac2:	2608      	movs	r6, #8
 8002ac4:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ac6:	68ce      	ldr	r6, [r1, #12]
 8002ac8:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002aca:	2604      	movs	r6, #4
 8002acc:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002ace:	4290      	cmp	r0, r2
 8002ad0:	d005      	beq.n	8002ade <TIM_OC1_SetConfig+0x4e>
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <TIM_OC1_SetConfig+0x6c>)
 8002ad4:	4290      	cmp	r0, r2
 8002ad6:	d002      	beq.n	8002ade <TIM_OC1_SetConfig+0x4e>
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <TIM_OC1_SetConfig+0x70>)
 8002ada:	4290      	cmp	r0, r2
 8002adc:	d105      	bne.n	8002aea <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ae0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ae2:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ae4:	694c      	ldr	r4, [r1, #20]
 8002ae6:	4334      	orrs	r4, r6
 8002ae8:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aea:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002aec:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002aee:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002af0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af2:	6203      	str	r3, [r0, #32]
}
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40014400 	.word	0x40014400
 8002b00:	40014800 	.word	0x40014800
 8002b04:	fffffcff 	.word	0xfffffcff

08002b08 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b08:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b0a:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b0c:	6a03      	ldr	r3, [r0, #32]
 8002b0e:	4a16      	ldr	r2, [pc, #88]	; (8002b68 <TIM_OC3_SetConfig+0x60>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b14:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002b16:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002b18:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b1a:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b1c:	680d      	ldr	r5, [r1, #0]
 8002b1e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b20:	4d12      	ldr	r5, [pc, #72]	; (8002b6c <TIM_OC3_SetConfig+0x64>)
 8002b22:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b24:	688d      	ldr	r5, [r1, #8]
 8002b26:	022d      	lsls	r5, r5, #8
 8002b28:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b2a:	4d11      	ldr	r5, [pc, #68]	; (8002b70 <TIM_OC3_SetConfig+0x68>)
 8002b2c:	42a8      	cmp	r0, r5
 8002b2e:	d10e      	bne.n	8002b4e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b30:	4d10      	ldr	r5, [pc, #64]	; (8002b74 <TIM_OC3_SetConfig+0x6c>)
 8002b32:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b34:	68cb      	ldr	r3, [r1, #12]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b3a:	4d0f      	ldr	r5, [pc, #60]	; (8002b78 <TIM_OC3_SetConfig+0x70>)
 8002b3c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b3e:	4d0f      	ldr	r5, [pc, #60]	; (8002b7c <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b40:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b42:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b44:	698a      	ldr	r2, [r1, #24]
 8002b46:	4332      	orrs	r2, r6
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	432a      	orrs	r2, r5
 8002b4c:	e005      	b.n	8002b5a <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4e:	4d0c      	ldr	r5, [pc, #48]	; (8002b80 <TIM_OC3_SetConfig+0x78>)
 8002b50:	42a8      	cmp	r0, r5
 8002b52:	d0f4      	beq.n	8002b3e <TIM_OC3_SetConfig+0x36>
 8002b54:	4d0b      	ldr	r5, [pc, #44]	; (8002b84 <TIM_OC3_SetConfig+0x7c>)
 8002b56:	42a8      	cmp	r0, r5
 8002b58:	d0f1      	beq.n	8002b3e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b5c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002b5e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002b60:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b62:	6203      	str	r3, [r0, #32]
}
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	fffffeff 	.word	0xfffffeff
 8002b6c:	fffffdff 	.word	0xfffffdff
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	fffff7ff 	.word	0xfffff7ff
 8002b78:	fffffbff 	.word	0xfffffbff
 8002b7c:	ffffcfff 	.word	0xffffcfff
 8002b80:	40014400 	.word	0x40014400
 8002b84:	40014800 	.word	0x40014800

08002b88 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b88:	6a03      	ldr	r3, [r0, #32]
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <TIM_OC4_SetConfig+0x4c>)
{
 8002b8c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b8e:	4013      	ands	r3, r2
 8002b90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b92:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b94:	4c10      	ldr	r4, [pc, #64]	; (8002bd8 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8002b96:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002b98:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b9a:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b9c:	680c      	ldr	r4, [r1, #0]
 8002b9e:	0224      	lsls	r4, r4, #8
 8002ba0:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ba2:	4c0e      	ldr	r4, [pc, #56]	; (8002bdc <TIM_OC4_SetConfig+0x54>)
 8002ba4:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ba6:	688c      	ldr	r4, [r1, #8]
 8002ba8:	0324      	lsls	r4, r4, #12
 8002baa:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002bac:	4c0c      	ldr	r4, [pc, #48]	; (8002be0 <TIM_OC4_SetConfig+0x58>)
 8002bae:	42a0      	cmp	r0, r4
 8002bb0:	d005      	beq.n	8002bbe <TIM_OC4_SetConfig+0x36>
 8002bb2:	4c0c      	ldr	r4, [pc, #48]	; (8002be4 <TIM_OC4_SetConfig+0x5c>)
 8002bb4:	42a0      	cmp	r0, r4
 8002bb6:	d002      	beq.n	8002bbe <TIM_OC4_SetConfig+0x36>
 8002bb8:	4c0b      	ldr	r4, [pc, #44]	; (8002be8 <TIM_OC4_SetConfig+0x60>)
 8002bba:	42a0      	cmp	r0, r4
 8002bbc:	d104      	bne.n	8002bc8 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bbe:	4c0b      	ldr	r4, [pc, #44]	; (8002bec <TIM_OC4_SetConfig+0x64>)
 8002bc0:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc2:	694c      	ldr	r4, [r1, #20]
 8002bc4:	01a4      	lsls	r4, r4, #6
 8002bc6:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc8:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bca:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002bcc:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002bce:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd0:	6202      	str	r2, [r0, #32]
}
 8002bd2:	bd30      	pop	{r4, r5, pc}
 8002bd4:	ffffefff 	.word	0xffffefff
 8002bd8:	ffff8cff 	.word	0xffff8cff
 8002bdc:	ffffdfff 	.word	0xffffdfff
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	ffffbfff 	.word	0xffffbfff

08002bf0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <TIM_Base_SetConfig+0x78>)
{
 8002bf2:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002bf4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf6:	4290      	cmp	r0, r2
 8002bf8:	d006      	beq.n	8002c08 <TIM_Base_SetConfig+0x18>
 8002bfa:	2480      	movs	r4, #128	; 0x80
 8002bfc:	05e4      	lsls	r4, r4, #23
 8002bfe:	42a0      	cmp	r0, r4
 8002c00:	d002      	beq.n	8002c08 <TIM_Base_SetConfig+0x18>
 8002c02:	4c1a      	ldr	r4, [pc, #104]	; (8002c6c <TIM_Base_SetConfig+0x7c>)
 8002c04:	42a0      	cmp	r0, r4
 8002c06:	d10c      	bne.n	8002c22 <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c08:	2470      	movs	r4, #112	; 0x70
 8002c0a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002c0c:	684c      	ldr	r4, [r1, #4]
 8002c0e:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c10:	4290      	cmp	r0, r2
 8002c12:	d00f      	beq.n	8002c34 <TIM_Base_SetConfig+0x44>
 8002c14:	2480      	movs	r4, #128	; 0x80
 8002c16:	05e4      	lsls	r4, r4, #23
 8002c18:	42a0      	cmp	r0, r4
 8002c1a:	d00b      	beq.n	8002c34 <TIM_Base_SetConfig+0x44>
 8002c1c:	4c13      	ldr	r4, [pc, #76]	; (8002c6c <TIM_Base_SetConfig+0x7c>)
 8002c1e:	42a0      	cmp	r0, r4
 8002c20:	d008      	beq.n	8002c34 <TIM_Base_SetConfig+0x44>
 8002c22:	4c13      	ldr	r4, [pc, #76]	; (8002c70 <TIM_Base_SetConfig+0x80>)
 8002c24:	42a0      	cmp	r0, r4
 8002c26:	d005      	beq.n	8002c34 <TIM_Base_SetConfig+0x44>
 8002c28:	4c12      	ldr	r4, [pc, #72]	; (8002c74 <TIM_Base_SetConfig+0x84>)
 8002c2a:	42a0      	cmp	r0, r4
 8002c2c:	d002      	beq.n	8002c34 <TIM_Base_SetConfig+0x44>
 8002c2e:	4c12      	ldr	r4, [pc, #72]	; (8002c78 <TIM_Base_SetConfig+0x88>)
 8002c30:	42a0      	cmp	r0, r4
 8002c32:	d103      	bne.n	8002c3c <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c34:	4c11      	ldr	r4, [pc, #68]	; (8002c7c <TIM_Base_SetConfig+0x8c>)
 8002c36:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c38:	68cc      	ldr	r4, [r1, #12]
 8002c3a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c3c:	2480      	movs	r4, #128	; 0x80
 8002c3e:	43a3      	bics	r3, r4
 8002c40:	694c      	ldr	r4, [r1, #20]
 8002c42:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002c44:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c46:	688b      	ldr	r3, [r1, #8]
 8002c48:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002c4a:	680b      	ldr	r3, [r1, #0]
 8002c4c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c4e:	4290      	cmp	r0, r2
 8002c50:	d005      	beq.n	8002c5e <TIM_Base_SetConfig+0x6e>
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <TIM_Base_SetConfig+0x84>)
 8002c54:	4298      	cmp	r0, r3
 8002c56:	d002      	beq.n	8002c5e <TIM_Base_SetConfig+0x6e>
 8002c58:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <TIM_Base_SetConfig+0x88>)
 8002c5a:	4298      	cmp	r0, r3
 8002c5c:	d101      	bne.n	8002c62 <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5e:	690b      	ldr	r3, [r1, #16]
 8002c60:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002c62:	2301      	movs	r3, #1
 8002c64:	6143      	str	r3, [r0, #20]
}
 8002c66:	bd10      	pop	{r4, pc}
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40002000 	.word	0x40002000
 8002c74:	40014400 	.word	0x40014400
 8002c78:	40014800 	.word	0x40014800
 8002c7c:	fffffcff 	.word	0xfffffcff

08002c80 <HAL_TIM_PWM_Init>:
{
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002c84:	2001      	movs	r0, #1
  if(htim == NULL)
 8002c86:	2c00      	cmp	r4, #0
 8002c88:	d014      	beq.n	8002cb4 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002c8a:	0025      	movs	r5, r4
 8002c8c:	353d      	adds	r5, #61	; 0x3d
 8002c8e:	782b      	ldrb	r3, [r5, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002c96:	0022      	movs	r2, r4
 8002c98:	323c      	adds	r2, #60	; 0x3c
 8002c9a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002c9c:	0020      	movs	r0, r4
 8002c9e:	f7fe fc6b 	bl	8001578 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002ca2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca4:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002ca6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	1d21      	adds	r1, r4, #4
 8002caa:	f7ff ffa1 	bl	8002bf0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002cae:	2301      	movs	r3, #1
  return HAL_OK;
 8002cb0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002cb2:	702b      	strb	r3, [r5, #0]
}
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cb8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb8:	2210      	movs	r2, #16
 8002cba:	6a03      	ldr	r3, [r0, #32]
{
 8002cbc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cbe:	4393      	bics	r3, r2
 8002cc0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002cc2:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cc4:	4d15      	ldr	r5, [pc, #84]	; (8002d1c <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8002cc6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002cc8:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cca:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ccc:	680d      	ldr	r5, [r1, #0]
 8002cce:	022d      	lsls	r5, r5, #8
 8002cd0:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8002cd2:	2520      	movs	r5, #32
 8002cd4:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cd6:	688d      	ldr	r5, [r1, #8]
 8002cd8:	012d      	lsls	r5, r5, #4
 8002cda:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cdc:	4d10      	ldr	r5, [pc, #64]	; (8002d20 <TIM_OC2_SetConfig+0x68>)
 8002cde:	42a8      	cmp	r0, r5
 8002ce0:	d10f      	bne.n	8002d02 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ce2:	2580      	movs	r5, #128	; 0x80
 8002ce4:	43aa      	bics	r2, r5
 8002ce6:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ce8:	68ca      	ldr	r2, [r1, #12]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cee:	2540      	movs	r5, #64	; 0x40
 8002cf0:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cf2:	4d0c      	ldr	r5, [pc, #48]	; (8002d24 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cf4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cf6:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cf8:	698b      	ldr	r3, [r1, #24]
 8002cfa:	4333      	orrs	r3, r6
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	432b      	orrs	r3, r5
 8002d00:	e005      	b.n	8002d0e <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d02:	4d09      	ldr	r5, [pc, #36]	; (8002d28 <TIM_OC2_SetConfig+0x70>)
 8002d04:	42a8      	cmp	r0, r5
 8002d06:	d0f4      	beq.n	8002cf2 <TIM_OC2_SetConfig+0x3a>
 8002d08:	4d08      	ldr	r5, [pc, #32]	; (8002d2c <TIM_OC2_SetConfig+0x74>)
 8002d0a:	42a8      	cmp	r0, r5
 8002d0c:	d0f1      	beq.n	8002cf2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8002d0e:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d10:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d12:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002d14:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002d16:	6202      	str	r2, [r0, #32]
}
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	ffff8cff 	.word	0xffff8cff
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	fffff3ff 	.word	0xfffff3ff
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	40014800 	.word	0x40014800

08002d30 <HAL_TIM_PWM_ConfigChannel>:
{
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002d32:	0006      	movs	r6, r0
 8002d34:	2302      	movs	r3, #2
 8002d36:	363c      	adds	r6, #60	; 0x3c
{
 8002d38:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002d3a:	7831      	ldrb	r1, [r6, #0]
{
 8002d3c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002d3e:	0018      	movs	r0, r3
 8002d40:	2901      	cmp	r1, #1
 8002d42:	d025      	beq.n	8002d90 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8002d46:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 8002d4a:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 8002d4e:	2a0c      	cmp	r2, #12
 8002d50:	d81a      	bhi.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x58>
 8002d52:	0010      	movs	r0, r2
 8002d54:	f7fd f9d8 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002d58:	18181807 	.word	0x18181807
 8002d5c:	1818181d 	.word	0x1818181d
 8002d60:	1818182f 	.word	0x1818182f
 8002d64:	41          	.byte	0x41
 8002d65:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d66:	0029      	movs	r1, r5
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	f7ff fe91 	bl	8002a90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d6e:	2208      	movs	r2, #8
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	6999      	ldr	r1, [r3, #24]
 8002d74:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d76:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	438a      	bics	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d84:	430a      	orrs	r2, r1
 8002d86:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002d8a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8002d8e:	7030      	strb	r0, [r6, #0]
}
 8002d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d92:	0029      	movs	r1, r5
 8002d94:	6820      	ldr	r0, [r4, #0]
 8002d96:	f7ff ff8f 	bl	8002cb8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	6999      	ldr	r1, [r3, #24]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	4915      	ldr	r1, [pc, #84]	; (8002e00 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8002daa:	400a      	ands	r2, r1
 8002dac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dae:	692a      	ldr	r2, [r5, #16]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	0212      	lsls	r2, r2, #8
 8002db4:	e7e6      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002db6:	0029      	movs	r1, r5
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	f7ff fea5 	bl	8002b08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	69d9      	ldr	r1, [r3, #28]
 8002dc4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dc6:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	438a      	bics	r2, r1
 8002dce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	61da      	str	r2, [r3, #28]
    break;
 8002dd8:	e7d6      	b.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dda:	0029      	movs	r1, r5
 8002ddc:	6820      	ldr	r0, [r4, #0]
 8002dde:	f7ff fed3 	bl	8002b88 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	0112      	lsls	r2, r2, #4
 8002de8:	69d9      	ldr	r1, [r3, #28]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8002df2:	400a      	ands	r2, r1
 8002df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002df6:	692a      	ldr	r2, [r5, #16]
 8002df8:	69d9      	ldr	r1, [r3, #28]
 8002dfa:	0212      	lsls	r2, r2, #8
 8002dfc:	e7ea      	b.n	8002dd4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	fffffbff 	.word	0xfffffbff

08002e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e04:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002e06:	2401      	movs	r4, #1
 8002e08:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002e0a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002e0c:	6a03      	ldr	r3, [r0, #32]
 8002e0e:	43a3      	bics	r3, r4
 8002e10:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002e12:	6a03      	ldr	r3, [r0, #32]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	6202      	str	r2, [r0, #32]
}
 8002e18:	bd10      	pop	{r4, pc}
	...

08002e1c <HAL_TIM_PWM_Start>:
{
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e20:	2201      	movs	r2, #1
 8002e22:	6800      	ldr	r0, [r0, #0]
 8002e24:	f7ff ffee 	bl	8002e04 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <HAL_TIM_PWM_Start+0x38>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d005      	beq.n	8002e3c <HAL_TIM_PWM_Start+0x20>
 8002e30:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <HAL_TIM_PWM_Start+0x3c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d002      	beq.n	8002e3c <HAL_TIM_PWM_Start+0x20>
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_TIM_PWM_Start+0x40>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_PWM_Start+0x2a>
    __HAL_TIM_MOE_ENABLE(htim);
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e40:	0212      	lsls	r2, r2, #8
 8002e42:	430a      	orrs	r2, r1
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002e46:	2201      	movs	r2, #1
 8002e48:	6819      	ldr	r1, [r3, #0]
}
 8002e4a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
}
 8002e50:	bd10      	pop	{r4, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800

08002e60 <HAL_TIM_PWM_Stop>:
{
 8002e60:	b510      	push	{r4, lr}
 8002e62:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e64:	2200      	movs	r2, #0
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	f7ff ffcc 	bl	8002e04 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <HAL_TIM_PWM_Stop+0x58>)
 8002e70:	4912      	ldr	r1, [pc, #72]	; (8002ebc <HAL_TIM_PWM_Stop+0x5c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d005      	beq.n	8002e82 <HAL_TIM_PWM_Stop+0x22>
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <HAL_TIM_PWM_Stop+0x60>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d002      	beq.n	8002e82 <HAL_TIM_PWM_Stop+0x22>
 8002e7c:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_TIM_PWM_Stop+0x64>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10a      	bne.n	8002e98 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	420a      	tst	r2, r1
 8002e86:	d107      	bne.n	8002e98 <HAL_TIM_PWM_Stop+0x38>
 8002e88:	6a18      	ldr	r0, [r3, #32]
 8002e8a:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <HAL_TIM_PWM_Stop+0x68>)
 8002e8c:	4210      	tst	r0, r2
 8002e8e:	d103      	bne.n	8002e98 <HAL_TIM_PWM_Stop+0x38>
 8002e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e92:	480e      	ldr	r0, [pc, #56]	; (8002ecc <HAL_TIM_PWM_Stop+0x6c>)
 8002e94:	4002      	ands	r2, r0
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	420a      	tst	r2, r1
 8002e9c:	d107      	bne.n	8002eae <HAL_TIM_PWM_Stop+0x4e>
 8002e9e:	6a19      	ldr	r1, [r3, #32]
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_TIM_PWM_Stop+0x68>)
 8002ea2:	4211      	tst	r1, r2
 8002ea4:	d103      	bne.n	8002eae <HAL_TIM_PWM_Stop+0x4e>
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	438a      	bics	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	343d      	adds	r4, #61	; 0x3d
}
 8002eb2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	7023      	strb	r3, [r4, #0]
}
 8002eb6:	bd10      	pop	{r4, pc}
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	00001111 	.word	0x00001111
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800
 8002ec8:	00000444 	.word	0x00000444
 8002ecc:	ffff7fff 	.word	0xffff7fff

08002ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002ed0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002ed2:	0004      	movs	r4, r0
 8002ed4:	343c      	adds	r4, #60	; 0x3c
 8002ed6:	7822      	ldrb	r2, [r4, #0]
{
 8002ed8:	0003      	movs	r3, r0
 8002eda:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002edc:	2a01      	cmp	r2, #1
 8002ede:	d017      	beq.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002ee2:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	353d      	adds	r5, #61	; 0x3d
 8002ee6:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	306e      	adds	r0, #110	; 0x6e
 8002eec:	4382      	bics	r2, r0
 8002eee:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002ef4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef6:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002ef8:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002efa:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	4382      	bics	r2, r0
 8002f00:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002f02:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002f04:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002f0e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002f10:	bd30      	pop	{r4, r5, pc}
	...

08002f14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f14:	4813      	ldr	r0, [pc, #76]	; (8002f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f16:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002f18:	2004      	movs	r0, #4
    LDR R1, [R0]
 8002f1a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002f1c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002f1e:	221f      	movs	r2, #31
    CMP R1, R2
 8002f20:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002f22:	d105      	bne.n	8002f30 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8002f26:	2101      	movs	r1, #1
    STR R1, [R0]
 8002f28:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002f2a:	4810      	ldr	r0, [pc, #64]	; (8002f6c <LoopForever+0xa>)
    LDR R1,=0x00000000
 8002f2c:	2100      	movs	r1, #0
    STR R1, [R0]
 8002f2e:	6001      	str	r1, [r0, #0]

08002f30 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f30:	480f      	ldr	r0, [pc, #60]	; (8002f70 <LoopForever+0xe>)
  ldr r1, =_edata
 8002f32:	4910      	ldr	r1, [pc, #64]	; (8002f74 <LoopForever+0x12>)
  ldr r2, =_sidata
 8002f34:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <LoopForever+0x16>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <LoopForever+0x1a>)
  ldr r4, =_ebss
 8002f48:	4c0d      	ldr	r4, [pc, #52]	; (8002f80 <LoopForever+0x1e>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f56:	f7fe fb79 	bl	800164c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f5a:	f000 f815 	bl	8002f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f5e:	f7fe f8f3 	bl	8001148 <main>

08002f62 <LoopForever>:

LoopForever:
    b LoopForever
 8002f62:	e7fe      	b.n	8002f62 <LoopForever>
  ldr   r0, =_estack
 8002f64:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8002f68:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8002f6c:	40010000 	.word	0x40010000
  ldr r0, =_sdata
 8002f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f74:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002f78:	08003084 	.word	0x08003084
  ldr r2, =_sbss
 8002f7c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002f80:	20000154 	.word	0x20000154

08002f84 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f84:	e7fe      	b.n	8002f84 <DMA1_Channel1_IRQHandler>
	...

08002f88 <__libc_init_array>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	4d0c      	ldr	r5, [pc, #48]	; (8002fc0 <__libc_init_array+0x38>)
 8002f8e:	4c0d      	ldr	r4, [pc, #52]	; (8002fc4 <__libc_init_array+0x3c>)
 8002f90:	1b64      	subs	r4, r4, r5
 8002f92:	10a4      	asrs	r4, r4, #2
 8002f94:	42a6      	cmp	r6, r4
 8002f96:	d109      	bne.n	8002fac <__libc_init_array+0x24>
 8002f98:	2600      	movs	r6, #0
 8002f9a:	f000 f82b 	bl	8002ff4 <_init>
 8002f9e:	4d0a      	ldr	r5, [pc, #40]	; (8002fc8 <__libc_init_array+0x40>)
 8002fa0:	4c0a      	ldr	r4, [pc, #40]	; (8002fcc <__libc_init_array+0x44>)
 8002fa2:	1b64      	subs	r4, r4, r5
 8002fa4:	10a4      	asrs	r4, r4, #2
 8002fa6:	42a6      	cmp	r6, r4
 8002fa8:	d105      	bne.n	8002fb6 <__libc_init_array+0x2e>
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	00b3      	lsls	r3, r6, #2
 8002fae:	58eb      	ldr	r3, [r5, r3]
 8002fb0:	4798      	blx	r3
 8002fb2:	3601      	adds	r6, #1
 8002fb4:	e7ee      	b.n	8002f94 <__libc_init_array+0xc>
 8002fb6:	00b3      	lsls	r3, r6, #2
 8002fb8:	58eb      	ldr	r3, [r5, r3]
 8002fba:	4798      	blx	r3
 8002fbc:	3601      	adds	r6, #1
 8002fbe:	e7f2      	b.n	8002fa6 <__libc_init_array+0x1e>
 8002fc0:	0800307c 	.word	0x0800307c
 8002fc4:	0800307c 	.word	0x0800307c
 8002fc8:	0800307c 	.word	0x0800307c
 8002fcc:	08003080 	.word	0x08003080

08002fd0 <memcpy>:
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	b510      	push	{r4, lr}
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d100      	bne.n	8002fda <memcpy+0xa>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	5ccc      	ldrb	r4, [r1, r3]
 8002fdc:	54c4      	strb	r4, [r0, r3]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	e7f8      	b.n	8002fd4 <memcpy+0x4>

08002fe2 <memset>:
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	1882      	adds	r2, r0, r2
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d100      	bne.n	8002fec <memset+0xa>
 8002fea:	4770      	bx	lr
 8002fec:	7019      	strb	r1, [r3, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	e7f9      	b.n	8002fe6 <memset+0x4>
	...

08002ff4 <_init>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr

08003000 <_fini>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr
